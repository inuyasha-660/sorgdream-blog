<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Linux on sorgDream&#39;s Blog</title>
    <link>https://blog.sorgdream.com/categories/linux/</link>
    <description>Recent content in Linux on sorgDream&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>sorgDream - [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</copyright>
    <lastBuildDate>Mon, 22 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.sorgdream.com/categories/linux/index.xml" rel="self" type="application/rss+xml" /><icon>https://blog.sorgdream.com/avatar.jpg</icon>
    
    
    <item>
      <title>Frp自建内网穿透</title>
      <link>https://blog.sorgdream.com/posts/nat-traversal/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/nat-traversal/</guid>
      <description><![CDATA[<p>这几天一直在折腾内网穿透的事，原因很简单，服务器的ROM不够大，又没钱升级配置，又拍云的免费OSS不备案无法绑定域名，免费的内网穿透速率太小了，更别提还有流量限制</p>
<p>想了想貌似只能自己建一个了，刚好手里有吃灰的Orangepi Zeor3，买的时候配了张128G的TF卡，虽然速度一般，但对于我来说是绰绰有余了</p>
<h2 id="frp">frp</h2>
<p>提到内网穿透，想到的肯定是大名顶顶的<strong>frp</strong>，目前在Github上已有76.3K starred</p>
<p>网上的很多文章大多是教你用基于frp的一键配置脚本，但试了几个发现都没用后决定自己尝试</p>
<h3 id="安装使用">安装&amp;使用</h3>
<p>frp的安装很简单，参照<a href="https://gofrp.org/zh-cn/">文档</a>的教程</p>
<ol>
<li>
<p>到<a href="https://github.com/fatedier/frp/releases/tag/v0.53.2">Releases</a>处下载适合的架构/系统的压缩包，解压到任意目录</p>
</li>
<li>
<p>使用<code>./frps -c ./frps.toml</code>启动服务端</p>
</li>
<li>
<p>使用<code>./frpc -c ./frpc.toml</code>启动客户端</p>
</li>
</ol>
<h3 id="使用-systemd-开机自启动">使用 systemd 开机自启动</h3>
<p>如果断开ssh连接，frp服务也会断开;可以将它设置为开机自启</p>
<ol>
<li>(如果尚未安装)使用<code>apt install systemd </code>安装，其他发行版使用其包管理器即可</li>
<li>编辑<code>/etc/systemd/system/frps.service</code>创建frp服务配置，写入以下内容</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-service" data-lang="service"><span style="display:flex;"><span><span style="color:#66d9ef">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 服务名称，可自定义</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Description </span><span style="color:#f92672">=</span><span style="color:#e6db74"> frp server</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">After </span><span style="color:#f92672">=</span><span style="color:#e6db74"> network.target syslog.target</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Wants </span><span style="color:#f92672">=</span><span style="color:#e6db74"> network.target</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Type </span><span style="color:#f92672">=</span><span style="color:#e6db74"> simple</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 启动frps的命令，需修改为您的frps的安装路径</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExecStart </span><span style="color:#f92672">=</span><span style="color:#e6db74"> /path/to/frps -c /path/to/frps.toml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WantedBy </span><span style="color:#f92672">=</span><span style="color:#e6db74"> multi-user.target</span>
</span></span></code></pre></div><p>3.管理命令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 启动frp</span>
</span></span><span style="display:flex;"><span>sudo systemctl start frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 停止frp</span>
</span></span><span style="display:flex;"><span>sudo systemctl stop frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 重启frp</span>
</span></span><span style="display:flex;"><span>sudo systemctl restart frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 查看frp状态</span>
</span></span><span style="display:flex;"><span>sudo systemctl status frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 开机自启动</span>
</span></span><span style="display:flex;"><span>sudo systemctl enable frps
</span></span></code></pre></div><p>之后的frpc也是大同小异，只需要更改名字和位置即可</p>
<h3 id="配置">配置</h3>
<p>重点来了，frp有两个配置，一个<code>frps.toml</code>用于服务端，一个<code>frpc.toml</code>用于客户端</p>
<ol>
<li>配置frps.toml</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">bindPort</span> = <span style="color:#ae81ff">7000</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">vhostHTTPPort</span> = <span style="color:#ae81ff">7890</span>
</span></span></code></pre></div><p><code>bindPort</code>不用管，<code>vhostHTTPPort</code>为连接的端口，默认为8080,但端口被我的评论占用了，所以改成7890</p>
<p>如像我这样，配置完后可以通过<code>http://www.yourdomain.com:7890</code>访问</p>
<ol start="2">
<li>配置frpc.toml</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">serverAddr</span> = <span style="color:#e6db74">&#34;x.x.x.x&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">serverPort</span> = <span style="color:#ae81ff">7000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[[<span style="color:#a6e22e">proxies</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;image-hosting&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">type</span> = <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">localIP</span> = <span style="color:#e6db74">&#34;192.168.xx.xxx&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">localPort</span> = <span style="color:#ae81ff">7890</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">customDomains</span> = [<span style="color:#e6db74">&#34;www.example.com&#34;</span>]
</span></span></code></pre></div><p>serverAddr: 服务器IP</p>
<p>name: 取一个好记的名字</p>
<p>type: 因为要搭建网站所以选择http</p>
<p>localIP: 本机IP</p>
<p>localPort: 内网服务部署端口</p>
<p>customDomains: 绑定的域名</p>
<p>PS: 原本还有一个<code>remotePort = 6000</code>配置，看到文档没有就删了，实测没有影响</p>
<p>将和 <a href="https://www.example.com">www.example.com</a> 的域名 A 记录解析到服务器的 IP 地址<code>x.x.x.x</code></p>
<p>访问<code>www.example.com:7890</code>即可访问内网机器上的<code>7890</code>服务</p>
<h3 id="nginx配置">Nginx配置</h3>
<p>不得不说Nginx真是好用，配置方便，功能强大; 配置完frp,接下来就是nginx</p>
<p>因为上面只进行了内网穿透，内网的机器还需要配置nginx来显示网站</p>
<ol>
<li>还没有安装的在等什么，使用<code>apt install nginx</code>安装nginx</li>
<li>在<code>etc/nginx/conf.d/</code>文件夹内添加配置文件，文件名随意，以<code>.conf</code>作为拓展名</li>
<li>增添配置，以下为我的配置</li>
</ol>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 7890;
    server_name www.example.com;
    root /home/image-hosting;

    fancyindex on;            
    fancyindex_exact_size off; 
    fancyindex_localtime on; 
    fancyindex_name_length 255; 
    fancyindex_time_format &#34;%Y-%m-%d %H:%M:%S&#34;;

    location / {
    }
}
</code></pre><p>listen: 监听7890端口</p>
<p>server_name: 绑定的域名</p>
<p>root: 网站所在文件夹</p>
<p>以下配置开启文件引索，若无需求可以忽略</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf"> fancyindex on;            
    fancyindex_exact_size on; 
    fancyindex_localtime on; 
    fancyindex_name_length 255; 
    fancyindex_time_format &#34;%Y-%m-%d %H:%M:%S&#34;;
</code></pre><p>再一次尝试访问<code>www.example.com:7890</code>查看是否正常显示</p>
<h4 id="去端口访问">去端口访问</h4>
<p>整天带端口访问太丑了，可以使用nginx的反向代理功能解决，原理就是在服务器上套层nginx，将<code>www.example.com</code>反向代理至<code>www.example.com:7890</code></p>
<p>以下是我的配置</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name www.example.com; # 设置的域名
    location / {
             proxy_pass  http://www.example.com:7890; # 反向代理至8080端口
    }
}
</code></pre><p>配置完尝试使用<code>www.example.com</code>访问</p>
<h3 id="https">HTTPS</h3>
<p>虽然现在已经可以较为优雅地访问了，但因为缺少ssl证书，每次访问都给我警告</p>
<p>frp支持为本地 HTTP 服务启用 HTTPS，但需要自行下载证书到内网机器，而且无法使用像certbot这样的工具，所以我选择在服务器的Nginx配置证书</p>
<p>关于如何获取证书，我的<a href="https://blog.inuya.ltd/posts/winter/">上上篇文章</a>已经讲的很清楚了，下面是我的配置</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name img.inuya.ltd; # 设置的域名
    location / {
             proxy_pass  http://img.inuya.ltd:7890; # 反向代理至7890端口
    }
}

server {
    listen 443;
    server_name img.inuya.ltd;
    ssl_certificate /etc/letsencrypt/live/img.inuya.ltd/fullchain.pem;  # 配置证书
    ssl_certificate_key /etc/letsencrypt/live/img.inuya.ltd/privkey.pem;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    # 表示使用的加密套件的类型。
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 表示使用的TLS协议的类型。
    ssl_prefer_server_ciphers on;
    location / {
            proxy_pass http://img.inuya.ltd:7890;
    }
}
</code></pre><h2 id="图床">图床</h2>
<p>搞定了内网穿透，但怎么把图片显示出来呢，1P面板有个图床的docker镜像，用了下感觉很一般，不如自己建一个</p>
<p>因为没学过前端，所以只能边学边建，写出来的东西也是漏洞百出，但最起码能用了</p>
<h3 id="文件引索">文件引索</h3>
<p>原本是想写一个文件引索，看了几篇文章都是无从下手，偶然看到一篇关闭<code>Apache</code>默认文件引索功能的文章，想到Nginx是否也有这个功能，找了一下还真有，只不过需要手动开启</p>
<p>在内网机器的nginx配置中添加以下内容</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen  80;
    server_name 192.168.31.112;
    root /home/image-hosting;
    autoindex on;    	#启用或禁用目录列表输出
    autoindex_format html； #设置目录列表的格式
    autoindex_localtime on;  #指定目录列表中的时间是否应以本地时区或 UTC 输出
    autoindex_exact_size off;  #是否应在目录列表中输出确切的文件大小
}
</code></pre><p>输入一个网站目录，看是否能浏览文件</p>
<h3 id="嵌入引索">嵌入引索</h3>
<p>因索有了，但我不想手动一个个翻图片，于是将它嵌入到了我的主页</p>
<p>在代码中添加<code>&lt;iframe&gt;</code>标签即可嵌入一个网页，因为我想显示<code>Images</code>目录的引索，所以src中填入了<code>images/</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;div-pic&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;images/&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;100%&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;800px&#34;</span> <span style="color:#a6e22e">scrolling</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;auto&#34;</span> <span style="color:#a6e22e">framespacing</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#a6e22e">allowfullscreen</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span>&gt; &lt;/<span style="color:#f92672">iframe</span>&gt;   
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>如果想要更换嵌入的网站，只需要修改<code>src=&quot;&quot;</code> 里的内容为目标网址即可</p>
<h4 id="美化引索">美化引索</h4>
<p>但这样还有一个问题，默认的引索在网站的背景是透明的，导致看不清文件名，CSS添加的背景太亮了，又偶然看见一篇用第三方模块来美化的文章</p>
<p><!-- raw HTML omitted -->使用<code>fancyindex</code>模块替代默认的引索，来达到美化的效果</p>
<ol>
<li><code>apt install libnginx-mod-http-fancyindex</code>安装模块</li>
<li>修改/创建<code>/etc/nginx/conf.d/</code>下的配置，添加以下内容以开启引索</li>
</ol>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name 192.168.31.112;
    root /home/image-hosting;

    fancyindex on;            
    fancyindex_exact_size off; 
    fancyindex_localtime on; 
    fancyindex_name_length 255; 
    fancyindex_time_format &#34;%Y-%m-%d %H:%M:%S&#34;;

    location / {
    }
}
</code></pre><p>返回网站，刷新即可看到新样式</p>
<p>fancyindex还有许多主题可选，如<a href="https://github.com/Naereen/Nginx-Fancyindex-Theme">Nginx-Fancyindex-Theme</a>和<a href="https://github.com/alehaa/nginx-fancyindex-flat-theme">nginx-fancyindex-flat-theme</a></p>
<p>也可以用<code>fancyindex</code>加<code>theme</code>关键字在Guthub搜索其他主题</p>
<h2 id="补充">补充</h2>
<p>其实内网穿透这个想法很早就有了，但一直搁置到现在;未来可能还会把Twikoo评论也放到开发板上，还是要看评论的人多不多</p>
<p>最后祝大家玩得开心</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://nginx.org/en/docs/http/ngx_http_autoindex_module.html">Module ngx_http_autoindex_module</a></li>
<li><a href="https://gofrp.org/zh-cn/">frp</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Arch下的Kde配置</title>
      <link>https://blog.sorgdream.com/posts/arch-kde/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/arch-kde/</guid>
      <description><![CDATA[<p>2024年的第一篇文章，祝大家新年快乐(虽然有点迟了)</p>
<p>这段时间重装了6次Arch，1次Debian Testing，几乎将主流桌面体验完了，血与泪的教训，wayland目前还不成熟，高分屏还得老老实实用x11</p>
<h2 id="起因">起因</h2>
<p>逛B站时偶然看到了有人发<a href="https://www.bilibili.com/read/cv22707313/">Hyprland的配置</a>，再看我的Kde瞬间就不香了</p>
<p>拿出我珍藏多年的Arch Live CD ，F12选择U盘启动，在经过一系列分区，生成fstab，引导后，成功来到了熟悉的tty界面，接下来照着B站的教程，开始安装Hyprland</p>
<h2 id="hyprland">Hyprland</h2>
<blockquote>
<p>Hyprland is a highly customizable dynamic tiling Wayland compositor that doesn&rsquo;t sacrifice on its looks.</p>
</blockquote>
<blockquote>
<p>Hyprland 是一款高度可定制的动态平铺 Wayland 合成器，不会牺牲其外观。</p>
</blockquote>
<h3 id="安装">安装</h3>
<ol>
<li>首先安装Wayland</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pacman -S xorg-xwayland qt5-wayland qt6-wayland glfw-wayland
</span></span></code></pre></div><ol start="2">
<li>安装Hyprland</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>paru -S hyprland-bin
</span></span></code></pre></div><ol start="3">
<li>复制配置文件</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir -pv ~/.config/hypr
</span></span><span style="display:flex;"><span>sudo cp /usr/share/hyprland/hyprland.conf ~/.config/hypr/
</span></span></code></pre></div><ol start="4">
<li>Hyprland启动</li>
</ol>
<p>通过编辑<code>~/.bash_profile</code>启动(不使用显示管理器)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 启动 wayland 桌面前设置一些环境变量</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> set_wayland_env
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 设置语言环境为中文</span>
</span></span><span style="display:flex;"><span>	export LANG<span style="color:#f92672">=</span>zh_CN.UTF-8
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 解决QT程序缩放问题</span>
</span></span><span style="display:flex;"><span>	export QT_AUTO_SCREEN_SCALE_FACTOR<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># QT使用wayland和gtk</span>
</span></span><span style="display:flex;"><span>	export QT_QPA_PLATFORM<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wayland;xcb&#34;</span>
</span></span><span style="display:flex;"><span>	export QT_WAYLAND_DISABLE_WINDOWDECORATION<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 使用qt5ct软件配置QT程序外观</span>
</span></span><span style="display:flex;"><span>	export QT_QPA_PLATFORMTHEME<span style="color:#f92672">=</span>qt5ct
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 一些游戏使用wayland</span>
</span></span><span style="display:flex;"><span>	export SDL_VIDEODRIVER<span style="color:#f92672">=</span>wayland
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 解决java程序启动黑屏错误</span>
</span></span><span style="display:flex;"><span>	export _JAVA_AWT_WM_NONEREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># GTK后端为 wayland和x11,优先wayland</span>
</span></span><span style="display:flex;"><span>	export GDK_BACKEND<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wayland,x11&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 命令行输入这个命令启动hyprland,可以自定义</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> start_hyprland
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	set_wayland_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	export XDG_SESSION_TYPE<span style="color:#f92672">=</span>wayland
</span></span><span style="display:flex;"><span>	export XDG_SESSION_DESKTOP<span style="color:#f92672">=</span>Hyprland
</span></span><span style="display:flex;"><span>	export XDG_CURRENT_DESKTOP<span style="color:#f92672">=</span>Hyprland
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 启动 Hyprland程序</span>
</span></span><span style="display:flex;"><span>	exec Hyprland
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>重启或直接<code>source ~/.bash_profile</code>使配置生效，输入<code>start_hyprland</code>启动</p>
<h3 id="应用安装">应用安装</h3>
<p>刚进入桌面，你会发现什么也没有，先装个终端和中文字体</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S kitty wqy-zenhei
</span></span></code></pre></div><p>使用快捷键<code>Super+Q</code>即可启动(Super键默认为WIN)</p>
<p>貌似一切都很完美，让我们装个QQ试逝</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>paru -S linuxqq
</span></span></code></pre></div><p>打开后你会发现字体变得很模糊，不止qq,其他程序在wayland缩放下的显示都不太好</p>
<h2 id="gnome">Gnome</h2>
<blockquote>
<p>GNOME originally an acronym for GNU Network Object Model Environment,is a free and open-source desktop environment for Linux and other Unix-like operating systems.</p>
</blockquote>
<blockquote>
<p>GNOME是一个完全由自由软件组成的桌面环境。它的目标操作系统是Linux，但是大部分的BSD系统亦支持GNOME。</p>
</blockquote>
<p>因为Hyprland的字体问题，我回到了一开始用的gnome;但因为使用wayland的原因，qq下的字体还是模糊，而且缩放有问题，200%会使字体和窗口过大，100%字又太小</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsettings set org.gnome.mutter experimental-features <span style="color:#e6db74">&#34;[&#39;scale-monitor-framebuffer&#39;]&#34;</span>
</span></span></code></pre></div><p>使用此命令开启分数缩放</p>
<p>缩放是解决了，但字体的问题依旧，目前没找到完美的解决方案，只能用<code>Tweaks</code>工具调整字体大小</p>
<h2 id="cinnamon">Cinnamon</h2>
<blockquote>
<p>Cinnamon, forked from GNOME Shell, is the &ldquo;shell&rdquo; of Cinnamon. It provides the user interface such as panels, hot corners, menus etc. The ui is written in JavaScript, while its core libraries are written in C.</p>
</blockquote>
<blockquote>
<p>Cinnamon是类Unix系统下的一个桌面环境。最初是GNOME Shell的一个派生版本，由Linux Mint开发，提供了相似于GNOME 2，易于使用的传统用户界面，从Cinnamon 2.0开始，成为独立的桌面环境。</p>
</blockquote>
<p>一个由Mint开发的桌面，也是Linux Mint的默认桌面</p>
<p>Cinnamon不同于前两个，使用的是x11，所以基本没有字体和缩放问题，而且桌面和发生版都很适合新手，Debian系的包也比较多</p>
<p>但我不是很喜欢Cinnamon的设计，所以没有使用它</p>
<h2 id="kde-plasma">KDE Plasma</h2>
<blockquote>
<p>Plasma is a graphical shell developed by KDE for Unix-like operating systems. Plasma is a standard desktop interface.</p>
</blockquote>
<blockquote>
<p>KDE 是一套由 Plasma 桌面环境、一系列的库、框架（KDE Frameworks）和一些应用组成的软件项目。</p>
</blockquote>
<p>目前在用的桌面，自定义程度很高，记录下配置过程</p>
<h3 id="汉化不完全">汉化不完全</h3>
<p>表现为设置/文件管理器一半中文一半英文</p>
<p>编辑<code>~/.config/plasma-localerc</code>将<code>LANG=h_CN</code>改为<code>LANG=zh_CN.UTF-8</code>，重启后即可解决</p>
<h3 id="系统代理">系统代理</h3>
<ol>
<li>
<p>手机代理设置-允许来自局域网连接，记录端口;在设置-网络设置-代理服务器中选择-使用手动指定的的代理服务器配置</p>
</li>
<li>
<p>手机任意终端<code>su</code>后使用<code>ifconfig</code>获取本机IP,填入代理设置</p>
</li>
<li>
<p>终端走代理</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export https_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 http_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 all_proxy<span style="color:#f92672">=</span>socks5://127.0.0.1:7891
</span></span></code></pre></div><p><code>7890</code>/<code>7891</code>为端口号，<code>127.0.0.1</code>为IP</p>
<h3 id="常用应用">常用应用</h3>
<h4 id="1-neovim">1. neovim</h4>
<p>使用<a href="https://github.com/ayamir/nvimdots">nvimdots</a>配置，另一选择<a href="https://github.com/NvChad/NvChad">NcChad</a></p>
<blockquote>
<p>LazyVim is a Neovim setup powered by 💤 lazy.nvim to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.</p>
</blockquote>
<h5 id="11-安装">1.1 安装</h5>
<ol>
<li>1.1.1 <strong>依赖</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ol>
<ul>
<li>Neovim &gt;= 0.9.0 (needs to be built with LuaJIT)</li>
<li>Git &gt;= 2.19.0 (for partial clones support)</li>
<li>a Nerd Font (optional)</li>
<li>a C compiler for nvim-treesitter. See here</li>
</ul>
<ol start="2">
<li>1.1.2 安装</li>
</ol>
<p>克隆配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/LazyVim/starter ~/.config/nvim
</span></span></code></pre></div><p>nvim启动!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nvim
</span></span></code></pre></div><h5 id="12-nvim下的复制粘贴">1.2 nvim下的复制粘贴</h5>
<p><code>sudo pacman -S xclip</code>安装xclip后，使用<code>v</code>选中要复制的内容，<code>y</code>复制，<code>p</code>粘贴，<code>d</code>剪切</p>
<h4 id="2-neofetch">2. neofetch</h4>
<p>相信用过Linux的都听说过这个软件，它能显示系统Ascii art和硬件信息，可以通过修改<code>~/.config/neofetch/config.conf</code>进行配置</p>
<p>参考<a href="https://github.com/Kicamon/dotfile/blob/main/neofetch/config.conf">Kicamon</a>的配置，进行了一些修改，用<code>-</code>代替图标</p>
<h4 id="3-网易云音乐">3. 网易云音乐</h4>
<p>写文章时没点音乐怎么行，目前Arch下我认为比较好的解决方法一是<a href="https://github.com/qier222/YesPlayMusic">yesplaymusic</a>，第二个就是<a href="https://github.com/go-musicfox/go-musicfox">go-musicfox</a></p>
<p>不过yesplaymusic尝试过三种登陆方式均无法登陆，遂只能使用go-musicfox</p>
<blockquote>
<p>go-musicfox是用Go写的又一款网易云音乐命令行客户端，支持UnblockNeteaseMusic、各种音质级别、lastfm、MPRIS、MacOS交互响应（睡眠暂停、蓝牙耳机连接断开响应、菜单栏控制等）&hellip;</p>
</blockquote>
<ol>
<li>使用<code>pacman -S go-musicfox</code>安装go-musicfox</li>
<li>输入<code>musicfox</code>进入tui</li>
<li>点击-<code>我的歌单</code>进行登陆</li>
</ol>
<h5 id="31-无法播放">3.1 无法播放</h5>
<p>如果你很幸运，能直接播放，可以忽略这一步</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S pulseaudio-alsa libavtp
</span></span></code></pre></div><p>安装缺少的两个包就可以播放了</p>
<h5 id="32-快捷键">3.2 快捷键</h5>
<table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>←</code>  <code>h</code></td>
<td>左方向</td>
</tr>
<tr>
<td><code>→</code> <code>l</code></td>
<td>右方向</td>
</tr>
<tr>
<td><code>↑</code> <code>k</code></td>
<td>上方向</td>
</tr>
<tr>
<td><code>↓</code> <code>j</code></td>
<td>下方向</td>
</tr>
<tr>
<td><code>-</code> <code>滚轮下</code></td>
<td>减小音量</td>
</tr>
<tr>
<td><code>=</code> <code>滚轮上</code></td>
<td>增大音量</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出</td>
</tr>
<tr>
<td><code>Space</code> (空格)</td>
<td>暂停/播放</td>
</tr>
</tbody>
</table>
<p>更多快捷键请看<a href="https://github.com/go-musicfox/go-musicfox">README</a></p>
<h3 id="bash">Bash</h3>
<p>这次安装我离开了Zsh，重新回到了Bash的怀抱，但默认的Prompt太丑了，只显示最后一级路径，于是<del>抄</del>参考<a href="https://gitweb.gentoo.org/repo/gentoo.git/tree/app-shells/bash/files/bashrc/">Gentoo</a>的<code>.bashrc</code>，重新配置了下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-.bashrc" data-lang=".bashrc"><span style="display:flex;"><span><span style="color:#75715e"># /etc/bash/bashrc</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This file is sourced by all *interactive* bash shells on startup,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># including some apparently interactive shells such as scp and rcp</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># that can&#39;t tolerate any output.  So make sure this doesn&#39;t display</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># anything or bad things will happen!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Test for an interactive shell.  There is no need to set anything</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># past this point for scp and rcp, and it&#39;s important to refrain from</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># outputting anything in those cases.</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $- !<span style="color:#f92672">=</span> *i* <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Shell is non-interactive.  Be done now!</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Bash won&#39;t get SIGWINCH if another process is in the foreground.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable checkwinsize so that bash will check the terminal size when</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># it regains control.  #65623</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)</span>
</span></span><span style="display:flex;"><span>shopt -s checkwinsize
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable completion when the input buffer is empty.  i.e. Hitting tab</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and waiting a long time for bash to expand all of $PATH.</span>
</span></span><span style="display:flex;"><span>shopt -s no_empty_cmd_completion
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable history appending instead of overwriting when exiting.  #139609</span>
</span></span><span style="display:flex;"><span>shopt -s histappend
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Save each command to the history file as it&#39;s executed.  #517342</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This does mean sessions get interleaved when reading later on, but this</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># way the history is always up to date.  History is not synced across live</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sessions though; that is what `history -n` does.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disabled by default due to concerns related to system recovery when $HOME</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># is under duress, or lives somewhere flaky (like NFS).  Constantly syncing</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the history will halt the shell prompt until it&#39;s finished.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#PROMPT_COMMAND=&#39;history -a&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change the window title of X terminals</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>TERM<span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>aEkx<span style="color:#f92672">]</span>term* | rxvt* | gnome* | konsole* | interix | tmux*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033]0;\u@\h:\w\007\]&#39;</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>screen*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033_\u@\h:\w\033\\\]&#39;</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	unset PS1
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set colorful PS1 only on colorful terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dircolors --print-database uses its own built-in database</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># instead of using /etc/DIR_COLORS.  Try to use the external file</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># first to take advantage of user additions.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We run dircolors directly due to its changes in file syntax and</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># terminal name patching.</span>
</span></span><span style="display:flex;"><span>use_color<span style="color:#f92672">=</span>false
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> type -P dircolors &gt;/dev/null; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Enable colors for ls, etc.  Prefer ~/.dir_colors #64489</span>
</span></span><span style="display:flex;"><span>	LS_COLORS<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -f ~/.dir_colors <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b ~/.dir_colors<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[[</span> -f /etc/DIR_COLORS <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b /etc/DIR_COLORS<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Note: We always evaluate the LS_COLORS setting even when it&#39;s the</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># default.  If it isn&#39;t set, then `ls` will only colorize by default</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># based on file attributes and ignore extensions (even the compiled</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># in defaults of dircolors). #583814</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -n <span style="color:#e6db74">${</span>LS_COLORS:+set<span style="color:#e6db74">}</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		use_color<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># Delete it if it&#39;s empty as it&#39;s useless in that case.</span>
</span></span><span style="display:flex;"><span>		unset LS_COLORS
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Some systems (e.g. BSD &amp; embedded) don&#39;t typically come with</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># dircolors so we need to hardcode some terminals in here.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>TERM<span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">[</span>aEkx<span style="color:#f92672">]</span>term* | rxvt* | gnome* | konsole* | screen | tmux | cons25 | *color<span style="color:#f92672">)</span> use_color<span style="color:#f92672">=</span>true ;;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">${</span>use_color<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">${</span>EUID<span style="color:#e6db74">}</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\[\033[01;31m\]\h\[\033[01;34m\] \w \$\[\033[00m\] &#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] &#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#BSD#@export CLICOLOR=1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	alias ls<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls --color=auto&#39;</span>
</span></span><span style="display:flex;"><span>	alias grep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;grep --colour=auto&#39;</span>
</span></span><span style="display:flex;"><span>	alias la<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -A&#39;</span>
</span></span><span style="display:flex;"><span>	alias ll<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -alF&#39;</span>
</span></span><span style="display:flex;"><span>	alias l<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -CF&#39;</span>
</span></span><span style="display:flex;"><span>	alias n<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;neofetch&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># show root@ when we don&#39;t have colors</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\u@\h \w \$ &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> sh in /etc/bash/bashrc.d/*; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">[[</span> -r <span style="color:#e6db74">${</span>sh<span style="color:#e6db74">}</span> <span style="color:#f92672">]]</span> <span style="color:#f92672">&amp;&amp;</span> source <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>sh<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Try to keep environment pollution down, EPA loves us.</span>
</span></span><span style="display:flex;"><span>u
</span></span></code></pre></div><p>主要添加了别名，其他的可以自己修改</p>
<p>还有一个镰刀锤子配置也蛮好看的，但使用<code>↑</code>键查看历史命令时有Bug,不介意的可以用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-.bashrc" data-lang=".bashrc"><span style="display:flex;"><span> PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\e[1;32m\w\n\e[1;33m☭ \[</span><span style="color:#66d9ef">$(</span>tput sgr0<span style="color:#66d9ef">)</span><span style="color:#e6db74">\]&#34;</span>
</span></span></code></pre></div><p>配置来源 <a href="https://www.zhihu.com/question/19803678/answer/1001803388">你怎么设置终端 PS1 prompt</a></p>
<h4 id="sddm美化">SDDM美化</h4>
<p>我们更换壁纸后一般连同SDDM的背景一起换了，但设置里的SDDM主题管理实在是难用，经常打不开更换界面，推荐直接到主题目录下更换</p>
<ol>
<li>
<p>cd到需要配置的SDDM主题目录<code>/usr/share/sddm/themes/</code></p>
</li>
<li>
<p>进入主题文件夹，你会看见之前设置的背景(若有的话)，和两个配置文件，分别是预设配置<code>theme.conf</code>和用户配置<code>theme.conf.user</code></p>
</li>
<li>
<p>编辑用户配置<code>theme.conf.user</code>，找到<code>background=100857791_p113767970.png</code>这一行，可以看到目前我的背景为<code>100857791_p113767970.png</code></p>
</li>
<li>
<p>将要设置的背景移入主题文件夹，将<code>background=</code>后的文件名改为要设置的文件名</p>
</li>
<li>
<p>重启即可</p>
</li>
</ol>
<h2 id="内核编译">内核编译</h2>
<p>Arch下的内核编译只需要安装两个包即可</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S bc inetutils
</span></span></code></pre></div><p># inetutils提供hostsname</p>
<p>到这里Arch的配置也基本完成了，我也可以睡个好觉了&hellip;</p>
<p>再插一嘴，uu们有好的图床或对象储存推荐吗，博客老没图片也不行，最好能便宜点</p>
<h2 id="参考引用">参考|引用</h2>
<ul>
<li>安装Hyprland的命令来源: <a href="https://blog.ticks.cc/posts/id/37hugsk/">https://blog.ticks.cc/posts/id/37hugsk/</a></li>
</ul>
<ul>
<li>
<p>桌面介绍: <a href="https://en.wikipedia.org/">https://en.wikipedia.org/</a></p>
<p>-&gt;  <a href="https://wiki.archlinuxcn.org/wiki/KDE">https://wiki.archlinuxcn.org/wiki/KDE</a></p>
</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/LazyVim/LazyVim?tab=readme-ov-file#%EF%B8%8F-requirements">https://github.com/LazyVim/LazyVim?tab=readme-ov-file#%EF%B8%8F-requirements</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Linux下的各种shell</title>
      <link>https://blog.sorgdream.com/posts/shell/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/shell/</guid>
      <description><![CDATA[<p>安装完linux要干什么？ 当然是美化一下终端啦</p>
<h2 id="fish">FIsh</h2>
<blockquote>
<p>fish is a smart and user-friendly command line shell for Linux, macOS, and the rest of the family.</p>
</blockquote>
<p>我接触到的第一个shell，自带语法高亮和自动补全这两项神器，如果你不嫌弃默认的主题的话，fish可以说是开箱即用</p>
<h3 id="安装">安装</h3>
<p>ubuntu环境下，使用<strong>apt</strong>命令进行安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install fish
</span></span></code></pre></div><p>安装完成后直接输入<code>fish</code>即可进入，默认会有一段欢迎语，如果不喜欢，可以用<code>fish -c &quot;set -U fish_greeting&quot;</code>来关闭</p>
<p>如果想要设置为默认的shell，则需使用<code>chsh -s $(which fish)</code>进行设置</p>
<h3 id="主题">主题</h3>
<p>安装完成后当然要再装一个主题<del>除非你喜欢默认</del></p>
<p>这里我们使用<a href="https://github.com/oh-my-fish/oh-my-fish/tree/master/docs/zh-CN">oh-my-fish</a>来安装主题</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -L github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish
</span></span><span style="display:flex;"><span>omf help
</span></span></code></pre></div><p>完成后输入omf，在fish下，如果命令是绿色的，那就是安装成功了，否则检查是否安装成功</p>
<p>输入omf theme即可查看能够安装的主题，以fox主题为例，下列是omf的使用方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>omf theme  <span style="color:#75715e">#列出主题</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf install fox <span style="color:#75715e">#安装fox主题</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf theme fox  <span style="color:#75715e">#更换fox主题</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf doctor  <span style="color:#75715e">#自检</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf destroy  <span style="color:#75715e">#卸载</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf update <span style="color:#75715e">#更新</span>
</span></span></code></pre></div><p>如需安装更多主题请看<a href="https://xiao_beita.gitee.io/009_fish_omf/">小贝塔</a>，里面把所有的主题样式都展示出来</p>
<h3 id="别名">别名</h3>
<p>fish自带了<code>la</code>也就是<code>ls -A</code>的别名，能更方便我们查看</p>
<h2 id="zsh">Zsh</h2>
<blockquote>
<p>Zsh is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added.</p>
</blockquote>
<p>zsh对于bash的兼容性要好很多，相对的，想要配置zsh对比fish也要难</p>
<h3 id="安装-1">安装</h3>
<p>同样，使用<strong>apt</strong>命令安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install zsh
</span></span></code></pre></div><p>不同的是，zsh安装下一次启动终端时会弹出配置界面，使用和数字键选择即可完成配置</p>
<h3 id="主题-1">主题</h3>
<p>因为omz会拖慢zsh的速度，所以我们不选用omz来配置</p>
<p>这里以p10k主题为例;需要注意的是，因为p10k使用一部分的emoji图标，所以要想完美的显示最好安装nerd字体</p>
<blockquote>
<p>不想安装或已经安装完成的小伙伴可以跳过这一步
依据github上的文档，下载这四个字体文件，并分别双击安装，然后在终端的首选项里选择nerd字体即可</p>
</blockquote>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a></p>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a></p>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf">MesloLGS NF 斜体.ttf</a></p>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></p>
<p>安装完字体就可以正式开始安装p10k主题</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> https://gitee.com/romkatv/powerlevel10k.git ~/powerlevel10k
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;source ~/powerlevel10k/powerlevel10k.zsh-theme&#39;</span> &gt;&gt;~/.zshrc
</span></span></code></pre></div><p>使用以上命令即可完成安装
使用<code>exec zsh</code>重新启动zsh，完成后即可看到p10k的配置界面，按照提示，完成配置即可</p>
<h3 id="插件">插件</h3>
<p>因为zsh默认没有语法高亮和自动补全，所以需要两个插件来实现</p>
<h4 id="语法高亮">语法高亮</h4>
<p>使用<a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>这个插件来实现高亮</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source </span><span style="color:#e6db74">${</span>(q-)PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&#34;</span> &gt;&gt; <span style="color:#e6db74">${</span>ZDOTDIR<span style="color:#66d9ef">:-</span>$HOME<span style="color:#e6db74">}</span>/.zshrc
</span></span></code></pre></div><p>使用以上两条命令安装插件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
</span></span></code></pre></div><p>开启插件</p>
<h4 id="自动补全">自动补全</h4>
<p>使用[zsh-autosuggestions](git clone <a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> ~/.zsh/zsh-autosuggestions
)这一个插件实现</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
</span></span></code></pre></div><p>可能有细心的小伙伴发现，对语法高亮，自动补全貌似少了一条命令，因为自动补全没有将插件<code>echo</code>到<code>.zshrc</code>配置文件中，会导致重启终端后不启动插件，需要手动执行source命令开启，而语法高亮因为<code>echo</code>到<code>.zshrc</code>中，所以会跟着zsh一同启动</p>
<p>我们可以手动添加一条命令到<code>.zshrc</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source </span><span style="color:#e6db74">${</span>(q-)PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh&#34;</span> &gt;&gt; <span style="color:#e6db74">${</span>ZDOTDIR<span style="color:#66d9ef">:-</span>$HOME<span style="color:#e6db74">}</span>/.zshrc
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#                  ~/ 插件文件夹 / 插件.zsh               &gt;&gt;&gt;写入到.zshrc                    </span>
</span></span></code></pre></div><p>修改完成后执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
</span></span></code></pre></div><p>多重启几次终端，查看是否开启自动补全，如果重启没有自动补全，则需要检查上面的<code>echo</code>命令的路径是否是你插件的位置</p>
<h3 id="别名-1">别名</h3>
<p>zsh默认是没有带任何别名的，我们要去<code>.zshrc</code>中自行配置，zsh的配置文件在<code>/home/username/.zshrc</code></p>
<pre tabindex="0"><code>alias la=&#39;ls -A&#39;
alias ll=&#39;ls -alF&#39;
alias l=&#39;ls -CF&#39;
</code></pre><p>即可设置别名，也可以仿照上面的格式自定义</p>
<h2 id="bash">Bash</h2>
<blockquote>
<p>This is an sh-compatible shell that incorporates useful features from the Korn shell (ksh) and the C shell (csh)</p>
</blockquote>
<p>这是debian和众多发行版默认的shell，<del>也是作者正在用的shell</del> 用回zsh了，p10k真香</p>
<p>因为zsh和fish对bash的不兼容，使我在打包AnyKernel3的时候需要手动添加一行命令到.zshrc，以我的性格肯定不能忍，于是我就想有没有一种既对bash兼容性好，又方便易用的解决方案</p>
<h3 id="语法">语法</h3>
<p>因为脚本大多用的解释器都是bash,所以学习了下bash的语法</p>
<ul>
<li>脚本解释器</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span></code></pre></div><ul>
<li>变量</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>a<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> 
</span></span><span style="display:flex;"><span>b<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> 
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span><span style="color:#66d9ef">$((</span>$a<span style="color:#f92672">+</span>$b<span style="color:#66d9ef">))</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo $c
</span></span></code></pre></div><p>输出结果为3</p>
<ul>
<li>环境变量
使用<strong>export</strong>命令</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ABC<span style="color:#f92672">=</span>/usr/local/abc <span style="color:#75715e">#重启终端后失效</span>
</span></span></code></pre></div><ul>
<li>逻辑运算
<code>&amp;&amp;</code>与运算，需要同时为True</li>
</ul>
<p><code>||</code>或运算，其中一个为True</p>
<ul>
<li>if语句</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> 条件 <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        command
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fi</span> <span style="color:#75715e">#以fi结尾</span>
</span></span></code></pre></div><ul>
<li>for语句</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> arg in <span style="color:#f92672">[</span>list<span style="color:#f92672">]</span>;<span style="color:#66d9ef">do</span> 
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>不要忘了do前的;</p>
<ul>
<li>while语句</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#f92672">[</span> condition <span style="color:#f92672">]</span>;<span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>until循环</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">until</span> condition;<span style="color:#66d9ef">do</span> <span style="color:#75715e"># 条件为false则进入循环</span>
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>函数</li>
</ul>
<p>使用<code>function</code>定义一个函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> func_name<span style="color:#f92672">(){</span> 
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">[</span><span style="color:#66d9ef">return</span> value<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>可直接使用函数名调用函数，例如</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> helloworld<span style="color:#f92672">(){</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Hello World&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helloworld
</span></span></code></pre></div><p>将在屏幕输出<code>HelloWorld</code></p>
<ul>
<li>sed命令</li>
</ul>
<p>作用是找到并替换文本，如</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sed -i <span style="color:#e6db74">&#34;s/world/hugo/g&#34;</span> helloworld.sh <span style="color:#75715e">#将helloworld.sh中的world全部替换成hugo  </span>
</span></span></code></pre></div><h3 id="starship">Starship</h3>
<ol>
<li>这是一个以兼容性优先，使用Rust编写，高度自定义的命令的提示符</li>
<li>它可以用于各种shell，包括常见的Bash/zsh/fish等，所以基本不存在兼容性问题，又能得到美丽的终端</li>
<li><del>自带自动补全和语法高亮</del> 需要shell支持，开箱即用，安装简单，对小白极其友好</li>
</ol>
<h3 id="安装-2">安装</h3>
<p>starship的安装十分简单，只需要执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -sS https://starship.rs/install.sh | sh
</span></span></code></pre></div><p>即可完成安装，之后你需要在<code>.bashrc</code>里开启starship
<!-- raw HTML omitted -->在.bashrc的最后，添加以下内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>starship init bash<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>重启终端，即可看到starship的默认样式</p>
<h3 id="进阶">进阶</h3>
<p>如果不满意默认的主题，可以使用以下命令创建配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mkdir -p ~/.config <span style="color:#f92672">&amp;&amp;</span> touch ~/.config/starship.toml
</span></span></code></pre></div><p>修改配置请看 <a href="https://starship.rs/config/">https://starship.rs/config/</a> 预设里还能找到别人的主题配置</p>
<h3 id="ps1">PS1</h3>
<p>在用了一段时间的starship后，可能会有小伙伴发现，打开多文件的文件夹会比较卡顿，路径有时会折叠</p>
<p>于是我果断卸载，改用最简单粗暴的方式，直接修改<code>PS1</code>变量
<!-- raw HTML omitted -->PS1的含义太多了，这里就不全列出来</p>
<table>
<thead>
<tr>
<th>\u</th>
<th>用户名</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\w</td>
<td>绝对路径</td>
</tr>
<tr>
<td>\W</td>
<td>路径的最后一个文件夹</td>
</tr>
<tr>
<td>\t</td>
<td>24小时制时间</td>
</tr>
<tr>
<td>\T</td>
<td>12小时制</td>
</tr>
<tr>
<td>$</td>
<td>root用户为#,普通$</td>
</tr>
<tr>
<td>\h</td>
<td>主题名</td>
</tr>
<tr>
<td>\d</td>
<td>日期</td>
</tr>
</tbody>
</table>
<p>你也可以设置颜色</p>
<table>
<thead>
<tr>
<th>30m</th>
<th>黑色</th>
</tr>
</thead>
<tbody>
<tr>
<td>31m</td>
<td>红色</td>
</tr>
<tr>
<td>32m</td>
<td>绿色</td>
</tr>
<tr>
<td>33m</td>
<td>黄色</td>
</tr>
<tr>
<td>34m</td>
<td>蓝色</td>
</tr>
</tbody>
</table>
<p>更多变量和颜色请看</p>
<p><a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/html_node/Controlling-the-Prompt.html">官方文档</a></p>
<p><a href="https://blog.csdn.net/qq_33958966/article/details/106080204">CSDN</a></p>
<p>除此之外，还可以使用一些其他的符号和文字美化，例如 &gt; /~/abc/./+等都可以，也可以使用表情</p>
<p>我现在用的是CSDN里找的<a href="https://blog.csdn.net/u011145574/article/details/105160496">ParrotOS风格</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033[0;31m\]\342\224\214\342\224\200$([[ $? != 0 ]] &amp;&amp; echo &#34;[\[\033[0;31m\]\342\234\227\[\033[0;37m\]]\342\224\200&#34;)[\[\033[0;39m\]\u\[\033[01;33m\]@\[\033[01;96m\]\h\[\033[0;31m\]]\342\224\200[\[\033[0;32m\]\w\[\033[0;31m\]]\n\[\033[0;31m\]\342\224\224\342\224\200\342\224\200\342\225\274 \[\033[0m\]\[\e[01;33m\]\$ \[\e[0m\]&#39;</span>
</span></span></code></pre></div><blockquote>
<p>ps1来自csdn@Jiuh-star，侵联删</p>
</blockquote>
<p>因为<code>$</code>和命令贴的太近，于是在 $和&quot;[\e[0m]]&ldquo;中间加了一个空格</p>
<h2 id="参考">参考</h2>
<p><a href="https://zhuanlan.zhihu.com/p/452686607">一文掌握shell脚本的基本语法</a></p>]]></description>
      
    </item>
    
    
  </channel>
</rss>
