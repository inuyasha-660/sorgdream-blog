<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>nginx on sorgDream&#39;s Blog</title>
    <link>https://blog.sorgdream.com/tags/nginx/</link>
    <description>Recent content in nginx on sorgDream&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>sorgDream - [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</copyright>
    <lastBuildDate>Fri, 17 Nov 2023 18:48:10 +0800</lastBuildDate><atom:link href="https://blog.sorgdream.com/tags/nginx/index.xml" rel="self" type="application/rss+xml" /><icon>https://blog.sorgdream.com/avatar.jpg</icon>
    
    
    <item>
      <title>将你的博客部署到雨云</title>
      <link>https://blog.sorgdream.com/posts/winter/</link>
      <pubDate>Fri, 17 Nov 2023 18:48:10 +0800</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/winter/</guid>
      <description><![CDATA[<h2 id="近况">近况</h2>
<p>期中考刚考完，我也难得有时间静下心来写博客，虽然文笔不太好就是了</p>
<p>这个星期，广州跳过了秋天，直接来到了冬天，也可以说广州根本就没有春天和秋天</p>
<p>看了<a href="https://arch-linux.osrc.com/">archlinux 简明指南</a>的教程，在虚拟机试了一次后为我的物理机安装上了Arch,不得不说，aur是真的好使，很多包都能在上面找到</p>
<p>每日一滚</p>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo pacman -Syu
</code></pre><p>最近半价买了一个月雨云的云服务器，学了下Nginx，把我的博客迁移到了上面</p>
<h2 id="nginx">Nginx</h2>
<p>原本想再水一篇，但想着也没什么好写的，就合并在一起</p>
<p>在你喜欢的目录创建用于存放博客的文件夹，将博客仓库<strong>git</strong>下来</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name test.inuya.ltd;
    root /home/blog;
    location / {
    }
}
</code></pre><p>跟之前一样，在服务器<code>/etc/nginx/conf.d</code>目录下创建<code>test.inuya.ltd.conf</code>配置文件，写入以上内容，这里我用二级域名<code>test.inuya.ltd</code>演示</p>
<p>在域名提供商添加<code>A类型</code>解析，填入你的IP，使用<code>http://test.inuya.ltd</code>即可访问博客</p>
<h2 id="https">https</h2>
<p>配置完，会有一个问题，就是无法通过https访问，现在很多博客的友联已经不再添加没有https的博客了</p>
<h3 id="ssl证书">ssl证书</h3>
<p><del>阿里云现有免费的一年ssl证书可以申请</del></p>
<p>阿里云证书现只有三个月有效期，遂更换cerbot自动续费</p>
<ol>
<li>在你的debian或基于debian的发行版上安装snap</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo apt install snapd
</code></pre><ol start="2">
<li>安装cerbot snap包</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo snap install --classic certbot
</code></pre><ol start="3">
<li>准备 Certbot 命令</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo ln -s /snap 
</code></pre><ol start="4">
<li>获取证书，这里选择手动配置</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo certbot certonly --nginx
</code></pre><ol start="5">
<li>测试下自动续费</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo certbot renew --dry-run
</code></pre><p>证书应位于<code>/etc/letsencrypt/live</code>在Nginx中填入即可</p>
<p>其他发行版也可参考<a href="https://certbot.eff.org/instructions?">certbot instructions</a>，选择对应的发行版即可</p>
<h3 id="配置">配置</h3>
<p>在原本的<code>test.inuya.ltd.conf</code>的配置中添加以下内容</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 443 ssl;
    #配置HTTPS监听端口443。
    server_name test.inuya.ltd; #将test.inuya.ltd换成证书绑定的域名
    root html;
    index index.html index.htm;
    ssl_certificate cert/test.inuya.ltd.pem;  #将test.inuya.ltd.pem换成自己的证书
    ssl_certificate_key cert/test.inuya.ltd.key; #将test.inuya.ltd换成自己的证书密钥
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    #表示使用的加密套件的类型。
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #表示使用的TLS协议的类型。
    ssl_prefer_server_ciphers on;
    location / {
        root /home/blog;  #站点目录。
        index index.html index.htm;
    }
}
</code></pre><p>使用<code>systemctl restart nginx</code>重启Nginx，尝试带https访问网址</p>
<h3 id="重定向">重定向</h3>
<p>如果想让所有的http访问都301重定向到https,可以在80端口的配置中添加一句<code>return 301 https://$server_name$request_uri;</code></p>
<p>就像这样</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name test.inuya.ltd;
    return 301 https://$server_name$request_uri;
    root /home/blog;
    location / {
    }
}
</code></pre><h2 id="主页">主页</h2>
<p>域名只解析博客太浪费了，于是搭建了我的主页</p>
<p>修改自<a href="https://github.com/noisky/Homepage">饭饭&rsquo;s Homepage 2.0</a></p>
<p>主页: <a href="https://inuya.ltd">https://inuya.ltd</a></p>
<h2 id="twikoo评论">Twikoo评论</h2>
<p>都有服务器了，还用什么valine,早就听闻twikoo配置方便，今天一用，相见恨晚</p>
<p>我是用的是docker部署，docker run时加上<code>--restart=always</code>设置自启</p>
<p>部署完后访问<code>http://&lt;ip&gt;:8080</code>，返回值如下</p>
<pre tabindex="0"><code>&#34;Twikoo 云函数运行正常，请参考 https://twikoo.js.org/frontend.html 完成前端的配置&#34;
</code></pre><h2 id="nginx反向代理">Nginx反向代理</h2>
<p>因该是这么叫吧</p>
<p>部署到服务器后，发现评论系统被拦截了，因为博客是https，但评论只有http,所以被拦截</p>
<p>到域名服务商新建一条<code>A记录</code>解析，填入你的IP</p>
<p>在<code>/etc/nginx/conf.d</code>新建配置文件</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name twikoo.inuya.ltd; # 设置的域名
    return 301 https://$server_name$request_uri; # 重定向至HTTPS
    location / {
    }
}
 
server {
    listen 443 ssl;
    server_name twikoo.inuya.ltd;
    ssl_certificate cert/twikoo.inuya.ltd.pem;  # 配置证书
    ssl_certificate_key cert/twikoo.inuya.ltd.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    # 表示使用的加密套件的类型。
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 表示使用的TLS协议的类型。
    ssl_prefer_server_ciphers on;
    location / {
        proxy_pass  http://localhost:8080; # 反向代理至8080端口
    }
}
</code></pre><p><code>systemctl restart nginx</code>重启Nginx，尝试使用域名访问</p>
<h2 id="cdn">CDN</h2>
<p>最近博客莫名延迟变高，甚至到了无法访问的地步，于是想着给博客套个CDN加速一下;正好雨云有免费的CDN可用</p>
<p>在雨云创建一个新的CDN,如购买了雨云的产品(云服务器/虚拟主机)可以免费使用。</p>
<p>创建完后复制生成的网址到域名注册商添加<code>CNAME</code>，这里为了方便直接使用<code>*.inuya.ltd</code>泛解析</p>
<h2 id="题外话">题外话</h2>
<p>博客第一次有人主动申请友链，还是蛮激动的</p>
<p>如果有急事可以用<code>inuya@foxmail.com</code>联系我，因为是腾讯的邮箱所以可以微信提醒，回复的比较及时</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://blog.csdn.net/qq_37960603/article/details/112371339">Nginx：Nginx添加SSL实现HTTPS访问</a></li>
<li><a href="https://blog.csdn.net/HD243608836/article/details/112861186">nginx开启ssl并把http重定向到https的两种方式</a></li>
<li><a href="https://blog.csdn.net/weixin_38312502/article/details/101780412">nuxt.js项目部署到linux服务器，并使用域名访问</a></li>
<li><a href="https://www.luxiyue.com/server/%e4%b8%aa%e4%ba%ba%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%8a%e9%83%a8%e7%bd%b2%e5%8d%9a%e5%ae%a2%e8%af%84%e8%ae%ba%e7%b3%bb%e7%bb%9f%ef%bc%9atwikoo/">个人服务器上部署博客评论系统：Twikoo</a></li>
<li><a href="https://blog.csdn.net/Hu_wen/article/details/110521804">Docker 容器设置自启动</a></li>
<li><a href="https://twikoo.js.org/">Twikoo文档</a></li>
<li><a href="https://certbot.eff.org/instructions?ws=nginx&amp;os=debianbuster">Certbot 说明</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>博客迁移至hugo</title>
      <link>https://blog.sorgdream.com/posts/hugo/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/hugo/</guid>
      <description><![CDATA[<p>前几天，因为一个主题，我把博客从hexo换成hugo，也就是现在看到的</p>
<h2 id="迁移">迁移</h2>
<p>hugo的操作比hexo要难，热门程度也不及hexo，所以遇到一些问题需要自己解决</p>
<h3 id="安装">安装</h3>
<ol>
<li>用<code>sudo apt install git</code>安装git</li>
<li>到<a href="https://go.dev/dl/">All releases</a>找到Linux下载go</li>
<li>用以下命令提取下载的archive</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz
</code></pre><ol start="4">
<li>编辑<code>/etc/profile</code>(系统范围安装)，添加环境变量</li>
</ol>
<pre tabindex="0"><code>export PATH=$PATH:/usr/local/go/bin
</code></pre><p>完成后使用<code>source /etc/profile</code>即可完成安装</p>
<ol start="5">
<li>
<p>使用<code>sudo apt install snapd</code>安装snap</p>
</li>
<li>
<p>使用<code>sudo snap install dart-sass</code>安装dart-sass</p>
</li>
<li>
<p>使用<code>sudo snap install hugo</code>安装hugo</p>
</li>
</ol>
<h3 id="建站">建站</h3>
<p>三连快速创建</p>
<pre tabindex="0"><code class="language-command" data-lang="command">hugo new site &lt;sitename&gt;
cd &lt;sitename&gt;
git init
</code></pre><p>这时候可以下载你喜欢的主题了，编辑<code>hugo.toml</code>，添加<code>theme = &quot;themename&quot;</code>指定主题</p>
<h3 id="基础">基础</h3>
<p>基础的指令和hexo差不多，不过原本的source变成了content，使用<code>hexo server</code>即可
<!-- raw HTML omitted -->如果提示<code>由于本地 development 环境的限制， 评论系统 , CDN 和 fingerprint 不会在 development 环境下启用。</code>，使用<code>hugo server -e production</code>更改环境即可</p>
<p>文章直接复制过来就能用，不过tags和categories的书写方式有点不同</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>tags: 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> tags1
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> tegs2
</span></span><span style="display:flex;"><span>categories:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> catrgories1
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> categories2
</span></span></code></pre></div><h2 id="部署">部署</h2>
<p>hexo的部署很简单，<code>hexo g</code>生成页面<code>hexo d</code>部署，同样需要ssh key，而hugo需要手动push到repo</p>
<pre tabindex="0"><code class="language-command" data-lang="command">hugo # 生成页面
cd public
git init # 初始化仓库
git remote add origin &lt;repo link&gt;
git add .
git commit -m &#34;提交说明&#34;
git push -u origin master
</code></pre><p>这是访问域名，不出意外应该能看到你的博客</p>
<h2 id="命令">命令</h2>
<p>更新主题(FixIt)</p>
<pre tabindex="0"><code class="language-command" data-lang="command">git submodule update --remote --merge
</code></pre><h2 id="阿里云服务器">阿里云服务器</h2>
<p>因为依然部署在Github Page，所以访问还是有点慢，于是我打开阿里云，想看看有什么便宜的服务器，突然看到免费试用三个月，这种好事怎么能错过</p>
<h3 id="配置">配置</h3>
<ul>
<li>2核2GB或者2核4GB</li>
<li>每月280元额度，3个月试用时长</li>
</ul>
<p>这配置搭建博客可谓是绰绰有余</p>
<h2 id="主页导航页">主页(导航页)</h2>
<p>域名目前只解析了博客，闲着也是闲着，不如建一个导航页</p>
<h3 id="搭建">搭建</h3>
<p>使用了<a href="https://github.com/kaygb/KZHomePage">KZHomePage</a>的主页，稍微配置下还是很好看的</p>
<ol>
<li>将仓库git到你的服务器</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">git clone https://github.com/kaygb/KZHomePage.git
</code></pre><ol start="2">
<li>在喜欢的地方新建一个用于存放主页的文件夹</li>
<li>使用<code>sudo apt install nginx</code>安装Nginx</li>
<li>使用<code>sudo systemctl enable nginx</code>设置开机自启</li>
<li>启动Nginx<code>sudo systemctl start nginx</code></li>
<li><code>sudo systemctl status nginx</code>查看Ngxin状态</li>
</ol>
<p>访问域名/IP，若出现<code>Welcome to Nginx</code>即为成功</p>
<h3 id="配置nginx">配置Nginx</h3>
<p>编写配置文件<code>sudo nvim /etc/nginx/conf.d/yoursite.com.conf</code></p>
<p>写入以下配置</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name yoursite.com;
    root path-to-blog-name;
    location / {
    }
}
</code></pre><p><code>80</code>为监听端口，<code>yoursite.com</code>为你的域名，<code>path-to-blog-name</code>为存放主页文件夹的位置</p>
<p>完成后使用<code>sudo systemctl restart nginx</code>重启Ngixn服务，访问域名查看是否生效</p>
<p>之后就简单多了，修改<code>index.html</code>，可以看作者写的<a href="https://www.kezez.com/archives/25.html">教程</a>无需重新启动，刷新即可</p>
<h3 id="博客">博客</h3>
<p>博客和主页差不多，将Github上的仓库git clone下载，再创建一个文件夹用于存放，一个配置文件，端口改成你想要的，别太离谱即可</p>
<p>完成后设置域名解析，直接解析到你的IP，博客可以添加隐性url转发到你的域名+端口</p>
<h2 id="总结">总结</h2>
<p>因为没有备案，所以只能通过IP访问网站，不得不说，阿里云的服务器是真的贵，终于明白未成年不能备案的原因了</p>
<h2 id="参考">参考</h2>
<ul>
<li>
<p><a href="https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#33-%E6%9C%8D%E5%8A%A1%E5%99%A8">基于hugo搭建博客并部署</a></p>
</li>
<li>
<p><a href="http://www.sulvblog.cn/posts/blog/hugo_deploy/">hugo博客部署到腾讯云轻量级服务器</a></p>
</li>
<li>
<p><a href="https://gohugo.io/">HUGO</a></p>
</li>
</ul>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
