<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Kernel on sorgDream&#39;s Blog</title>
    <link>https://blog.sorgdream.com/tags/kernel/</link>
    <description>Recent content in Kernel on sorgDream&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>sorgDream - [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</copyright>
    <lastBuildDate>Sun, 14 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.sorgdream.com/tags/kernel/index.xml" rel="self" type="application/rss+xml" /><icon>https://blog.sorgdream.com/avatar.jpg</icon>
    
    
    <item>
      <title>Arch下的Kde配置</title>
      <link>https://blog.sorgdream.com/posts/arch-kde/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/arch-kde/</guid>
      <description><![CDATA[<p>2024年的第一篇文章，祝大家新年快乐(虽然有点迟了)</p>
<p>这段时间重装了6次Arch，1次Debian Testing，几乎将主流桌面体验完了，血与泪的教训，wayland目前还不成熟，高分屏还得老老实实用x11</p>
<h2 id="起因">起因</h2>
<p>逛B站时偶然看到了有人发<a href="https://www.bilibili.com/read/cv22707313/">Hyprland的配置</a>，再看我的Kde瞬间就不香了</p>
<p>拿出我珍藏多年的Arch Live CD ，F12选择U盘启动，在经过一系列分区，生成fstab，引导后，成功来到了熟悉的tty界面，接下来照着B站的教程，开始安装Hyprland</p>
<h2 id="hyprland">Hyprland</h2>
<blockquote>
<p>Hyprland is a highly customizable dynamic tiling Wayland compositor that doesn&rsquo;t sacrifice on its looks.</p>
</blockquote>
<blockquote>
<p>Hyprland 是一款高度可定制的动态平铺 Wayland 合成器，不会牺牲其外观。</p>
</blockquote>
<h3 id="安装">安装</h3>
<ol>
<li>首先安装Wayland</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pacman -S xorg-xwayland qt5-wayland qt6-wayland glfw-wayland
</span></span></code></pre></div><ol start="2">
<li>安装Hyprland</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>paru -S hyprland-bin
</span></span></code></pre></div><ol start="3">
<li>复制配置文件</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir -pv ~/.config/hypr
</span></span><span style="display:flex;"><span>sudo cp /usr/share/hyprland/hyprland.conf ~/.config/hypr/
</span></span></code></pre></div><ol start="4">
<li>Hyprland启动</li>
</ol>
<p>通过编辑<code>~/.bash_profile</code>启动(不使用显示管理器)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 启动 wayland 桌面前设置一些环境变量</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> set_wayland_env
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 设置语言环境为中文</span>
</span></span><span style="display:flex;"><span>	export LANG<span style="color:#f92672">=</span>zh_CN.UTF-8
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 解决QT程序缩放问题</span>
</span></span><span style="display:flex;"><span>	export QT_AUTO_SCREEN_SCALE_FACTOR<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># QT使用wayland和gtk</span>
</span></span><span style="display:flex;"><span>	export QT_QPA_PLATFORM<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wayland;xcb&#34;</span>
</span></span><span style="display:flex;"><span>	export QT_WAYLAND_DISABLE_WINDOWDECORATION<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 使用qt5ct软件配置QT程序外观</span>
</span></span><span style="display:flex;"><span>	export QT_QPA_PLATFORMTHEME<span style="color:#f92672">=</span>qt5ct
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 一些游戏使用wayland</span>
</span></span><span style="display:flex;"><span>	export SDL_VIDEODRIVER<span style="color:#f92672">=</span>wayland
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 解决java程序启动黑屏错误</span>
</span></span><span style="display:flex;"><span>	export _JAVA_AWT_WM_NONEREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># GTK后端为 wayland和x11,优先wayland</span>
</span></span><span style="display:flex;"><span>	export GDK_BACKEND<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wayland,x11&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 命令行输入这个命令启动hyprland,可以自定义</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> start_hyprland
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	set_wayland_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	export XDG_SESSION_TYPE<span style="color:#f92672">=</span>wayland
</span></span><span style="display:flex;"><span>	export XDG_SESSION_DESKTOP<span style="color:#f92672">=</span>Hyprland
</span></span><span style="display:flex;"><span>	export XDG_CURRENT_DESKTOP<span style="color:#f92672">=</span>Hyprland
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 启动 Hyprland程序</span>
</span></span><span style="display:flex;"><span>	exec Hyprland
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>重启或直接<code>source ~/.bash_profile</code>使配置生效，输入<code>start_hyprland</code>启动</p>
<h3 id="应用安装">应用安装</h3>
<p>刚进入桌面，你会发现什么也没有，先装个终端和中文字体</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S kitty wqy-zenhei
</span></span></code></pre></div><p>使用快捷键<code>Super+Q</code>即可启动(Super键默认为WIN)</p>
<p>貌似一切都很完美，让我们装个QQ试逝</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>paru -S linuxqq
</span></span></code></pre></div><p>打开后你会发现字体变得很模糊，不止qq,其他程序在wayland缩放下的显示都不太好</p>
<h2 id="gnome">Gnome</h2>
<blockquote>
<p>GNOME originally an acronym for GNU Network Object Model Environment,is a free and open-source desktop environment for Linux and other Unix-like operating systems.</p>
</blockquote>
<blockquote>
<p>GNOME是一个完全由自由软件组成的桌面环境。它的目标操作系统是Linux，但是大部分的BSD系统亦支持GNOME。</p>
</blockquote>
<p>因为Hyprland的字体问题，我回到了一开始用的gnome;但因为使用wayland的原因，qq下的字体还是模糊，而且缩放有问题，200%会使字体和窗口过大，100%字又太小</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsettings set org.gnome.mutter experimental-features <span style="color:#e6db74">&#34;[&#39;scale-monitor-framebuffer&#39;]&#34;</span>
</span></span></code></pre></div><p>使用此命令开启分数缩放</p>
<p>缩放是解决了，但字体的问题依旧，目前没找到完美的解决方案，只能用<code>Tweaks</code>工具调整字体大小</p>
<h2 id="cinnamon">Cinnamon</h2>
<blockquote>
<p>Cinnamon, forked from GNOME Shell, is the &ldquo;shell&rdquo; of Cinnamon. It provides the user interface such as panels, hot corners, menus etc. The ui is written in JavaScript, while its core libraries are written in C.</p>
</blockquote>
<blockquote>
<p>Cinnamon是类Unix系统下的一个桌面环境。最初是GNOME Shell的一个派生版本，由Linux Mint开发，提供了相似于GNOME 2，易于使用的传统用户界面，从Cinnamon 2.0开始，成为独立的桌面环境。</p>
</blockquote>
<p>一个由Mint开发的桌面，也是Linux Mint的默认桌面</p>
<p>Cinnamon不同于前两个，使用的是x11，所以基本没有字体和缩放问题，而且桌面和发生版都很适合新手，Debian系的包也比较多</p>
<p>但我不是很喜欢Cinnamon的设计，所以没有使用它</p>
<h2 id="kde-plasma">KDE Plasma</h2>
<blockquote>
<p>Plasma is a graphical shell developed by KDE for Unix-like operating systems. Plasma is a standard desktop interface.</p>
</blockquote>
<blockquote>
<p>KDE 是一套由 Plasma 桌面环境、一系列的库、框架（KDE Frameworks）和一些应用组成的软件项目。</p>
</blockquote>
<p>目前在用的桌面，自定义程度很高，记录下配置过程</p>
<h3 id="汉化不完全">汉化不完全</h3>
<p>表现为设置/文件管理器一半中文一半英文</p>
<p>编辑<code>~/.config/plasma-localerc</code>将<code>LANG=h_CN</code>改为<code>LANG=zh_CN.UTF-8</code>，重启后即可解决</p>
<h3 id="系统代理">系统代理</h3>
<ol>
<li>
<p>手机代理设置-允许来自局域网连接，记录端口;在设置-网络设置-代理服务器中选择-使用手动指定的的代理服务器配置</p>
</li>
<li>
<p>手机任意终端<code>su</code>后使用<code>ifconfig</code>获取本机IP,填入代理设置</p>
</li>
<li>
<p>终端走代理</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export https_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 http_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 all_proxy<span style="color:#f92672">=</span>socks5://127.0.0.1:7891
</span></span></code></pre></div><p><code>7890</code>/<code>7891</code>为端口号，<code>127.0.0.1</code>为IP</p>
<h3 id="常用应用">常用应用</h3>
<h4 id="1-neovim">1. neovim</h4>
<p>使用<a href="https://github.com/ayamir/nvimdots">nvimdots</a>配置，另一选择<a href="https://github.com/NvChad/NvChad">NcChad</a></p>
<blockquote>
<p>LazyVim is a Neovim setup powered by 💤 lazy.nvim to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.</p>
</blockquote>
<h5 id="11-安装">1.1 安装</h5>
<ol>
<li>1.1.1 <strong>依赖</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ol>
<ul>
<li>Neovim &gt;= 0.9.0 (needs to be built with LuaJIT)</li>
<li>Git &gt;= 2.19.0 (for partial clones support)</li>
<li>a Nerd Font (optional)</li>
<li>a C compiler for nvim-treesitter. See here</li>
</ul>
<ol start="2">
<li>1.1.2 安装</li>
</ol>
<p>克隆配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/LazyVim/starter ~/.config/nvim
</span></span></code></pre></div><p>nvim启动!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nvim
</span></span></code></pre></div><h5 id="12-nvim下的复制粘贴">1.2 nvim下的复制粘贴</h5>
<p><code>sudo pacman -S xclip</code>安装xclip后，使用<code>v</code>选中要复制的内容，<code>y</code>复制，<code>p</code>粘贴，<code>d</code>剪切</p>
<h4 id="2-neofetch">2. neofetch</h4>
<p>相信用过Linux的都听说过这个软件，它能显示系统Ascii art和硬件信息，可以通过修改<code>~/.config/neofetch/config.conf</code>进行配置</p>
<p>参考<a href="https://github.com/Kicamon/dotfile/blob/main/neofetch/config.conf">Kicamon</a>的配置，进行了一些修改，用<code>-</code>代替图标</p>
<h4 id="3-网易云音乐">3. 网易云音乐</h4>
<p>写文章时没点音乐怎么行，目前Arch下我认为比较好的解决方法一是<a href="https://github.com/qier222/YesPlayMusic">yesplaymusic</a>，第二个就是<a href="https://github.com/go-musicfox/go-musicfox">go-musicfox</a></p>
<p>不过yesplaymusic尝试过三种登陆方式均无法登陆，遂只能使用go-musicfox</p>
<blockquote>
<p>go-musicfox是用Go写的又一款网易云音乐命令行客户端，支持UnblockNeteaseMusic、各种音质级别、lastfm、MPRIS、MacOS交互响应（睡眠暂停、蓝牙耳机连接断开响应、菜单栏控制等）&hellip;</p>
</blockquote>
<ol>
<li>使用<code>pacman -S go-musicfox</code>安装go-musicfox</li>
<li>输入<code>musicfox</code>进入tui</li>
<li>点击-<code>我的歌单</code>进行登陆</li>
</ol>
<h5 id="31-无法播放">3.1 无法播放</h5>
<p>如果你很幸运，能直接播放，可以忽略这一步</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S pulseaudio-alsa libavtp
</span></span></code></pre></div><p>安装缺少的两个包就可以播放了</p>
<h5 id="32-快捷键">3.2 快捷键</h5>
<table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>←</code>  <code>h</code></td>
<td>左方向</td>
</tr>
<tr>
<td><code>→</code> <code>l</code></td>
<td>右方向</td>
</tr>
<tr>
<td><code>↑</code> <code>k</code></td>
<td>上方向</td>
</tr>
<tr>
<td><code>↓</code> <code>j</code></td>
<td>下方向</td>
</tr>
<tr>
<td><code>-</code> <code>滚轮下</code></td>
<td>减小音量</td>
</tr>
<tr>
<td><code>=</code> <code>滚轮上</code></td>
<td>增大音量</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出</td>
</tr>
<tr>
<td><code>Space</code> (空格)</td>
<td>暂停/播放</td>
</tr>
</tbody>
</table>
<p>更多快捷键请看<a href="https://github.com/go-musicfox/go-musicfox">README</a></p>
<h3 id="bash">Bash</h3>
<p>这次安装我离开了Zsh，重新回到了Bash的怀抱，但默认的Prompt太丑了，只显示最后一级路径，于是<del>抄</del>参考<a href="https://gitweb.gentoo.org/repo/gentoo.git/tree/app-shells/bash/files/bashrc/">Gentoo</a>的<code>.bashrc</code>，重新配置了下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-.bashrc" data-lang=".bashrc"><span style="display:flex;"><span><span style="color:#75715e"># /etc/bash/bashrc</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This file is sourced by all *interactive* bash shells on startup,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># including some apparently interactive shells such as scp and rcp</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># that can&#39;t tolerate any output.  So make sure this doesn&#39;t display</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># anything or bad things will happen!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Test for an interactive shell.  There is no need to set anything</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># past this point for scp and rcp, and it&#39;s important to refrain from</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># outputting anything in those cases.</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $- !<span style="color:#f92672">=</span> *i* <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Shell is non-interactive.  Be done now!</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Bash won&#39;t get SIGWINCH if another process is in the foreground.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable checkwinsize so that bash will check the terminal size when</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># it regains control.  #65623</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)</span>
</span></span><span style="display:flex;"><span>shopt -s checkwinsize
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable completion when the input buffer is empty.  i.e. Hitting tab</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and waiting a long time for bash to expand all of $PATH.</span>
</span></span><span style="display:flex;"><span>shopt -s no_empty_cmd_completion
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable history appending instead of overwriting when exiting.  #139609</span>
</span></span><span style="display:flex;"><span>shopt -s histappend
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Save each command to the history file as it&#39;s executed.  #517342</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This does mean sessions get interleaved when reading later on, but this</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># way the history is always up to date.  History is not synced across live</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sessions though; that is what `history -n` does.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disabled by default due to concerns related to system recovery when $HOME</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># is under duress, or lives somewhere flaky (like NFS).  Constantly syncing</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the history will halt the shell prompt until it&#39;s finished.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#PROMPT_COMMAND=&#39;history -a&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change the window title of X terminals</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>TERM<span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>aEkx<span style="color:#f92672">]</span>term* | rxvt* | gnome* | konsole* | interix | tmux*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033]0;\u@\h:\w\007\]&#39;</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>screen*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033_\u@\h:\w\033\\\]&#39;</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	unset PS1
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set colorful PS1 only on colorful terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dircolors --print-database uses its own built-in database</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># instead of using /etc/DIR_COLORS.  Try to use the external file</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># first to take advantage of user additions.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We run dircolors directly due to its changes in file syntax and</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># terminal name patching.</span>
</span></span><span style="display:flex;"><span>use_color<span style="color:#f92672">=</span>false
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> type -P dircolors &gt;/dev/null; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Enable colors for ls, etc.  Prefer ~/.dir_colors #64489</span>
</span></span><span style="display:flex;"><span>	LS_COLORS<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -f ~/.dir_colors <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b ~/.dir_colors<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[[</span> -f /etc/DIR_COLORS <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b /etc/DIR_COLORS<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Note: We always evaluate the LS_COLORS setting even when it&#39;s the</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># default.  If it isn&#39;t set, then `ls` will only colorize by default</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># based on file attributes and ignore extensions (even the compiled</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># in defaults of dircolors). #583814</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -n <span style="color:#e6db74">${</span>LS_COLORS:+set<span style="color:#e6db74">}</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		use_color<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># Delete it if it&#39;s empty as it&#39;s useless in that case.</span>
</span></span><span style="display:flex;"><span>		unset LS_COLORS
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Some systems (e.g. BSD &amp; embedded) don&#39;t typically come with</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># dircolors so we need to hardcode some terminals in here.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>TERM<span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">[</span>aEkx<span style="color:#f92672">]</span>term* | rxvt* | gnome* | konsole* | screen | tmux | cons25 | *color<span style="color:#f92672">)</span> use_color<span style="color:#f92672">=</span>true ;;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">${</span>use_color<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">${</span>EUID<span style="color:#e6db74">}</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\[\033[01;31m\]\h\[\033[01;34m\] \w \$\[\033[00m\] &#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] &#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#BSD#@export CLICOLOR=1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	alias ls<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls --color=auto&#39;</span>
</span></span><span style="display:flex;"><span>	alias grep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;grep --colour=auto&#39;</span>
</span></span><span style="display:flex;"><span>	alias la<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -A&#39;</span>
</span></span><span style="display:flex;"><span>	alias ll<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -alF&#39;</span>
</span></span><span style="display:flex;"><span>	alias l<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -CF&#39;</span>
</span></span><span style="display:flex;"><span>	alias n<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;neofetch&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># show root@ when we don&#39;t have colors</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\u@\h \w \$ &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> sh in /etc/bash/bashrc.d/*; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">[[</span> -r <span style="color:#e6db74">${</span>sh<span style="color:#e6db74">}</span> <span style="color:#f92672">]]</span> <span style="color:#f92672">&amp;&amp;</span> source <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>sh<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Try to keep environment pollution down, EPA loves us.</span>
</span></span><span style="display:flex;"><span>u
</span></span></code></pre></div><p>主要添加了别名，其他的可以自己修改</p>
<p>还有一个镰刀锤子配置也蛮好看的，但使用<code>↑</code>键查看历史命令时有Bug,不介意的可以用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-.bashrc" data-lang=".bashrc"><span style="display:flex;"><span> PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\e[1;32m\w\n\e[1;33m☭ \[</span><span style="color:#66d9ef">$(</span>tput sgr0<span style="color:#66d9ef">)</span><span style="color:#e6db74">\]&#34;</span>
</span></span></code></pre></div><p>配置来源 <a href="https://www.zhihu.com/question/19803678/answer/1001803388">你怎么设置终端 PS1 prompt</a></p>
<h4 id="sddm美化">SDDM美化</h4>
<p>我们更换壁纸后一般连同SDDM的背景一起换了，但设置里的SDDM主题管理实在是难用，经常打不开更换界面，推荐直接到主题目录下更换</p>
<ol>
<li>
<p>cd到需要配置的SDDM主题目录<code>/usr/share/sddm/themes/</code></p>
</li>
<li>
<p>进入主题文件夹，你会看见之前设置的背景(若有的话)，和两个配置文件，分别是预设配置<code>theme.conf</code>和用户配置<code>theme.conf.user</code></p>
</li>
<li>
<p>编辑用户配置<code>theme.conf.user</code>，找到<code>background=100857791_p113767970.png</code>这一行，可以看到目前我的背景为<code>100857791_p113767970.png</code></p>
</li>
<li>
<p>将要设置的背景移入主题文件夹，将<code>background=</code>后的文件名改为要设置的文件名</p>
</li>
<li>
<p>重启即可</p>
</li>
</ol>
<h2 id="内核编译">内核编译</h2>
<p>Arch下的内核编译只需要安装两个包即可</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S bc inetutils
</span></span></code></pre></div><p># inetutils提供hostsname</p>
<p>到这里Arch的配置也基本完成了，我也可以睡个好觉了&hellip;</p>
<p>再插一嘴，uu们有好的图床或对象储存推荐吗，博客老没图片也不行，最好能便宜点</p>
<h2 id="参考引用">参考|引用</h2>
<ul>
<li><a href="https://blog.ticks.cc/">ticks blog</a> 原文链接失效</li>
</ul>
<ul>
<li>
<p><a href="https://en.wikipedia.org/">Wikipedia</a></p>
</li>
<li>
<p><a href="https://wiki.archlinuxcn.org/wiki/KDE">KDE</a></p>
</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/LazyVim/LazyVim?tab=readme-ov-file#%EF%B8%8F-requirements">LazyVim</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>KernelSU内核编译</title>
      <link>https://blog.sorgdream.com/posts/kernelsu/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/kernelsu/</guid>
      <description><![CDATA[<h2 id="环境搭建">环境搭建</h2>
<p>搭建编译所需的环境</p>
<h3 id="系统安装">系统安装</h3>
<p>教程基于ubuntu，你可以选择实机安装或者使用wsl2,如何安装请看<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">使用 WSL 在 Windows 上安装 Linux</a></p>
<blockquote>
<p>注：wsl下的文件传输需将文件移动到挂载点<code>/mnt/c</code></p>
</blockquote>
<h3 id="编译环境">编译环境</h3>
<p>使用以下命令安装所需软件包</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install -y bc bison build-essential curl flex g++-multilib gcc-multilib <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    libssl-dev libxml2 libxml2-utils lzop pngcrush schedtool <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    squashfs-tools xsltproc zip zlib1g-dev unzip  
</span></span></code></pre></div><h3 id="系统代理">系统代理</h3>
<p>如果你的设备能够直连Github，并且速度还不错，那你可以忽视这一步
<!-- raw HTML omitted -->我们使用clash作为代理工具</p>
<h4 id="linux">Linux</h4>
<p>请看我的另一篇文章<a href="https://blog.inuya.ltd/posts/clash/">Clash-For-Linux</a></p>
<h4 id="windows">Windows</h4>
<ol>
<li>下载<a href="https://github.com/Z-Siqi/Clash-for-Windows_Chinese/releases">Clash-For-Windows</a>(已存档)</li>
<li>都有图形化操作界面了还要我教？</li>
<li>使用以下命令设置终端代理</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>export https_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 http_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 all_proxy<span style="color:#f92672">=</span>socks5://127.0.0.1:7891
</span></span></code></pre></div><h2 id="源码下载">源码下载</h2>
<p>现在开始下载所需的内核源码和工具，我们最好创建一个工作目录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mkdir -p kernel  <span style="color:#f92672">&amp;&amp;</span> cd kernel <span style="color:#75715e">#创建并进入工作目录</span>
</span></span><span style="display:flex;"><span>mkdir -p toolchains  <span style="color:#75715e">#工具链目录</span>
</span></span><span style="display:flex;"><span>mkdir -p source  <span style="color:#75715e">#内核源码目录</span>
</span></span></code></pre></div><h3 id="内核源码">内核源码</h3>
<p>如果你是小米用户，你可以试着下官方的源码，不过官方的源码可能不能成功编译，而且年久失修，大部分新机都没有公布源码，所以还是建议使用类原生的源码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>官方源码仓库
</span></span><span style="display:flex;"><span>https://github.com/MiCode/Xiaomi_Kernel_OpenSource
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>如果要下载的话请使用 git 命令
</span></span><span style="display:flex;"><span>git clone --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> https://github.com/MiCode/Xiaomi_Kernel_OpenSource -b cannon-r-oss  
</span></span></code></pre></div><p><code>cannon-r-oss</code>是作者的手机代号，需将<code>cannon-r-oss</code>换成自己源码的分支</p>
<p>类原生的话就简单多了，点击仓库右上角的<strong>code</strong>,把HTTPS的链接复制下来</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone xxxxxxxxxxxx.git  <span style="color:#75715e"># xxxxxxxx.git换成自己的链接</span>
</span></span></code></pre></div><h3 id="添加kernelsu">添加KernelSU</h3>
<p>只需使用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -LSs <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh&#34;</span> | bash -
</span></span></code></pre></div><p>即可将KernelSU添加到内核源码树
<!-- raw HTML omitted -->然后需要编辑你的配置文件，通常在<code>arch/arm64/configs/</code>，较新的机型也可能在<code>arch/arm64/configs/vendor/</code></p>
<p>进入文件夹，找到类似<code>设备代号_defconfig</code>的文件，比如我的代号是<strong>cannon</strong>，配置文件就是<code>cannon_defconfig</code></p>
<p>使用<strong>vim</strong>编辑配置文件，用<code>ESC+/</code>进入查找，在/后面输入你要找的内容，例如<code>/KPROBES</code>
<!-- raw HTML omitted -->如果没有开启相关的配置，需要手动添加</p>
<pre tabindex="0"><code>CONFIG_KPROBES=y
CONFIG_HAVE_KPROBES=y
CONFIG_KPROBE_EVENTS=y
</code></pre><h3 id="工具链下载">工具链下载</h3>
<p>作者使用zys-clang12和gcc4.9进行编译
<!-- raw HTML omitted -->因为zyc-clang需要下载压缩包并解压，所以我们先使用<strong>git</strong>下载gcc</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git
</span></span></code></pre></div><p>浏览器访问</p>
<pre tabindex="0"><code>https://github.com/ZyCromerZ/Clang/releases/download/12.0.1-20230207-release/Clang-12.0.1-20230207.tar.gz
</code></pre><p>下载zyc-clang</p>
<p>下载完成后用<code>tar -zxvf xxxx.tar.gz</code>解压</p>
<p>如果觉得目录太常不方便的话，可以用<strong>mv</strong>命令重命名文件夹</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mv &lt;原名称&gt; &lt;你想改的名称&gt;   
</span></span></code></pre></div><h2 id="编译脚本">编译脚本</h2>
<p>一般我们会用一个编译脚本设置环境变量、配置文件等
<!-- raw HTML omitted -->我的脚本是<del>抄</del>参考别人教程</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim build.sh <span style="color:#75715e">#创建编译脚本 </span>
</span></span></code></pre></div><p>写入以下内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>starttime<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>date +<span style="color:#e6db74">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>export ARCH<span style="color:#f92672">=</span>arm64
</span></span><span style="display:flex;"><span>export SUBARCH<span style="color:#f92672">=</span>arm64
</span></span><span style="display:flex;"><span>make O<span style="color:#f92672">=</span>out cannon_defconfig
</span></span><span style="display:flex;"><span>              make -j8 O<span style="color:#f92672">=</span>out <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    NM<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-nm <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    OBJCOPY<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-objcopy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    LD<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/ld.lld <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        CROSS_COMPILE<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/aarch64-linux-gnu- <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        CROSS_COMPILE_ARM32<span style="color:#f92672">=</span>~/kernel/toolchains/gcc-arm-4.9/bin/arm-linux-androideabi- <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        CC<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/clang <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        AR<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-ar <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        OBJDUMP<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-objdump <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        STRIP<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-strip
</span></span><span style="display:flex;"><span>        2&gt;&amp;<span style="color:#ae81ff">1</span> | tee error.log
</span></span><span style="display:flex;"><span>endtime<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>date +<span style="color:#e6db74">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>start_seconds<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>date --date<span style="color:#f92672">=</span><span style="color:#e6db74">&#34; </span>$starttime<span style="color:#e6db74">&#34;</span> +%s<span style="color:#66d9ef">)</span>;
</span></span><span style="display:flex;"><span>end_seconds<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>date --date<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$endtime<span style="color:#e6db74">&#34;</span> +%s<span style="color:#66d9ef">)</span>;
</span></span><span style="display:flex;"><span>echo Start: $starttime.
</span></span><span style="display:flex;"><span>echo End: $endtime.
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Build Time: &#34;</span><span style="color:#66d9ef">$((</span>end_seconds-start_seconds<span style="color:#66d9ef">))</span><span style="color:#e6db74">&#34;s.&#34;</span>
</span></span></code></pre></div><p>需要注意的是，<code>cannon_defconfig</code>配置文件的路径已经在<code>arch/arm64/configs/</code></p>
<p>假设你的配置文件是<code>arch/arm64/configs/example_defconfig</code>那你只需要填写<code>example_defconfig</code>即可</p>
<p>但如果你的配置文件位于<code>arch/arm64/configs/vendor/example_defconfig</code>则需要填写<code>vendor/example_defconfig</code></p>
<h2 id="开始编译">开始编译</h2>
<p>用<code>chmod +x build.sh</code>添加执行权限，<code>./build.sh</code>执行编译脚本，产出在<code>out/arch/arm64/boot</code>目录</p>
<h2 id="打包内核">打包内核</h2>
<p>能来到这一步，你应该能成功编译出内核，恭喜你，接下来我们需要将它打包成boot或内核刷入</p>
<h3 id="anykernel3">AnyKernel3</h3>
<p>项目地址：https://github.com/osm0sis/AnyKernel3</p>
<p>用<strong>git</strong>下载AnyKernel3</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/osm0sis/AnyKernel3.git
</span></span></code></pre></div><p>你需要把产出的Image放到AnyKernel3的根目录，然后编辑<code>anykernel.sh</code>
<!-- raw HTML omitted -->需要改的是以下几点</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kernel.string<span style="color:#f92672">=</span>KernelSU-cannon-inuyasha <span style="color:#75715e">#内核名称</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.devicecheck<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#75715e">#设备检测，为0时关闭</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.modules<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.systemless<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.cleanup<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.cleanuponabort<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>device.name1<span style="color:#f92672">=</span>cannon  <span style="color:#75715e">#设备代号，可以设置多个</span>
</span></span><span style="display:flex;"><span>device.name2<span style="color:#f92672">=</span>cannong
</span></span><span style="display:flex;"><span>device.name3<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>device.name4<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>supported.versions<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>supported.patchlevels<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>supported.vendorpatchlevels<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>block<span style="color:#f92672">=</span>auto;   
</span></span><span style="display:flex;"><span>is_slot_device<span style="color:#f92672">=</span>auto;  
</span></span><span style="display:flex;"><span>ramdisk_compression<span style="color:#f92672">=</span>auto; 
</span></span><span style="display:flex;"><span>patch_vbmeta_flag<span style="color:#f92672">=</span>auto; 
</span></span></code></pre></div><p>配置完后使用<code>zip -r9 UPDATE-AnyKernel3.zip * -x .git README.md *placeholder</code>即可打包内核</p>
<p>如果使用zsh，可能会报错<code>not matches found</code>，只需要在<code>.zshrc</code>中添加</p>
<pre tabindex="0"><code>setopt no_nomatch
</code></pre><p>然后再<code>source ~/.zshrc</code>即可解决</p>
<h3 id="magiskboot">MagiskBoot</h3>
<p>如果你不喜欢用anykernel3，你也可以提取原版的boot.img使用编译出来的image替换原厂kernel</p>
<ol>
<li>首先到<a href="https://github.com/topjohnwu/Magisk/releases">Magisk</a>下载magisk.apk,重命名为.zip并解压</li>
<li>把解压后的<code>Magisk-v26.1/lib/arm64-v8a/libmagiskboot.so</code>文件，用 adb push 到手机</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>adb push Magisk-v26.1/lib/arm64-v8a/libmagiskboot.so /data/local/tmp/magiskboot 
</span></span></code></pre></div><p><code>Magisk-v26.1</code>需要改成下载的版本号</p>
<ol start="3">
<li>按照上面的方法把提取的boot.img和编译出的Image都push到手机</li>
<li>用<code>adb shell</code>进入adb，然后进入手机<code>/data/local/tmp</code>/目录，赋予magiskboot可执行权限<code>chmod +x magiskboot</code></li>
<li>执行<code>./magiskboot unpack boot.img</code>解包boot.img得到kernel文件</li>
<li>用<strong>Image</strong>替换<strong>kernel</strong><code>mv -f Image kernel</code></li>
<li>最后执行<code>./magiskboot repack boot.img</code>命令重新打包boot.img，得到<strong>new-boot.img</strong>，备份原厂boot后在fastboot中刷入即</li>
</ol>
<h2 id="拓展">拓展</h2>
<p>如果kprobe不正常工作，就会出现无限重启，不开机，替换boot后仍显示不支持等错误，接下来我们将手动修改源码集成ksu</p>
<p>首先让我们验证是否为kprobe的问题，</p>
<ol>
<li>首先用vim打开<code>KernelSU/kernel/ksu.c</code></li>
<li>找到<code>ksu_enable_sucompat() 和 ksu_enable_ksud()</code>这两行，使用<code>//</code>注释掉</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// ksu_enable_sucompat();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ksu_enable_ksud()
</span></span></span></code></pre></div><p>就像这样</p>
<p>重新编译你的内核，看能否开机，如果能正常开机就是kprobe的问题，如果还是不能开机，检查你的源码是否适用你的系统</p>
<h3 id="修改内核源码">修改内核源码</h3>
<ol>
<li>使用这条命添加KSU</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -LSs <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh&#34;</span> | bash -
</span></span></code></pre></div><ol start="2">
<li>因为要改的比较多，推荐去看<a href="https://kernelsu.org/zh_CN/guide/how-to-integrate-for-non-gki.html">官方文档</a>，写的比较详细</li>
</ol>
<h3 id="bugreport">BugReport</h3>
<p>如果手动集成还是失败，你可以去Github提供一个<a href="https://github.com/tiann/KernelSU/issues/new/choose">BugReport</a>给作者，在管理其设置，发送日志即可发送错误日志</p>
<h2 id="参考部分引用">参考|部分引用</h2>
<p><a href="https://kernelsu.org/zh_CN/guide/how-to-integrate-for-non-gki.html">如何为非 GKI 内核集成 KernelSU </a></p>
<p><a href="https://blog.ticks.cc/posts/id/ef0vy/">红米K40内核KernelSU编译</a></p>
<p><a href="https://zixijian.github.io/2021/01/15/008.html"> 手机端编译安卓内核</a></p>]]></description>
      
    </item>
    
    
  </channel>
</rss>
