<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>sorgDream&#39;s Blog</title>
    <link>https://blog.sorgdream.com/</link>
    <description>Recent content on sorgDream&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>sorgDream - [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</copyright>
    <lastBuildDate>Sat, 17 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.sorgdream.com/index.xml" rel="self" type="application/rss+xml" /><icon>https://blog.sorgdream.com/avatar.jpg</icon>
    
    
    <item>
      <title>RK-R98键盘开箱</title>
      <link>https://blog.sorgdream.com/posts/r98-keyboard/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/r98-keyboard/</guid>
      <description><![CDATA[<h2 id="为什么要买这个键盘">为什么要买这个键盘</h2>
<p>因为刷b站的时候看到一个<a href="https://www.bilibili.com/video/BV1nw411C71Z/">Cmake入门视频</a>，讲的不错，通俗易懂，当然关键不在此，主要是想知道up的键盘，看见评论区有和我一样想法的，随即买了这款键盘</p>
<p>虽然笔记本的薄膜键盘不错，敲起来速度很快，但还是想体验下机械键盘的手感</p>
<p><strong>至于为什么选择这个颜色</strong></p>
<p>当然是别的颜色都没货(划掉)</p>
<h2 id="主要配置">主要配置</h2>
<p>这里只列出了我买的，其他的自己上<a href="https://3.cn/-1VyB2zu">京东</a>看吧</p>
<table>
<thead>
<tr>
<th>连接方式</th>
<th>有线/2.4G/蓝牙</th>
</tr>
</thead>
<tbody>
<tr>
<td>键帽</td>
<td>PBT原厂拼色</td>
</tr>
<tr>
<td>轴体</td>
<td>烟雨轴/TTC钢铁轴</td>
</tr>
<tr>
<td>声音包</td>
<td>PORON棉/ixpe轴下垫/底棉/硅胶</td>
</tr>
<tr>
<td>PCBA</td>
<td>单键开槽</td>
</tr>
<tr>
<td>电池</td>
<td>7200MA锂电池</td>
</tr>
<tr>
<td>结构</td>
<td>Gasket结构(软弹型)</td>
</tr>
<tr>
<td>插拔</td>
<td>全键轴座插拔</td>
</tr>
<tr>
<td>卫星轴</td>
<td>R87卫星轴(升级款)</td>
</tr>
</tbody>
</table>
<p>京东原价259,减了20</p>
<h3 id="轴体">轴体</h3>
<p>一共有四种轴可选，这次我选择了烟雨轴，声音听起来很不错，大键也没有弹簧音，一种麻将的感觉;比之前买的强多了</p>
<table>
<thead>
<tr>
<th>轴体</th>
<th>压力克数</th>
<th>触发行程</th>
<th>触底行程</th>
</tr>
</thead>
<tbody>
<tr>
<td>纯净轴</td>
<td>42±5g</td>
<td>2.0±0.4mm</td>
<td>3,7±0.4mm</td>
</tr>
<tr>
<td>雪皇轴</td>
<td>45±10gf</td>
<td>2.0±0.4mm</td>
<td>3.4±0.4mm</td>
</tr>
<tr>
<td>烟雨轴PRO</td>
<td>40±10gf</td>
<td>2.0±0.4mm</td>
<td>3.4±0.4mm</td>
</tr>
<tr>
<td>钢铁轴PRO</td>
<td>41±10gf</td>
<td>1.4±0.4mm</td>
<td>3.8±0.3mm</td>
</tr>
</tbody>
</table>
<h2 id="兼容性">兼容性</h2>
<p>实测在Arch下有线和2.4G能完美使用，蓝牙还没试，但应该也能用;我的内核版本是<code>6.7.4-arch1-1</code></p>
<h2 id="物流">物流</h2>
<p>不得不吐槽一下极兔的物流速度，虽然是春节，但也不用发个键盘都要走5天，从花都到钟村足足用了一天&hellip;</p>
<p>还好键盘是安全送到了</p>
<h2 id="一些题外话">一些题外话</h2>
<p>估计是中考前最后一篇文章了，等中考完再回来给大家更新</p>
<p>回老家四天没碰电脑，不知不觉就攒了90多个包，不得不说开了多线程的pacman很快</p>
<p>前几天想整理下文章目录，因为busuanzi和twikoo是和文章链接绑定的，导致阅读量和评论都没了，还好发现的及时😭</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Pigo实现人脸识别</title>
      <link>https://blog.sorgdream.com/posts/pigo-face/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/pigo-face/</guid>
      <description><![CDATA[<p>最近学Go的时候发现个好玩的库，可以识别图片中的人像，并且提供二进制发行版</p>
<h2 id="使用">使用</h2>
<p>从<a href="https://github.com/esimov/pigo/releases">Releases</a>处下载对应系统的二进制</p>
<p>下载<a href="https://github.com/esimov/pigo/blob/master/cascade/facefinder">facefinder</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./pigo -in input.png -out out.png &lt; input/source.jpg -cf<span style="color:#f92672">=</span>/path/to/cascade
</span></span></code></pre></div><p>即可识别<code>input.png</code>，并输出<code>output.png</code></p>
<h2 id="预览图">预览图</h2>
<p><img src="https://user-images.githubusercontent.com/883386/40916662-2fbbae1a-6809-11e8-8afd-d4ed40c7d4e9.png" alt="Rectangle face marker"></p>
<h2 id="识别视频">识别视频</h2>
<p>因为Pigo默认只能识别图片，想让它识别整个视频的话只能将视频切成图片进行逐一识别，毕竟视频也是图片组成的</p>
<h3 id="下载视频">下载视频</h3>
<p>B站不提供直接的视频下载方式，试了几个网站的下载工具发现要不就是不能用，要么分辨率太低，所以这里使用自带的缓存功能</p>
<p>到Android设备</p>
<pre tabindex="0"><code>/storage/emulated/0/Android/data/com.bilibili.app.in/download/
</code></pre><p>目录下，会发现一串以数字命名的文件夹，进入其子目录，会看到一个以数字命名的文件夹，和两个<code>.xml</code>,<code>.json</code>结尾的文件</p>
<p>进入数字文件夹，需要的两个文件出现了，<code>audio.m4s</code>为音频文件，<code>video.m4s</code>为视频文件，将音频拓展名重命名为<code>*.mp3</code>，视频为<code>*.mp4</code>，移动到任意剪辑软件能读取的目录</p>
<p>将两个文件导入剪辑软件，将视频和音频同步拖到对应轨道，导出即可</p>
<h3 id="切割视频">切割视频</h3>
<p>这里博主使用的工具是<a href="https://ffmpeg.org/">FFmpeg</a></p>
<p>最好创建一个专门的文件夹存放输出的图片</p>
<blockquote>
<p>A complete, cross-platform solution to record, convert and stream audio and video.</p>
</blockquote>
<p>使用<code>ffmpeg -i lockHand.mp4 -r 24 ./lockHand/output%d.png </code>以每秒24张图片分解视频</p>
<p>-i: 指定分割的视频</p>
<p>-r: 设置帧率，默认为25</p>
<p><code>output%d.png</code>中<code>%d</code>是占位符，ffmpeg将以1.2.3&hellip;的顺序命名输出文件</p>
<p>完成后，到<code>lockHand</code>目录下即可看到输出的图片</p>
<h3 id="批量识别">批量识别</h3>
<p>一个18秒，24帧的视频就需要432张图片，这么多图片难不成要我们手动一张张识别？估计得识别到地球爆炸;像我这么懒的人肯定不会这么做，我决定用一个脚本来替我完成这项艰巨的任务</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span><span style="color:#f92672">((</span>i<span style="color:#f92672">=</span>1;i&lt;<span style="color:#f92672">=</span>422;i++<span style="color:#f92672">))</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>  ./pigo -in ./lockHand/output$i.png -out ./outHand/out$i.png -cf ./facefinder
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;处理次数:&#34;</span>$i
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>很简单的脚本，其中<code>442</code>为生成的源图片数量，<code>./lockHand/output$i.png</code>需要改为源图片文件文件夹，<code>$i</code>和<code>%d</code>差不多，产出目录同上</p>
<p>等待脚本完成，到<code>./lockHand</code>即可看到产出图片</p>
<h3 id="合并视频">合并视频</h3>
<p>同样使用FFmpeg</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ffmpeg -r <span style="color:#ae81ff">24</span> -f image2 -i ./outHand/out%d.png output.mp4  <span style="color:#75715e">##合成</span>
</span></span></code></pre></div><p>参数代表的含义与分割视频一致</p>
<p>激动人心的时刻到了，点击output.mp4即可看到识别的红框</p>
<h2 id="演示视频">演示视频</h2>
<p><a href="https://www.bilibili.com/video/BV1uU421Z7LU/?share_source=copy_web&amp;vd_source=1345dad103258a05d7c3f69f300fc342">控头大师，但Pigo实现</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Frp自建内网穿透</title>
      <link>https://blog.sorgdream.com/posts/nat-traversal/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/nat-traversal/</guid>
      <description><![CDATA[<p>这几天一直在折腾内网穿透的事，原因很简单，服务器的ROM不够大，又没钱升级配置，又拍云的免费OSS不备案无法绑定域名，免费的内网穿透速率太小了，更别提还有流量限制</p>
<p>想了想貌似只能自己建一个了，刚好手里有吃灰的Orangepi Zeor3，买的时候配了张128G的TF卡，虽然速度一般，但对于我来说是绰绰有余了</p>
<h2 id="frp">frp</h2>
<p>提到内网穿透，想到的肯定是大名顶顶的<strong>frp</strong>，目前在Github上已有76.3K starred</p>
<p>网上的很多文章大多是教你用基于frp的一键配置脚本，但试了几个发现都没用后决定自己尝试</p>
<h3 id="安装使用">安装&amp;使用</h3>
<p>frp的安装很简单，参照<a href="https://gofrp.org/zh-cn/">文档</a>的教程</p>
<ol>
<li>
<p>到<a href="https://github.com/fatedier/frp/releases/tag/v0.53.2">Releases</a>处下载适合的架构/系统的压缩包，解压到任意目录</p>
</li>
<li>
<p>使用<code>./frps -c ./frps.toml</code>启动服务端</p>
</li>
<li>
<p>使用<code>./frpc -c ./frpc.toml</code>启动客户端</p>
</li>
</ol>
<h3 id="使用-systemd-开机自启动">使用 systemd 开机自启动</h3>
<p>如果断开ssh连接，frp服务也会断开;可以将它设置为开机自启</p>
<ol>
<li>(如果尚未安装)使用<code>apt install systemd </code>安装，其他发行版使用其包管理器即可</li>
<li>编辑<code>/etc/systemd/system/frps.service</code>创建frp服务配置，写入以下内容</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-service" data-lang="service"><span style="display:flex;"><span><span style="color:#66d9ef">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 服务名称，可自定义</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Description </span><span style="color:#f92672">=</span><span style="color:#e6db74"> frp server</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">After </span><span style="color:#f92672">=</span><span style="color:#e6db74"> network.target syslog.target</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Wants </span><span style="color:#f92672">=</span><span style="color:#e6db74"> network.target</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Type </span><span style="color:#f92672">=</span><span style="color:#e6db74"> simple</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 启动frps的命令，需修改为您的frps的安装路径</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExecStart </span><span style="color:#f92672">=</span><span style="color:#e6db74"> /path/to/frps -c /path/to/frps.toml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WantedBy </span><span style="color:#f92672">=</span><span style="color:#e6db74"> multi-user.target</span>
</span></span></code></pre></div><p>3.管理命令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 启动frp</span>
</span></span><span style="display:flex;"><span>sudo systemctl start frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 停止frp</span>
</span></span><span style="display:flex;"><span>sudo systemctl stop frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 重启frp</span>
</span></span><span style="display:flex;"><span>sudo systemctl restart frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 查看frp状态</span>
</span></span><span style="display:flex;"><span>sudo systemctl status frps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 开机自启动</span>
</span></span><span style="display:flex;"><span>sudo systemctl enable frps
</span></span></code></pre></div><p>之后的frpc也是大同小异，只需要更改名字和位置即可</p>
<h3 id="配置">配置</h3>
<p>重点来了，frp有两个配置，一个<code>frps.toml</code>用于服务端，一个<code>frpc.toml</code>用于客户端</p>
<ol>
<li>配置frps.toml</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">bindPort</span> = <span style="color:#ae81ff">7000</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">vhostHTTPPort</span> = <span style="color:#ae81ff">7890</span>
</span></span></code></pre></div><p><code>bindPort</code>不用管，<code>vhostHTTPPort</code>为连接的端口，默认为8080,但端口被我的评论占用了，所以改成7890</p>
<p>如像我这样，配置完后可以通过<code>http://www.yourdomain.com:7890</code>访问</p>
<ol start="2">
<li>配置frpc.toml</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">serverAddr</span> = <span style="color:#e6db74">&#34;x.x.x.x&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">serverPort</span> = <span style="color:#ae81ff">7000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[[<span style="color:#a6e22e">proxies</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;image-hosting&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">type</span> = <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">localIP</span> = <span style="color:#e6db74">&#34;192.168.xx.xxx&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">localPort</span> = <span style="color:#ae81ff">7890</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">customDomains</span> = [<span style="color:#e6db74">&#34;www.example.com&#34;</span>]
</span></span></code></pre></div><p>serverAddr: 服务器IP</p>
<p>name: 取一个好记的名字</p>
<p>type: 因为要搭建网站所以选择http</p>
<p>localIP: 本机IP</p>
<p>localPort: 内网服务部署端口</p>
<p>customDomains: 绑定的域名</p>
<p>PS: 原本还有一个<code>remotePort = 6000</code>配置，看到文档没有就删了，实测没有影响</p>
<p>将和 <a href="https://www.example.com">www.example.com</a> 的域名 A 记录解析到服务器的 IP 地址<code>x.x.x.x</code></p>
<p>访问<code>www.example.com:7890</code>即可访问内网机器上的<code>7890</code>服务</p>
<h3 id="nginx配置">Nginx配置</h3>
<p>不得不说Nginx真是好用，配置方便，功能强大; 配置完frp,接下来就是nginx</p>
<p>因为上面只进行了内网穿透，内网的机器还需要配置nginx来显示网站</p>
<ol>
<li>还没有安装的在等什么，使用<code>apt install nginx</code>安装nginx</li>
<li>在<code>etc/nginx/conf.d/</code>文件夹内添加配置文件，文件名随意，以<code>.conf</code>作为拓展名</li>
<li>增添配置，以下为我的配置</li>
</ol>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 7890;
    server_name www.example.com;
    root /home/image-hosting;

    fancyindex on;            
    fancyindex_exact_size off; 
    fancyindex_localtime on; 
    fancyindex_name_length 255; 
    fancyindex_time_format &#34;%Y-%m-%d %H:%M:%S&#34;;

    location / {
    }
}
</code></pre><p>listen: 监听7890端口</p>
<p>server_name: 绑定的域名</p>
<p>root: 网站所在文件夹</p>
<p>以下配置开启文件引索，若无需求可以忽略</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf"> fancyindex on;            
    fancyindex_exact_size on; 
    fancyindex_localtime on; 
    fancyindex_name_length 255; 
    fancyindex_time_format &#34;%Y-%m-%d %H:%M:%S&#34;;
</code></pre><p>再一次尝试访问<code>www.example.com:7890</code>查看是否正常显示</p>
<h4 id="去端口访问">去端口访问</h4>
<p>整天带端口访问太丑了，可以使用nginx的反向代理功能解决，原理就是在服务器上套层nginx，将<code>www.example.com</code>反向代理至<code>www.example.com:7890</code></p>
<p>以下是我的配置</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name www.example.com; # 设置的域名
    location / {
             proxy_pass  http://www.example.com:7890; # 反向代理至8080端口
    }
}
</code></pre><p>配置完尝试使用<code>www.example.com</code>访问</p>
<h3 id="https">HTTPS</h3>
<p>虽然现在已经可以较为优雅地访问了，但因为缺少ssl证书，每次访问都给我警告</p>
<p>frp支持为本地 HTTP 服务启用 HTTPS，但需要自行下载证书到内网机器，而且无法使用像certbot这样的工具，所以我选择在服务器的Nginx配置证书</p>
<p>关于如何获取证书，我的<a href="https://blog.inuya.ltd/posts/winter/">上上篇文章</a>已经讲的很清楚了，下面是我的配置</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name img.inuya.ltd; # 设置的域名
    location / {
             proxy_pass  http://img.inuya.ltd:7890; # 反向代理至7890端口
    }
}

server {
    listen 443;
    server_name img.inuya.ltd;
    ssl_certificate /etc/letsencrypt/live/img.inuya.ltd/fullchain.pem;  # 配置证书
    ssl_certificate_key /etc/letsencrypt/live/img.inuya.ltd/privkey.pem;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    # 表示使用的加密套件的类型。
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 表示使用的TLS协议的类型。
    ssl_prefer_server_ciphers on;
    location / {
            proxy_pass http://img.inuya.ltd:7890;
    }
}
</code></pre><h2 id="图床">图床</h2>
<p>搞定了内网穿透，但怎么把图片显示出来呢，1P面板有个图床的docker镜像，用了下感觉很一般，不如自己建一个</p>
<p>因为没学过前端，所以只能边学边建，写出来的东西也是漏洞百出，但最起码能用了</p>
<h3 id="文件引索">文件引索</h3>
<p>原本是想写一个文件引索，看了几篇文章都是无从下手，偶然看到一篇关闭<code>Apache</code>默认文件引索功能的文章，想到Nginx是否也有这个功能，找了一下还真有，只不过需要手动开启</p>
<p>在内网机器的nginx配置中添加以下内容</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen  80;
    server_name 192.168.31.112;
    root /home/image-hosting;
    autoindex on;    	#启用或禁用目录列表输出
    autoindex_format html； #设置目录列表的格式
    autoindex_localtime on;  #指定目录列表中的时间是否应以本地时区或 UTC 输出
    autoindex_exact_size off;  #是否应在目录列表中输出确切的文件大小
}
</code></pre><p>输入一个网站目录，看是否能浏览文件</p>
<h3 id="嵌入引索">嵌入引索</h3>
<p>因索有了，但我不想手动一个个翻图片，于是将它嵌入到了我的主页</p>
<p>在代码中添加<code>&lt;iframe&gt;</code>标签即可嵌入一个网页，因为我想显示<code>Images</code>目录的引索，所以src中填入了<code>images/</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;div-pic&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;images/&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;100%&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;800px&#34;</span> <span style="color:#a6e22e">scrolling</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;auto&#34;</span> <span style="color:#a6e22e">framespacing</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#a6e22e">allowfullscreen</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span>&gt; &lt;/<span style="color:#f92672">iframe</span>&gt;   
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>如果想要更换嵌入的网站，只需要修改<code>src=&quot;&quot;</code> 里的内容为目标网址即可</p>
<h4 id="美化引索">美化引索</h4>
<p>但这样还有一个问题，默认的引索在网站的背景是透明的，导致看不清文件名，CSS添加的背景太亮了，又偶然看见一篇用第三方模块来美化的文章</p>
<p><!-- raw HTML omitted -->使用<code>fancyindex</code>模块替代默认的引索，来达到美化的效果</p>
<ol>
<li><code>apt install libnginx-mod-http-fancyindex</code>安装模块</li>
<li>修改/创建<code>/etc/nginx/conf.d/</code>下的配置，添加以下内容以开启引索</li>
</ol>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name 192.168.31.112;
    root /home/image-hosting;

    fancyindex on;            
    fancyindex_exact_size off; 
    fancyindex_localtime on; 
    fancyindex_name_length 255; 
    fancyindex_time_format &#34;%Y-%m-%d %H:%M:%S&#34;;

    location / {
    }
}
</code></pre><p>返回网站，刷新即可看到新样式</p>
<p>fancyindex还有许多主题可选，如<a href="https://github.com/Naereen/Nginx-Fancyindex-Theme">Nginx-Fancyindex-Theme</a>和<a href="https://github.com/alehaa/nginx-fancyindex-flat-theme">nginx-fancyindex-flat-theme</a></p>
<p>也可以用<code>fancyindex</code>加<code>theme</code>关键字在Guthub搜索其他主题</p>
<h2 id="补充">补充</h2>
<p>其实内网穿透这个想法很早就有了，但一直搁置到现在;未来可能还会把Twikoo评论也放到开发板上，还是要看评论的人多不多</p>
<p>最后祝大家玩得开心</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://nginx.org/en/docs/http/ngx_http_autoindex_module.html">Module ngx_http_autoindex_module</a></li>
<li><a href="https://gofrp.org/zh-cn/">frp</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Arch下的Kde配置</title>
      <link>https://blog.sorgdream.com/posts/arch-kde/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/arch-kde/</guid>
      <description><![CDATA[<p>2024年的第一篇文章，祝大家新年快乐(虽然有点迟了)</p>
<p>这段时间重装了6次Arch，1次Debian Testing，几乎将主流桌面体验完了，血与泪的教训，wayland目前还不成熟，高分屏还得老老实实用x11</p>
<h2 id="起因">起因</h2>
<p>逛B站时偶然看到了有人发<a href="https://www.bilibili.com/read/cv22707313/">Hyprland的配置</a>，再看我的Kde瞬间就不香了</p>
<p>拿出我珍藏多年的Arch Live CD ，F12选择U盘启动，在经过一系列分区，生成fstab，引导后，成功来到了熟悉的tty界面，接下来照着B站的教程，开始安装Hyprland</p>
<h2 id="hyprland">Hyprland</h2>
<blockquote>
<p>Hyprland is a highly customizable dynamic tiling Wayland compositor that doesn&rsquo;t sacrifice on its looks.</p>
</blockquote>
<blockquote>
<p>Hyprland 是一款高度可定制的动态平铺 Wayland 合成器，不会牺牲其外观。</p>
</blockquote>
<h3 id="安装">安装</h3>
<ol>
<li>首先安装Wayland</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pacman -S xorg-xwayland qt5-wayland qt6-wayland glfw-wayland
</span></span></code></pre></div><ol start="2">
<li>安装Hyprland</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>paru -S hyprland-bin
</span></span></code></pre></div><ol start="3">
<li>复制配置文件</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir -pv ~/.config/hypr
</span></span><span style="display:flex;"><span>sudo cp /usr/share/hyprland/hyprland.conf ~/.config/hypr/
</span></span></code></pre></div><ol start="4">
<li>Hyprland启动</li>
</ol>
<p>通过编辑<code>~/.bash_profile</code>启动(不使用显示管理器)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 启动 wayland 桌面前设置一些环境变量</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> set_wayland_env
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 设置语言环境为中文</span>
</span></span><span style="display:flex;"><span>	export LANG<span style="color:#f92672">=</span>zh_CN.UTF-8
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 解决QT程序缩放问题</span>
</span></span><span style="display:flex;"><span>	export QT_AUTO_SCREEN_SCALE_FACTOR<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># QT使用wayland和gtk</span>
</span></span><span style="display:flex;"><span>	export QT_QPA_PLATFORM<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wayland;xcb&#34;</span>
</span></span><span style="display:flex;"><span>	export QT_WAYLAND_DISABLE_WINDOWDECORATION<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 使用qt5ct软件配置QT程序外观</span>
</span></span><span style="display:flex;"><span>	export QT_QPA_PLATFORMTHEME<span style="color:#f92672">=</span>qt5ct
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 一些游戏使用wayland</span>
</span></span><span style="display:flex;"><span>	export SDL_VIDEODRIVER<span style="color:#f92672">=</span>wayland
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 解决java程序启动黑屏错误</span>
</span></span><span style="display:flex;"><span>	export _JAVA_AWT_WM_NONEREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># GTK后端为 wayland和x11,优先wayland</span>
</span></span><span style="display:flex;"><span>	export GDK_BACKEND<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wayland,x11&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 命令行输入这个命令启动hyprland,可以自定义</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> start_hyprland
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	set_wayland_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	export XDG_SESSION_TYPE<span style="color:#f92672">=</span>wayland
</span></span><span style="display:flex;"><span>	export XDG_SESSION_DESKTOP<span style="color:#f92672">=</span>Hyprland
</span></span><span style="display:flex;"><span>	export XDG_CURRENT_DESKTOP<span style="color:#f92672">=</span>Hyprland
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 启动 Hyprland程序</span>
</span></span><span style="display:flex;"><span>	exec Hyprland
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>重启或直接<code>source ~/.bash_profile</code>使配置生效，输入<code>start_hyprland</code>启动</p>
<h3 id="应用安装">应用安装</h3>
<p>刚进入桌面，你会发现什么也没有，先装个终端和中文字体</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S kitty wqy-zenhei
</span></span></code></pre></div><p>使用快捷键<code>Super+Q</code>即可启动(Super键默认为WIN)</p>
<p>貌似一切都很完美，让我们装个QQ试逝</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>paru -S linuxqq
</span></span></code></pre></div><p>打开后你会发现字体变得很模糊，不止qq,其他程序在wayland缩放下的显示都不太好</p>
<h2 id="gnome">Gnome</h2>
<blockquote>
<p>GNOME originally an acronym for GNU Network Object Model Environment,is a free and open-source desktop environment for Linux and other Unix-like operating systems.</p>
</blockquote>
<blockquote>
<p>GNOME是一个完全由自由软件组成的桌面环境。它的目标操作系统是Linux，但是大部分的BSD系统亦支持GNOME。</p>
</blockquote>
<p>因为Hyprland的字体问题，我回到了一开始用的gnome;但因为使用wayland的原因，qq下的字体还是模糊，而且缩放有问题，200%会使字体和窗口过大，100%字又太小</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsettings set org.gnome.mutter experimental-features <span style="color:#e6db74">&#34;[&#39;scale-monitor-framebuffer&#39;]&#34;</span>
</span></span></code></pre></div><p>使用此命令开启分数缩放</p>
<p>缩放是解决了，但字体的问题依旧，目前没找到完美的解决方案，只能用<code>Tweaks</code>工具调整字体大小</p>
<h2 id="cinnamon">Cinnamon</h2>
<blockquote>
<p>Cinnamon, forked from GNOME Shell, is the &ldquo;shell&rdquo; of Cinnamon. It provides the user interface such as panels, hot corners, menus etc. The ui is written in JavaScript, while its core libraries are written in C.</p>
</blockquote>
<blockquote>
<p>Cinnamon是类Unix系统下的一个桌面环境。最初是GNOME Shell的一个派生版本，由Linux Mint开发，提供了相似于GNOME 2，易于使用的传统用户界面，从Cinnamon 2.0开始，成为独立的桌面环境。</p>
</blockquote>
<p>一个由Mint开发的桌面，也是Linux Mint的默认桌面</p>
<p>Cinnamon不同于前两个，使用的是x11，所以基本没有字体和缩放问题，而且桌面和发生版都很适合新手，Debian系的包也比较多</p>
<p>但我不是很喜欢Cinnamon的设计，所以没有使用它</p>
<h2 id="kde-plasma">KDE Plasma</h2>
<blockquote>
<p>Plasma is a graphical shell developed by KDE for Unix-like operating systems. Plasma is a standard desktop interface.</p>
</blockquote>
<blockquote>
<p>KDE 是一套由 Plasma 桌面环境、一系列的库、框架（KDE Frameworks）和一些应用组成的软件项目。</p>
</blockquote>
<p>目前在用的桌面，自定义程度很高，记录下配置过程</p>
<h3 id="汉化不完全">汉化不完全</h3>
<p>表现为设置/文件管理器一半中文一半英文</p>
<p>编辑<code>~/.config/plasma-localerc</code>将<code>LANG=h_CN</code>改为<code>LANG=zh_CN.UTF-8</code>，重启后即可解决</p>
<h3 id="系统代理">系统代理</h3>
<ol>
<li>
<p>手机代理设置-允许来自局域网连接，记录端口;在设置-网络设置-代理服务器中选择-使用手动指定的的代理服务器配置</p>
</li>
<li>
<p>手机任意终端<code>su</code>后使用<code>ifconfig</code>获取本机IP,填入代理设置</p>
</li>
<li>
<p>终端走代理</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export https_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 http_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 all_proxy<span style="color:#f92672">=</span>socks5://127.0.0.1:7891
</span></span></code></pre></div><p><code>7890</code>/<code>7891</code>为端口号，<code>127.0.0.1</code>为IP</p>
<h3 id="常用应用">常用应用</h3>
<h4 id="1-neovim">1. neovim</h4>
<p>使用<a href="https://github.com/ayamir/nvimdots">nvimdots</a>配置，另一选择<a href="https://github.com/NvChad/NvChad">NcChad</a></p>
<blockquote>
<p>LazyVim is a Neovim setup powered by 💤 lazy.nvim to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.</p>
</blockquote>
<h5 id="11-安装">1.1 安装</h5>
<ol>
<li>1.1.1 <strong>依赖</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ol>
<ul>
<li>Neovim &gt;= 0.9.0 (needs to be built with LuaJIT)</li>
<li>Git &gt;= 2.19.0 (for partial clones support)</li>
<li>a Nerd Font (optional)</li>
<li>a C compiler for nvim-treesitter. See here</li>
</ul>
<ol start="2">
<li>1.1.2 安装</li>
</ol>
<p>克隆配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/LazyVim/starter ~/.config/nvim
</span></span></code></pre></div><p>nvim启动!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nvim
</span></span></code></pre></div><h5 id="12-nvim下的复制粘贴">1.2 nvim下的复制粘贴</h5>
<p><code>sudo pacman -S xclip</code>安装xclip后，使用<code>v</code>选中要复制的内容，<code>y</code>复制，<code>p</code>粘贴，<code>d</code>剪切</p>
<h4 id="2-neofetch">2. neofetch</h4>
<p>相信用过Linux的都听说过这个软件，它能显示系统Ascii art和硬件信息，可以通过修改<code>~/.config/neofetch/config.conf</code>进行配置</p>
<p>参考<a href="https://github.com/Kicamon/dotfile/blob/main/neofetch/config.conf">Kicamon</a>的配置，进行了一些修改，用<code>-</code>代替图标</p>
<h4 id="3-网易云音乐">3. 网易云音乐</h4>
<p>写文章时没点音乐怎么行，目前Arch下我认为比较好的解决方法一是<a href="https://github.com/qier222/YesPlayMusic">yesplaymusic</a>，第二个就是<a href="https://github.com/go-musicfox/go-musicfox">go-musicfox</a></p>
<p>不过yesplaymusic尝试过三种登陆方式均无法登陆，遂只能使用go-musicfox</p>
<blockquote>
<p>go-musicfox是用Go写的又一款网易云音乐命令行客户端，支持UnblockNeteaseMusic、各种音质级别、lastfm、MPRIS、MacOS交互响应（睡眠暂停、蓝牙耳机连接断开响应、菜单栏控制等）&hellip;</p>
</blockquote>
<ol>
<li>使用<code>pacman -S go-musicfox</code>安装go-musicfox</li>
<li>输入<code>musicfox</code>进入tui</li>
<li>点击-<code>我的歌单</code>进行登陆</li>
</ol>
<h5 id="31-无法播放">3.1 无法播放</h5>
<p>如果你很幸运，能直接播放，可以忽略这一步</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S pulseaudio-alsa libavtp
</span></span></code></pre></div><p>安装缺少的两个包就可以播放了</p>
<h5 id="32-快捷键">3.2 快捷键</h5>
<table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>←</code>  <code>h</code></td>
<td>左方向</td>
</tr>
<tr>
<td><code>→</code> <code>l</code></td>
<td>右方向</td>
</tr>
<tr>
<td><code>↑</code> <code>k</code></td>
<td>上方向</td>
</tr>
<tr>
<td><code>↓</code> <code>j</code></td>
<td>下方向</td>
</tr>
<tr>
<td><code>-</code> <code>滚轮下</code></td>
<td>减小音量</td>
</tr>
<tr>
<td><code>=</code> <code>滚轮上</code></td>
<td>增大音量</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出</td>
</tr>
<tr>
<td><code>Space</code> (空格)</td>
<td>暂停/播放</td>
</tr>
</tbody>
</table>
<p>更多快捷键请看<a href="https://github.com/go-musicfox/go-musicfox">README</a></p>
<h3 id="bash">Bash</h3>
<p>这次安装我离开了Zsh，重新回到了Bash的怀抱，但默认的Prompt太丑了，只显示最后一级路径，于是<del>抄</del>参考<a href="https://gitweb.gentoo.org/repo/gentoo.git/tree/app-shells/bash/files/bashrc/">Gentoo</a>的<code>.bashrc</code>，重新配置了下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-.bashrc" data-lang=".bashrc"><span style="display:flex;"><span><span style="color:#75715e"># /etc/bash/bashrc</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This file is sourced by all *interactive* bash shells on startup,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># including some apparently interactive shells such as scp and rcp</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># that can&#39;t tolerate any output.  So make sure this doesn&#39;t display</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># anything or bad things will happen!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Test for an interactive shell.  There is no need to set anything</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># past this point for scp and rcp, and it&#39;s important to refrain from</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># outputting anything in those cases.</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $- !<span style="color:#f92672">=</span> *i* <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Shell is non-interactive.  Be done now!</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Bash won&#39;t get SIGWINCH if another process is in the foreground.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable checkwinsize so that bash will check the terminal size when</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># it regains control.  #65623</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)</span>
</span></span><span style="display:flex;"><span>shopt -s checkwinsize
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable completion when the input buffer is empty.  i.e. Hitting tab</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and waiting a long time for bash to expand all of $PATH.</span>
</span></span><span style="display:flex;"><span>shopt -s no_empty_cmd_completion
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable history appending instead of overwriting when exiting.  #139609</span>
</span></span><span style="display:flex;"><span>shopt -s histappend
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Save each command to the history file as it&#39;s executed.  #517342</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This does mean sessions get interleaved when reading later on, but this</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># way the history is always up to date.  History is not synced across live</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sessions though; that is what `history -n` does.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disabled by default due to concerns related to system recovery when $HOME</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># is under duress, or lives somewhere flaky (like NFS).  Constantly syncing</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the history will halt the shell prompt until it&#39;s finished.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#PROMPT_COMMAND=&#39;history -a&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change the window title of X terminals</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>TERM<span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>aEkx<span style="color:#f92672">]</span>term* | rxvt* | gnome* | konsole* | interix | tmux*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033]0;\u@\h:\w\007\]&#39;</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>screen*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033_\u@\h:\w\033\\\]&#39;</span>
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span>*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	unset PS1
</span></span><span style="display:flex;"><span>	;;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set colorful PS1 only on colorful terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dircolors --print-database uses its own built-in database</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># instead of using /etc/DIR_COLORS.  Try to use the external file</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># first to take advantage of user additions.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We run dircolors directly due to its changes in file syntax and</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># terminal name patching.</span>
</span></span><span style="display:flex;"><span>use_color<span style="color:#f92672">=</span>false
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> type -P dircolors &gt;/dev/null; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Enable colors for ls, etc.  Prefer ~/.dir_colors #64489</span>
</span></span><span style="display:flex;"><span>	LS_COLORS<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -f ~/.dir_colors <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b ~/.dir_colors<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[[</span> -f /etc/DIR_COLORS <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b /etc/DIR_COLORS<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Note: We always evaluate the LS_COLORS setting even when it&#39;s the</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># default.  If it isn&#39;t set, then `ls` will only colorize by default</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># based on file attributes and ignore extensions (even the compiled</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># in defaults of dircolors). #583814</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -n <span style="color:#e6db74">${</span>LS_COLORS:+set<span style="color:#e6db74">}</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		use_color<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># Delete it if it&#39;s empty as it&#39;s useless in that case.</span>
</span></span><span style="display:flex;"><span>		unset LS_COLORS
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Some systems (e.g. BSD &amp; embedded) don&#39;t typically come with</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># dircolors so we need to hardcode some terminals in here.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>TERM<span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">[</span>aEkx<span style="color:#f92672">]</span>term* | rxvt* | gnome* | konsole* | screen | tmux | cons25 | *color<span style="color:#f92672">)</span> use_color<span style="color:#f92672">=</span>true ;;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">${</span>use_color<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">${</span>EUID<span style="color:#e6db74">}</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\[\033[01;31m\]\h\[\033[01;34m\] \w \$\[\033[00m\] &#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>		PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] &#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#BSD#@export CLICOLOR=1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	alias ls<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls --color=auto&#39;</span>
</span></span><span style="display:flex;"><span>	alias grep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;grep --colour=auto&#39;</span>
</span></span><span style="display:flex;"><span>	alias la<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -A&#39;</span>
</span></span><span style="display:flex;"><span>	alias ll<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -alF&#39;</span>
</span></span><span style="display:flex;"><span>	alias l<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -CF&#39;</span>
</span></span><span style="display:flex;"><span>	alias n<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;neofetch&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># show root@ when we don&#39;t have colors</span>
</span></span><span style="display:flex;"><span>	PS1<span style="color:#f92672">+=</span><span style="color:#e6db74">&#39;\u@\h \w \$ &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> sh in /etc/bash/bashrc.d/*; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">[[</span> -r <span style="color:#e6db74">${</span>sh<span style="color:#e6db74">}</span> <span style="color:#f92672">]]</span> <span style="color:#f92672">&amp;&amp;</span> source <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>sh<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Try to keep environment pollution down, EPA loves us.</span>
</span></span><span style="display:flex;"><span>u
</span></span></code></pre></div><p>主要添加了别名，其他的可以自己修改</p>
<p>还有一个镰刀锤子配置也蛮好看的，但使用<code>↑</code>键查看历史命令时有Bug,不介意的可以用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-.bashrc" data-lang=".bashrc"><span style="display:flex;"><span> PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\e[1;32m\w\n\e[1;33m☭ \[</span><span style="color:#66d9ef">$(</span>tput sgr0<span style="color:#66d9ef">)</span><span style="color:#e6db74">\]&#34;</span>
</span></span></code></pre></div><p>配置来源 <a href="https://www.zhihu.com/question/19803678/answer/1001803388">你怎么设置终端 PS1 prompt</a></p>
<h4 id="sddm美化">SDDM美化</h4>
<p>我们更换壁纸后一般连同SDDM的背景一起换了，但设置里的SDDM主题管理实在是难用，经常打不开更换界面，推荐直接到主题目录下更换</p>
<ol>
<li>
<p>cd到需要配置的SDDM主题目录<code>/usr/share/sddm/themes/</code></p>
</li>
<li>
<p>进入主题文件夹，你会看见之前设置的背景(若有的话)，和两个配置文件，分别是预设配置<code>theme.conf</code>和用户配置<code>theme.conf.user</code></p>
</li>
<li>
<p>编辑用户配置<code>theme.conf.user</code>，找到<code>background=100857791_p113767970.png</code>这一行，可以看到目前我的背景为<code>100857791_p113767970.png</code></p>
</li>
<li>
<p>将要设置的背景移入主题文件夹，将<code>background=</code>后的文件名改为要设置的文件名</p>
</li>
<li>
<p>重启即可</p>
</li>
</ol>
<h2 id="内核编译">内核编译</h2>
<p>Arch下的内核编译只需要安装两个包即可</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S bc inetutils
</span></span></code></pre></div><p># inetutils提供hostsname</p>
<p>到这里Arch的配置也基本完成了，我也可以睡个好觉了&hellip;</p>
<p>再插一嘴，uu们有好的图床或对象储存推荐吗，博客老没图片也不行，最好能便宜点</p>
<h2 id="参考引用">参考|引用</h2>
<ul>
<li><a href="https://blog.ticks.cc/">ticks blog</a> 原文链接失效</li>
</ul>
<ul>
<li>
<p><a href="https://en.wikipedia.org/">Wikipedia</a></p>
</li>
<li>
<p><a href="https://wiki.archlinuxcn.org/wiki/KDE">KDE</a></p>
</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/LazyVim/LazyVim?tab=readme-ov-file#%EF%B8%8F-requirements">LazyVim</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>将你的博客部署到雨云</title>
      <link>https://blog.sorgdream.com/posts/winter/</link>
      <pubDate>Fri, 17 Nov 2023 18:48:10 +0800</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/winter/</guid>
      <description><![CDATA[<h2 id="近况">近况</h2>
<p>期中考刚考完，我也难得有时间静下心来写博客，虽然文笔不太好就是了</p>
<p>这个星期，广州跳过了秋天，直接来到了冬天，也可以说广州根本就没有春天和秋天</p>
<p>看了<a href="https://arch-linux.osrc.com/">archlinux 简明指南</a>的教程，在虚拟机试了一次后为我的物理机安装上了Arch,不得不说，aur是真的好使，很多包都能在上面找到</p>
<p>每日一滚</p>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo pacman -Syu
</code></pre><p>最近半价买了一个月雨云的云服务器，学了下Nginx，把我的博客迁移到了上面</p>
<h2 id="nginx">Nginx</h2>
<p>原本想再水一篇，但想着也没什么好写的，就合并在一起</p>
<p>在你喜欢的目录创建用于存放博客的文件夹，将博客仓库<strong>git</strong>下来</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name test.inuya.ltd;
    root /home/blog;
    location / {
    }
}
</code></pre><p>跟之前一样，在服务器<code>/etc/nginx/conf.d</code>目录下创建<code>test.inuya.ltd.conf</code>配置文件，写入以上内容，这里我用二级域名<code>test.inuya.ltd</code>演示</p>
<p>在域名提供商添加<code>A类型</code>解析，填入你的IP，使用<code>http://test.inuya.ltd</code>即可访问博客</p>
<h2 id="https">https</h2>
<p>配置完，会有一个问题，就是无法通过https访问，现在很多博客的友联已经不再添加没有https的博客了</p>
<h3 id="ssl证书">ssl证书</h3>
<p><del>阿里云现有免费的一年ssl证书可以申请</del></p>
<p>阿里云证书现只有三个月有效期，遂更换cerbot自动续费</p>
<ol>
<li>在你的debian或基于debian的发行版上安装snap</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo apt install snapd
</code></pre><ol start="2">
<li>安装cerbot snap包</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo snap install --classic certbot
</code></pre><ol start="3">
<li>准备 Certbot 命令</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo ln -s /snap 
</code></pre><ol start="4">
<li>获取证书，这里选择手动配置</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo certbot certonly --nginx
</code></pre><ol start="5">
<li>测试下自动续费</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">sudo certbot renew --dry-run
</code></pre><p>证书应位于<code>/etc/letsencrypt/live</code>在Nginx中填入即可</p>
<p>其他发行版也可参考<a href="https://certbot.eff.org/instructions?">certbot instructions</a>，选择对应的发行版即可</p>
<h3 id="配置">配置</h3>
<p>在原本的<code>test.inuya.ltd.conf</code>的配置中添加以下内容</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 443 ssl;
    #配置HTTPS监听端口443。
    server_name test.inuya.ltd; #将test.inuya.ltd换成证书绑定的域名
    root html;
    index index.html index.htm;
    ssl_certificate cert/test.inuya.ltd.pem;  #将test.inuya.ltd.pem换成自己的证书
    ssl_certificate_key cert/test.inuya.ltd.key; #将test.inuya.ltd换成自己的证书密钥
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    #表示使用的加密套件的类型。
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #表示使用的TLS协议的类型。
    ssl_prefer_server_ciphers on;
    location / {
        root /home/blog;  #站点目录。
        index index.html index.htm;
    }
}
</code></pre><p>使用<code>systemctl restart nginx</code>重启Nginx，尝试带https访问网址</p>
<h3 id="重定向">重定向</h3>
<p>如果想让所有的http访问都301重定向到https,可以在80端口的配置中添加一句<code>return 301 https://$server_name$request_uri;</code></p>
<p>就像这样</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name test.inuya.ltd;
    return 301 https://$server_name$request_uri;
    root /home/blog;
    location / {
    }
}
</code></pre><h2 id="主页">主页</h2>
<p>域名只解析博客太浪费了，于是搭建了我的主页</p>
<p>修改自<a href="https://github.com/noisky/Homepage">饭饭&rsquo;s Homepage 2.0</a></p>
<p>主页: <a href="https://inuya.ltd">https://inuya.ltd</a></p>
<h2 id="twikoo评论">Twikoo评论</h2>
<p>都有服务器了，还用什么valine,早就听闻twikoo配置方便，今天一用，相见恨晚</p>
<p>我是用的是docker部署，docker run时加上<code>--restart=always</code>设置自启</p>
<p>部署完后访问<code>http://&lt;ip&gt;:8080</code>，返回值如下</p>
<pre tabindex="0"><code>&#34;Twikoo 云函数运行正常，请参考 https://twikoo.js.org/frontend.html 完成前端的配置&#34;
</code></pre><h2 id="nginx反向代理">Nginx反向代理</h2>
<p>因该是这么叫吧</p>
<p>部署到服务器后，发现评论系统被拦截了，因为博客是https，但评论只有http,所以被拦截</p>
<p>到域名服务商新建一条<code>A记录</code>解析，填入你的IP</p>
<p>在<code>/etc/nginx/conf.d</code>新建配置文件</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name twikoo.inuya.ltd; # 设置的域名
    return 301 https://$server_name$request_uri; # 重定向至HTTPS
    location / {
    }
}
 
server {
    listen 443 ssl;
    server_name twikoo.inuya.ltd;
    ssl_certificate cert/twikoo.inuya.ltd.pem;  # 配置证书
    ssl_certificate_key cert/twikoo.inuya.ltd.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    # 表示使用的加密套件的类型。
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 表示使用的TLS协议的类型。
    ssl_prefer_server_ciphers on;
    location / {
        proxy_pass  http://localhost:8080; # 反向代理至8080端口
    }
}
</code></pre><p><code>systemctl restart nginx</code>重启Nginx，尝试使用域名访问</p>
<h2 id="cdn">CDN</h2>
<p>最近博客莫名延迟变高，甚至到了无法访问的地步，于是想着给博客套个CDN加速一下;正好雨云有免费的CDN可用</p>
<p>在雨云创建一个新的CDN,如购买了雨云的产品(云服务器/虚拟主机)可以免费使用。</p>
<p>创建完后复制生成的网址到域名注册商添加<code>CNAME</code>，这里为了方便直接使用<code>*.inuya.ltd</code>泛解析</p>
<h2 id="题外话">题外话</h2>
<p>博客第一次有人主动申请友链，还是蛮激动的</p>
<p>如果有急事可以用<code>inuya@foxmail.com</code>联系我，因为是腾讯的邮箱所以可以微信提醒，回复的比较及时</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://blog.csdn.net/qq_37960603/article/details/112371339">Nginx：Nginx添加SSL实现HTTPS访问</a></li>
<li><a href="https://blog.csdn.net/HD243608836/article/details/112861186">nginx开启ssl并把http重定向到https的两种方式</a></li>
<li><a href="https://blog.csdn.net/weixin_38312502/article/details/101780412">nuxt.js项目部署到linux服务器，并使用域名访问</a></li>
<li><a href="https://www.luxiyue.com/server/%e4%b8%aa%e4%ba%ba%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%8a%e9%83%a8%e7%bd%b2%e5%8d%9a%e5%ae%a2%e8%af%84%e8%ae%ba%e7%b3%bb%e7%bb%9f%ef%bc%9atwikoo/">个人服务器上部署博客评论系统：Twikoo</a></li>
<li><a href="https://blog.csdn.net/Hu_wen/article/details/110521804">Docker 容器设置自启动</a></li>
<li><a href="https://twikoo.js.org/">Twikoo文档</a></li>
<li><a href="https://certbot.eff.org/instructions?ws=nginx&amp;os=debianbuster">Certbot 说明</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>博客迁移至hugo</title>
      <link>https://blog.sorgdream.com/posts/hugo/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/hugo/</guid>
      <description><![CDATA[<p>前几天，因为一个主题，我把博客从hexo换成hugo，也就是现在看到的</p>
<h2 id="迁移">迁移</h2>
<p>hugo的操作比hexo要难，热门程度也不及hexo，所以遇到一些问题需要自己解决</p>
<h3 id="安装">安装</h3>
<ol>
<li>用<code>sudo apt install git</code>安装git</li>
<li>到<a href="https://go.dev/dl/">All releases</a>找到Linux下载go</li>
<li>用以下命令提取下载的archive</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz
</code></pre><ol start="4">
<li>编辑<code>/etc/profile</code>(系统范围安装)，添加环境变量</li>
</ol>
<pre tabindex="0"><code>export PATH=$PATH:/usr/local/go/bin
</code></pre><p>完成后使用<code>source /etc/profile</code>即可完成安装</p>
<ol start="5">
<li>
<p>使用<code>sudo apt install snapd</code>安装snap</p>
</li>
<li>
<p>使用<code>sudo snap install dart-sass</code>安装dart-sass</p>
</li>
<li>
<p>使用<code>sudo snap install hugo</code>安装hugo</p>
</li>
</ol>
<h3 id="建站">建站</h3>
<p>三连快速创建</p>
<pre tabindex="0"><code class="language-command" data-lang="command">hugo new site &lt;sitename&gt;
cd &lt;sitename&gt;
git init
</code></pre><p>这时候可以下载你喜欢的主题了，编辑<code>hugo.toml</code>，添加<code>theme = &quot;themename&quot;</code>指定主题</p>
<h3 id="基础">基础</h3>
<p>基础的指令和hexo差不多，不过原本的source变成了content，使用<code>hexo server</code>即可
<!-- raw HTML omitted -->如果提示<code>由于本地 development 环境的限制， 评论系统 , CDN 和 fingerprint 不会在 development 环境下启用。</code>，使用<code>hugo server -e production</code>更改环境即可</p>
<p>文章直接复制过来就能用，不过tags和categories的书写方式有点不同</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>tags: 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> tags1
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> tegs2
</span></span><span style="display:flex;"><span>categories:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> catrgories1
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-</span> categories2
</span></span></code></pre></div><h2 id="部署">部署</h2>
<p>hexo的部署很简单，<code>hexo g</code>生成页面<code>hexo d</code>部署，同样需要ssh key，而hugo需要手动push到repo</p>
<pre tabindex="0"><code class="language-command" data-lang="command">hugo # 生成页面
cd public
git init # 初始化仓库
git remote add origin &lt;repo link&gt;
git add .
git commit -m &#34;提交说明&#34;
git push -u origin master
</code></pre><p>这是访问域名，不出意外应该能看到你的博客</p>
<h2 id="命令">命令</h2>
<p>更新主题(FixIt)</p>
<pre tabindex="0"><code class="language-command" data-lang="command">git submodule update --remote --merge
</code></pre><h2 id="阿里云服务器">阿里云服务器</h2>
<p>因为依然部署在Github Page，所以访问还是有点慢，于是我打开阿里云，想看看有什么便宜的服务器，突然看到免费试用三个月，这种好事怎么能错过</p>
<h3 id="配置">配置</h3>
<ul>
<li>2核2GB或者2核4GB</li>
<li>每月280元额度，3个月试用时长</li>
</ul>
<p>这配置搭建博客可谓是绰绰有余</p>
<h2 id="主页导航页">主页(导航页)</h2>
<p>域名目前只解析了博客，闲着也是闲着，不如建一个导航页</p>
<h3 id="搭建">搭建</h3>
<p>使用了<a href="https://github.com/kaygb/KZHomePage">KZHomePage</a>的主页，稍微配置下还是很好看的</p>
<ol>
<li>将仓库git到你的服务器</li>
</ol>
<pre tabindex="0"><code class="language-command" data-lang="command">git clone https://github.com/kaygb/KZHomePage.git
</code></pre><ol start="2">
<li>在喜欢的地方新建一个用于存放主页的文件夹</li>
<li>使用<code>sudo apt install nginx</code>安装Nginx</li>
<li>使用<code>sudo systemctl enable nginx</code>设置开机自启</li>
<li>启动Nginx<code>sudo systemctl start nginx</code></li>
<li><code>sudo systemctl status nginx</code>查看Ngxin状态</li>
</ol>
<p>访问域名/IP，若出现<code>Welcome to Nginx</code>即为成功</p>
<h3 id="配置nginx">配置Nginx</h3>
<p>编写配置文件<code>sudo nvim /etc/nginx/conf.d/yoursite.com.conf</code></p>
<p>写入以下配置</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">server {
    listen 80;
    server_name yoursite.com;
    root path-to-blog-name;
    location / {
    }
}
</code></pre><p><code>80</code>为监听端口，<code>yoursite.com</code>为你的域名，<code>path-to-blog-name</code>为存放主页文件夹的位置</p>
<p>完成后使用<code>sudo systemctl restart nginx</code>重启Ngixn服务，访问域名查看是否生效</p>
<p>之后就简单多了，修改<code>index.html</code>，可以看作者写的<a href="https://www.kezez.com/archives/25.html">教程</a>无需重新启动，刷新即可</p>
<h3 id="博客">博客</h3>
<p>博客和主页差不多，将Github上的仓库git clone下载，再创建一个文件夹用于存放，一个配置文件，端口改成你想要的，别太离谱即可</p>
<p>完成后设置域名解析，直接解析到你的IP，博客可以添加隐性url转发到你的域名+端口</p>
<h2 id="总结">总结</h2>
<p>因为没有备案，所以只能通过IP访问网站，不得不说，阿里云的服务器是真的贵，终于明白未成年不能备案的原因了</p>
<h2 id="参考">参考</h2>
<ul>
<li>
<p><a href="https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#33-%E6%9C%8D%E5%8A%A1%E5%99%A8">基于hugo搭建博客并部署</a></p>
</li>
<li>
<p><a href="http://www.sulvblog.cn/posts/blog/hugo_deploy/">hugo博客部署到腾讯云轻量级服务器</a></p>
</li>
<li>
<p><a href="https://gohugo.io/">HUGO</a></p>
</li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>友链</title>
      <link>https://blog.sorgdream.com/friends/</link>
      <pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/friends/</guid>
      <description><![CDATA[<h2 id="朋友们随机排序">朋友们(随机排序)</h2>
<p><a href="https://blog.fufu.ink/">空想笔记</a> 简介: この世界に偶然なんてない、あるのは必然だけ</p>
<p><a href="https://blog.wyj5211.top/">wyj5211的小站</a> 简介: 折腾·学习无止境</p>
<p><a href="https://rong6.cn/">荣6的博客</a> 简介: 永远相信美好的事情即将发生！</p>
<p><a href="https://blog.saop.cc/">定の栈</a> 简介: LINK START!</p>
<p><a href="https://moexc.com">晓沉的小小博客</a> 简介: 追求梦想的脚步从未停止！</p>
<p><a href="https://kasuie.cc">KASUIEの次元</a> 简介: 喜欢温柔的人</p>
<p><a href="https://www.lolife.top/">Aurora’s blog</a> 简介: 热爱可抵岁月漫长</p>
<h2 id="博客信息">博客信息</h2>
<p>名称: sorgDream</p>
<p>链接: <a href="https://blog.sorgdream.com">https://blog.sorgdream.com</a></p>
<p>介绍: 相见时难别亦难，东风无力百花残</p>
<p>头像: <a href="https://blog.sorgdream.com/avatar.jpg">https://blog.sorgdream.com/avatar.jpg</a></p>
<h2 id="申请格式">申请格式</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>[<span style="color:#f92672">名称</span>](<span style="color:#a6e22e">链接</span>) 简介: 博客简介
</span></span></code></pre></div><p>请将博客信息发送至<a href="mailto:inuyasha-660@outlook.com">inuyasha-660@outlook.com</a></p>
<p>定期清理失效友链，链接更新请联系</p>
<p>不添加非博客类型的网站</p>
<p>申请前请先将本站添加至友链</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Icarus主题下的配置</title>
      <link>https://blog.sorgdream.com/posts/upyun/</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/upyun/</guid>
      <description><![CDATA[<h2 id="题外话">题外话</h2>
<p>久违地打开了VScode写起了文章，不得不说，用VScode来写MarkDown是真的方便，装个插件就可以预览了</p>
<h2 id="icarus主题">Icarus主题</h2>
<p><strong>回到正题</strong></p>
<p>因为Keep老出问题，于是，在几天前，我将主题更换为BUtterfly，可配置的选项非常多，整体美观度也非常不错；看似一切都很完美，<del>那就没有这篇文章了</del></p>
<p>可是有一个缺点，就是加载的速度太慢了，除了必要的头像等，已经尽力让网站不出现图片，但首次加载仍需2～5秒的时间，如果刚好网不好，那就至少得8秒以上了。</p>
<blockquote>
<p>其实早在几天前，我就开始申请又拍云联盟了，但因为网站访问时间太长，审核误认为无法访问给拒了</p>
</blockquote>
<p>办法当然有，最好的方法就是换主题，前一段时候用的next主题就不错，黑白色调，除了图片其他的都不用怎么加载</p>
<p>于是我<del>又</del>换主题了，这次是有6K star的Icarus主题，整体看着也很不错，也没什么图片需要加载的</p>
<h2 id="又拍云联盟">又拍云联盟</h2>
<p>光换主题还不行，还得上魔法，因为我的博客部署在Github，所以访问比较慢，于是我打算给我的博客套个CDN</p>
<blockquote>
<p>CDN是什么</p>
<p>简单来说就是把我的文章分散在各个节点，如果你在广州，就可以直接访问广州CDN上的缓存资源，就不用跨越半个地球去Github的服务器上找了</p>
</blockquote>
<p>你可能注意到了页脚处添加了<code>本网站由又拍云提供CDN加速/云储存服务</code>这是因为我加入了又拍云联盟；那么加入又拍云联盟又什么好处呢</p>
<blockquote>
<p>免费获取每月 10GB 存储空间 + 15GB 流量</p>
</blockquote>
<p>15GB流量对于我这种小型的博客完全够用了，而且10GB的云存储刚好可以用来作图床，这下所有的问题都解决了&mdash;&ndash;吗？</p>
<h3 id="加入又拍云联盟">加入又拍云联盟</h3>
<p>想要白嫖首先得在网站的下方添加又拍云的标记和链接(本教程基于Icarus，可能不适用于您的主题)</p>
<ol>
<li>首先找到<code>~/hexo/themes/icarus/layout/common/footer.jsx</code>其他主题的大概在这个目录或者上级目录<code>layout</code>中，用<code>vim footer.jsx</code>编辑它</li>
<li>仿照格式，添加上又拍云的文字</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span> &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral&#34;</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noopener&#34;</span>&gt;<span style="color:#a6e22e">本网站由</span>&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/images/upyun.png&#34;</span> <span style="color:#a6e22e">alt</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;logo&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{{<span style="color:#a6e22e">width</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;50px&#39;</span>,<span style="color:#a6e22e">height</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;25px&#39;</span>}}/&gt;<span style="color:#a6e22e">提供CDN加速</span><span style="color:#f92672">/</span><span style="color:#a6e22e">云储存服务</span>&lt;/<span style="color:#f92672">a</span>&gt;
</span></span></code></pre></div><p>其中<code>https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referra</code>为又拍云提供的链接，<code>src=&quot;/images/upyun.png&quot;</code>为logo的路径</p>
<h4 id="icp备案">ICP备案</h4>
<p>Icarus默认是没有ICP备案填写的配置的，我们可以仿照添加一个ICP</p>
<p>同样的文件，添加上</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span> &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://icp.gov.moe/?keyword=20230439&#34;</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noreferrer noopener&#34;</span>&gt;<span style="color:#a6e22e">萌ICP备20230439号</span>&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>                                &lt;<span style="color:#f92672">span</span>&gt;<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">nbsp</span>; <span style="color:#f92672">||</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">nbsp</span>;&lt;/<span style="color:#f92672">span</span>&gt;
</span></span></code></pre></div><p>其中添加上<code>&lt;span&gt;&amp;nbsp; || &amp;nbsp;&lt;/span&gt;</code>可于网站访问人数一同显示，中间用<code>||</code>隔开</p>
<p>完成后填写号信息点击申请，1-3个工作日内会回复，但我的域名没备案，所以CDN用不了，图床给的测试域名也不知道什么时候会失效</p>
<h2 id="又一题外话">又一题外话</h2>
<p>真的很喜欢写题外话</p>
<h3 id="友链">友链</h3>
<p>Icarus的友链在侧边栏，这点和Next很像，同样的，一多就很难管理</p>
<p>我单独创建了一个友链页来展示我的朋友们(再插一嘴，空想笔记的站长去备案了，暂时访问不了)</p>
<p>用<code>hexo new page link</code>创建一个友链页面</p>
<p>原本想看下又没有好的解决方案，但找到的都没用，最后只能自己折腾一个了。</p>
<p>想要<a href="https://www.imaegoo.com/friends/">imaegoo</a>大佬的友链页</p>
<p>在<code>source/link/index.md</code>填入以下内容生成一组(两个)友链</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;columns&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;column is-half&#34;</span>&gt;
</span></span><span style="display:flex;"><span>     &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;box&#34;</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noopener&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;博客链接&#34;</span>&gt;博客名称&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>          &lt;<span style="color:#f92672">br</span>&gt;
</span></span><span style="display:flex;"><span>           博客简介
</span></span><span style="display:flex;"><span>       &lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;column is-half&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;box&#34;</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noopener&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;博客链接&#34;</span>&gt;博客名称&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>          &lt;<span style="color:#f92672">br</span>&gt;
</span></span><span style="display:flex;"><span>           博客简介
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>其中，每一个<code>&lt;div class=&quot;column is-half&quot;&gt;</code>就是一个友链，<code>&lt;div class=&quot;columns&quot;&gt;</code>范围内<code>&lt;div class=&quot;column is-half&quot;&gt;</code>的个数，就是一行显示的个数</p>
<p>作者这里写了两个，一行就显示两个友链，手机等屏幕较小的就显示一个</p>
<h4 id="简介超出字数省略">简介超出字数省略</h4>
<p>如果你的友链简介过长，就会出现一个友链占用过多空间导致布局不美观；在书写友链前添加以下css即可解决</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#f92672">style</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">box</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">overflow</span>: <span style="color:#66d9ef">hidden</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">text-overflow</span>: <span style="color:#66d9ef">ellipsis</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">white-space</span>: <span style="color:#66d9ef">nowrap</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/</span><span style="color:#f92672">style</span><span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><h3 id="评论">评论</h3>
<p>之前Keep用的是Giscus评论系统，感觉还不错，最重要的是有两条全站唯一的评论在</p>
<p>但Icarus不支持Giscus，需要手动修改comment.jsx</p>
<p>还是同样的<code>~/hexo/themes/icarus/layout/common</code>目录，找到<strong>comment.jsx</strong></p>
<p>在<code>&lt;h3 class=&quot;title is-5&quot;&gt;{__('article.comments')}&lt;/h3&gt;</code></p>
<p>和<code>{(() =&gt; {</code>中填入Giscus生成的代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">logger</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;hexo-log&#39;</span>)();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">Component</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;inferno&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">view</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;hexo-component-inferno/lib/core/view&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">class</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Component</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">render</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">config</span>, <span style="color:#a6e22e">page</span>, <span style="color:#a6e22e">helper</span> } <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">__</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">helper</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">comment</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">config</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">comment</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">comment</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;card&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;card-content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">h3</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;title is-5&#34;</span>&gt;{<span style="color:#a6e22e">__</span>(<span style="color:#e6db74">&#39;article.comments&#39;</span>)}&lt;/<span style="color:#f92672">h3</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>               &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://giscus.app/client.js&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">repo</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[在此输入仓库]&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">repo</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[在此输入仓库 ID]&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">category</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[在此输入分类名]&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">category</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[在此输入分类 ID]&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">mapping</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;pathname&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">strict</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">reactions</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">enabled</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">emit</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">metadata</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">input</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">position</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;bottom&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">theme</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;preferred_color_scheme&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">data</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;zh-CN&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">crossorigin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;anonymous&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">+</span>                                <span style="color:#a6e22e">async</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>               &lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                {(() =&gt; {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">Comment</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">view</span>.<span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;comment/&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">comment</span>.<span style="color:#a6e22e">type</span>);
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">Comment</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Comment</span>.<span style="color:#a6e22e">Cacheable</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">Comment</span>.<span style="color:#a6e22e">Cacheable</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">Comment</span>;
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">return</span> &lt;<span style="color:#f92672">Comment</span> <span style="color:#a6e22e">config</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">config</span>} <span style="color:#a6e22e">page</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">page</span>} <span style="color:#a6e22e">helper</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">helper</span>} <span style="color:#a6e22e">comment</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">comment</span>} /&gt;;
</span></span><span style="display:flex;"><span>                    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">w</span>(<span style="color:#e6db74">`Icarus cannot load comment &#34;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">comment</span>.<span style="color:#a6e22e">type</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;`</span>);
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                })()}
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>添加完后，使用<code>hexo s --debug</code>本地预览，看是否出现评论框</p>
<p>这里又有一个问题，因为Icarus不支持Giscus，所以在<code>_config.icarus.yml</code>中，如果填入Giscus或者其他评论系统，生成界面和本地预览时都会出现warning，但不影响生成和预览</p>
<h3 id="添加valine评论">添加Valine评论</h3>
<p>用了一天的Utterances，发现不登陆就看不到评论；反正评论也没了，不如选个更好的评论系统，最终选择了Valine</p>
<blockquote>
<p>不用Waline的原因很简单，Vercel部署的时候提示我账号被锁了，懒得搞Gitlab，发邮件也没回我，无奈选用Valine</p>
</blockquote>
<p>因为Icarus支持Valine，所以只需要填写配置即可，无需再修改comment.jsx</p>
<h4 id="learncloud">LearnCloud</h4>
<ol>
<li><a href="https://leancloud.cn/dashboard/login.html#/signin">登陆</a>或<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a>一个LearnCloud账号，进入<a href="https://leancloud.cn/dashboard/applist.html#/apps">控制台</a>创建一个应用，随便取一个名字，选择开发版</li>
<li>找到设置/应用凭证，复制你的<code>AppID</code>和<code>AppKey</code></li>
<li>转到主题配置文件<code>_config.icarus.yml</code>，在comment写入以下内容</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">comment</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">valine</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app_id</span>: <span style="color:#ae81ff">xxxxxxxxxxx-xxxxx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app_key</span>: <span style="color:#ae81ff">xxxxxxxxxxxxxxxxxxxxxx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">placeholder</span>: <span style="color:#e6db74">&#34;&#34;</span>                 <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">avatar</span>: <span style="color:#ae81ff">mm                     </span> <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">avatar_force</span>: <span style="color:#66d9ef">false</span>             <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">meta</span>: [<span style="color:#e6db74">&#34;nick&#34;</span>, <span style="color:#e6db74">&#34;mail&#34;</span>, <span style="color:#e6db74">&#34;link&#34;</span>]  <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">page_size</span>: <span style="color:#ae81ff">10</span>                   <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">lang</span>: <span style="color:#ae81ff">zh-CN                    </span> <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">visitor</span>: <span style="color:#66d9ef">false</span>                  <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">highlight</span>: <span style="color:#66d9ef">true</span>                 <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">record_ip</span>: <span style="color:#66d9ef">false</span>                <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server_urls</span>:                    <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">emoji_cdn</span>:                      <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">emoji_maps</span>:                     <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enable_qq</span>: <span style="color:#66d9ef">false</span>                <span style="color:#75715e"># 可选填</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">required_fields</span>: []             <span style="color:#75715e"># 可选填</span>
</span></span></code></pre></div><p>具体每个配置是什么意思请看<a href="https://valine.js.org/configuration.html">Valine文档</a></p>
<h4 id="坑1">坑1</h4>
<p>因为us.avoscloud.com域名失效，如果不填写<code>serverURLs</code>，就会导致<code>net::ERR_CONNECTION_CLOSED</code>这个错误</p>
<p>解决方法很简单，只需设置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">server_urls</span>: <span style="color:#ae81ff">https://xxxxxxxx.api.lncldglobal.com</span> <span style="color:#75715e"># 把xxxxxxxx替换成你自己AppID的前8位字符</span>
</span></span></code></pre></div><p>重新hexo三联即可评论</p>
<h4 id="坑2">坑2</h4>
<blockquote>
<p>为履行合规责任，降低平台风险， LeanCloud 国际版共享域名将于 2022 年 8 月 1 日起不再向中国大陆的最终用户提供服务，国际版共享域名仅服务于海外用户。</p>
</blockquote>
<p>因为这个原因，解决完坑1后国内用户如果要评论只能挂代理，国内网路也看不到别人的评论，需要我们绑定自己的域名</p>
<ol>
<li>打开<code>设置/域名绑定</code>，输入你想绑定的二级域名</li>
<li>转到你购买域名的地方，添加一个CNAME解析，值为绑定时生成的值</li>
<li>等待DNS刷新，完成绑定</li>
<li>将上面的<code>server_urls: </code>设置为绑定的域名</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">server_urls</span>: <span style="color:#ae81ff">https://xxxx.example.xxx</span>
</span></span></code></pre></div><p>注意不要漏了<code>https://</code></p>
<h2 id="参考">参考</h2>
<ul>
<li>
<p><a href="https://www.imaegoo.com/2022/dec-27/">博客主题源码和配置文件
</a></p>
</li>
<li>
<p><a href="https://github.com/ppoffice/hexo-theme-icarus/issues/1207">能否支持一下 giscus 评论 #1207</a></p>
</li>
<li>
<p><a href="https://ppoffice.github.io/hexo-theme-icarus/Plugins/Comment/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/#Valine">Icarus用户指南 - 用户评论插件</a></p>
</li>
<li>
<p><a href="https://github.com/xCss/Valine/issues/423">无法正常发送评论 #423</a></p>
</li>
<li>
<p><a href="https://blog.yidaozhan.top/2022/07/19/valine-block-china-fix/">LeanCloud 更改用户条款后，Valine 在中国大陆不能评论的解决办法</a></p>
</li>
<li>
<p><a href="https://valine.js.org/">Valine</a></p>
</li>
</ul>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Next主题进阶配置</title>
      <link>https://blog.sorgdream.com/posts/next/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/next/</guid>
      <description><![CDATA[<p>最近比较忙，一方面刚开学，另一方面是因为butterfly加载速度太慢，转向next主题，很多东西需要重新配置；这篇文章与其说是教程，不如说是一篇记录</p>
<h2 id="next主题">Next主题</h2>
<blockquote>
<p>🎉 Elegant and powerful theme for Hexo.</p>
</blockquote>
<p>一个黑白为主色调的主题，很多人使用，却没有一个完整的中文教程；你能在Github上搜到三个next</p>
<ul>
<li><a href="https://github.com/next-theme/hexo-theme-next">hexo-theme/hexo-theme-next</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next">theme-hexo/hexo-theme-next</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next">iissnan</a></li>
</ul>
<p>我推荐使用第一个，也就是<strong>hexo-theme/hex-theme-next</strong> 因为讨论的人多，版本也是最新的
<!-- raw HTML omitted -->目前next还没有一个统一的教程，网上也有三篇不同的教程</p>
<ul>
<li><a href="https://hexo-next.readthedocs.io/zh_CN/latest/">Hexo-Next</a>优点是支持中文，比较完善，缺点是没有官方内容多</li>
<li><a href="http://theme-next.iissnan.com/">Next使用文档</a>同样支持中文，但是覆盖和内容没有上一个全</li>
<li><a href="https://theme-next.js.org/">Next</a>应该是官方文档，覆盖最全，但不支持中文</li>
</ul>
<p>以上三个文档建议第一和第三混合看，第二个因为有点过时可以不看</p>
<h3 id="评论">评论</h3>
<p>一个好的博客必定不能缺少评论系统，目前有许多解决方案可供选择，但我认为最方便，快捷的还是<a href="https://utteranc.es/">utterances</a></p>
<h4 id="utterances">utterances</h4>
<blockquote>
<p>A lightweight comments widget built on GitHub issues.</p>
</blockquote>
<ul>
<li>以下以utt来代替utterances</li>
</ul>
<p>作者尝试在butterfly主题中使用valine，但最终以失败告终，尝试gitalk同样因token被墙而失败，最后发现了这个宝藏评论系统</p>
<ol>
<li>要使用utt，我们首先要创建一个仓库，必须要是公开的，然后我们需要安装<a href="https://github.com/apps/utterances"> utterances app</a>到我们的仓库</li>
<li>然后到了选择Blog Post ↔️ Issue Mapping 推荐<strong>Issue title contains page title</strong> 不容易混淆</li>
<li>最后编辑Next的<code>_config.yml</code>中的<strong>utterances</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">utterances</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">enable</span>: <span style="color:#66d9ef">true</span>   <span style="color:#75715e">#将false改为true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">user-name/repo-name</span> <span style="color:#75715e"># 填入自己的仓库</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Available values: pathname | url | title | og:title</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">issue_term</span>: <span style="color:#ae81ff">title </span> <span style="color:#75715e">#设置为title</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">theme</span>: <span style="color:#ae81ff">github-light</span>
</span></span></code></pre></div><p>完成后，使用<code>hexo s --debug</code>本地预览博客，看是否出现评论框</p>
<h3 id="文章关闭评论">文章关闭评论</h3>
<p>设置完后默认会在所有page开启评论，如果想关闭分类或关于里的评论，可以在index.md中设定<code>comments: false</code>即可关闭</p>
<h3 id="友链">友链</h3>
<p>Next主题自带的友链位于侧边栏，但人数一旦多起来便会拥挤不堪，于是参考<a href="https://blog.fufu.ink/2023/05/improvefdlinks.html#waline">浮生若梦</a>的教程 <del>在他的基础上删去了过期和推荐</del> 大佬更新了配置，现在可以直接从yml读取配置</p>
<blockquote>
<p>又更新了
之前要看 html 代码、改源代码，太麻烦了。
仿照 butterfly 的友链书写方式做成变量都从 yml 中读取了</p>
</blockquote>
<ol>
<li>首先在你<code>Next文件夹/layout</code>中创建一个名为<code>links.njk</code>的文件，写入以下内容</li>
</ol>
<pre tabindex="0"><code class="language-njk" data-lang="njk">    {##################}
    {### LINKS BLOCK ###}
    {##################}

&lt;style&gt;
    @media (min-width: 768px) {
        .link-card {
            width: 50%;
            float: left;
        }
    }
    .link-card{
        position: relative;
        min-height: 1px;
        padding-right: 15px;
        padding-left: 15px;
        box-sizing: border-box;
    }
    .link-user-list{
        margin-bottom: 5px;
        border-radius: 3px;
        padding: 15px;
        display: block;
        box-shadow: 0 2px 6px rgba(0,0,0,.1);
        position: relative;
    }
    .link-user-list:hover{
        background-color: #f6f8f8;
        text-decoration: none;
    }
    #link-container a{
        border: none;
    }
    .user-avatar img{
        border: 2px solid #fff;
        height: auto;
        vertical-align: middle;
        width: 100%;
        border-radius: 20%;
        max-width: 100%!important;
        margin: 0px !important;
    }
    .clearfix:after{
        content: &#39; &#39;; 
        display: block; 
        height: 0; 
        clear: both; 
        visibility: hidden;
    }
    .text-ellipsis{
        display: block;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        font-size: 13px;
    }
    .user-message{
        display: block;
        overflow: hidden;
    }
    .user-description{
        color: #a0a0a0;
    }
    .user-avatar{
        display: inline-block;
        width: 52px;
        height: auto;
        float: left !important;
        margin-right: 15px;
        position: relative;
        white-space: nowrap;
    }
&lt;/style&gt;
&lt;div id=&#34;link-container&#34;&gt;
    {% for link_config in site.data.links %}
    {% if link_config.class_name %}
    &lt;h2 id=&#34;{{ link_config.class_name }}&#34;&gt;
        &lt;a href=&#34;#{{ link_config.class_name }}&#34; class=&#34;headerlink&#34; title=&#34;{{ link_config.class_name }}&#34; data-pjax-state&gt;&lt;/a&gt;
        {{ link_config.class_name }}
    &lt;/h2&gt;
    {% else %}
    &lt;hr&gt;
    {% endif %}
    &lt;div class=&#34;clearfix&#34;&gt;
    {% for link in link_config.link_list %}
    &lt;div class=&#34;link-card&#34;&gt;
        &lt;a href=&#34;{{ link.site }}&#34; target=&#34;_blank&#34; class=&#34;link-user-list&#34;&gt;
            &lt;span class=&#34;user-avatar&#34;&gt;
                &lt;img src=&#34;{{ link.avatar }}&#34; class=&#34;nofancybox&#34;&gt;
            &lt;/span&gt;
            &lt;span class=&#34;user-message&#34;&gt;
                &lt;span class=&#34;text-ellipsis&#34;&gt;{{ link.nickname }}&lt;/span&gt;
                &lt;span class=&#34;user-description text-ellipsis&#34;&gt;{{ link.info }}&lt;/span&gt;
            &lt;/span&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    {% endfor %}
    &lt;/div&gt;
    {% endfor %}

    &lt;div&gt;
    {{ page.content }}
    &lt;/div&gt;
&lt;/div&gt;
    {######################}
    {### END LINKS BLOCK ###}
    {######################}
</code></pre><p>然后再打开<code>Next文件夹/layout/page.njk</code> ，在<code>block title</code>区域中的<code>{{- __('title.schedule') + page_title_suffix }}</code>后面添加上两行</p>
<pre tabindex="0"><code class="language-njk" data-lang="njk">{% block title %}
  {%- set page_title_suffix = &#39; | &#39; + title %}

  {%- if page.type === &#39;categories&#39; and not page.title %}
    {{- __(&#39;title.category&#39;) + page_title_suffix }}
  {%- elif page.type === &#39;tags&#39; and not page.title %}
    {{- __(&#39;title.tag&#39;) + page_title_suffix }}
  {%- elif page.type === &#39;schedule&#39; and not page.title %}
    {{- __(&#39;title.schedule&#39;) + page_title_suffix }}
+  {%- elif page.type === &#39;links&#39; and not page.title %}
+    {{- __(&#39;title.links&#39;) + page_title_suffix }}
  {%- else %}
    {{- page.title + page_title_suffix }}
  {%- endif %}
{% endblock %}
</code></pre><p>接下来在下面的<code>PAGE BODY</code>中添加</p>
<pre tabindex="0"><code class="language-njk" data-lang="njk">{### PAGE BODY ###}
      {#################}
      &lt;div class=&#34;post-body{% if page.direction and page.direction.toLowerCase() === &#39;rtl&#39; %} rtl{% endif %}&#34;&gt;
        {%- if page.type === &#39;tags&#39; %}
          {%- include &#39;_partials/page/tags.njk&#39; -%}
        {% elif page.type === &#39;categories&#39; %}
          {%- include &#39;_partials/page/categories.njk&#39; -%}
        {% elif page.type === &#39;schedule&#39; %}
          {%- include &#39;_partials/page/schedule.njk&#39; -%}
+        {% elif page.type === &#39;links&#39; %}
+          {%- include &#39;links.njk&#39; -%}
        {% else %}
          {{ page.content }}
        {%- endif %}
      &lt;/div&gt;
      {#####################}
      {### END PAGE BODY ###}
      {#####################}
</code></pre><p>接下来和创建tags、about页一样，使用<code>hexo new page links</code>创建一个新页面，修改<code>index.md</code>添加申请信息和其他你想写在友链里的，设置type为links</p>
<p>最后在<code>hexo/source/</code>创建一个目录<code>_data</code>，里面再创建一个<code>links.yml</code>文件并填入以下内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># 参数说明</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># class_name 选填，可以理解为友链组的名字，如果不填则会在顶部生成一个分割线</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># nickname 博客名称</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># site 博客地址</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># info 博客简介</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># avatar 博客logo</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 填写时注意缩进！</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">class_name</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">link_list</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">nickname</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">site</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">avatar</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">nickname</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">site</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">avatar</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">class_name</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">link_list</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">nickname</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">site</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">avatar</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">nickname</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">site</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">avatar</span>:
</span></span></code></pre></div><p>然后找到<strong>Menu</strong>区域，按照格式增加一个友链页面；完成后找到<code>languages/zh-CN.yml</code>，在Menu区域中添加友链的汉化</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">links</span>: <span style="color:#ae81ff">友链</span>
</span></span></code></pre></div><p>即可完成配置，以后想增加友链只需要在<code>_config.yml</code>中增添信息即可</p>
<h3 id="随笔">随笔</h3>
<p>有时我们可能想说点什么，但太短了成不了文章，于是我打算创建一个随笔页，专门记录短篇的文章</p>
<ol>
<li>使用<code>hexo new page essay</code>创建一个随笔页</li>
<li>修改<code>source/essay/index.md</code>里的内容，修改标题并添加上<code>type: essay</code></li>
<li>在主题配置文件中的<strong>Menu</strong>区域添加上随笔页</li>
<li>在<code>languages/zh-CN.yml</code>中添加友链的翻译即可</li>
</ol>
<p>之后我们就可以在index.md中写文章了，但是看空想大佬的说说比我要好看，大佬没公布教程，我也没敢直接要，只能用折中的办法了</p>
<h2 id="域名绑定">域名绑定</h2>
<p>因为.xyz续费太贵，本身对这个域名也不是很满意，于是，一天前，我重新注册了一个新的域名<code>inuya.ltd</code>，并将他与我的博客绑定</p>
<ol>
<li>要绑定域名，我们首先设置一个CNAME解析，将它指向原本的博客链接，再设置一个AAAA，通过<code>ping username.github.io</code>获取ipv6地址</li>
<li>然后在你博客的<code>source</code>目录创建一个名为<code>CNAME</code>的文件，填入你的域名</li>
<li>在你的设置中找到page/Custom domain，填入你的域名，点击save即可</li>
</ol>
<p>设置完后使用原本的username.github.io会重定向到你的网站；尝试用你的域名访问，看能否访问成功</p>
<h2 id="google收录">Google收录</h2>
<p>因为next的配置里带有收录的配置，所以我们只要选择HTML标记
<!-- raw HTML omitted -->将<code>content=</code>后面的内容复制到主题<code>_config.yml</code>中的<code>google_site_verification:</code></p>
<p>然后再使用<code>hexo clean &amp;&amp; hexo g</code> <code>hexo d</code>部署到Github即可完成验证，bing同理</p>
<h2 id="参考引用">参考|引用</h2>
<ul>
<li><a href="https://blog.csdn.net/Mancuojie/article/details/119906071">【Hexo】域名绑定篇</a></li>
<li><a href="https://blog.fufu.ink/2023/05/improvefdlinks.html">空想笔记</a></li>
</ul>]]></description>
      
    </item>
    
    
    
    <item>
      <title>README</title>
      <link>https://blog.sorgdream.com/about/</link>
      <pubDate>Fri, 15 Sep 2023 22:16:42 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/about/</guid>
      <description><![CDATA[<h2 id="相见时难别亦难东风无力百花残">相见时难别亦难，东风无力百花残</h2>
<h2 id="博客信息">博客信息</h2>
<p>框架：<a href="https://gohugo.io/">Hugo</a></p>
<p>主题：<a href="https://github.com/hugo-fixit/FixIt">FixIt</a></p>
<p>若无特殊声明，本站均使用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC-BY-NC-SA</a>许可协议</p>
<h2 id="联系方式">联系方式</h2>
<p>酷安: <a href="http://www.coolapk.com/u/6770803">sorgDream</a></p>
<p>QQ: <a href="https://wpa.qq.com/msgrd?v=3&amp;uin=241910854&amp;site=qq&amp;menu=yes">241910854</a></p>
<p>网易云：<a href="https://music.163.com/#/user/home?id=3863686932">sorgDream</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>家庭网络优化</title>
      <link>https://blog.sorgdream.com/posts/ipv6/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/ipv6/</guid>
      <description><![CDATA[<h2 id="开启ipv6">开启IPV6</h2>
<p>上一篇文章用开发板搭建了alist，mc服务器，但没有公网ip，只能局域网下访问，我当然不能忍，这篇文章讲述我如何获取公网ipv6和踩的一些坑</p>
<h3 id="光猫配置">光猫配置</h3>
<p>首先进入光猫的后台，我的猫是华为的老东西了，用普通的账号<code>root</code>密码<code>admin</code>进是能进去，但是很多设置只能看，改不了，于是我查遍bing，终于找到了适合我的超级管理员密码，大家可以试试</p>
<pre tabindex="0"><code>账号:telecomadmin
密码:admintelecom
</code></pre><p>输入密码进入后台，找到<code>wan</code>设置，把路由器的wan改为<code>桥接</code>，并把<strong>ipv4</strong>改为<code>ipv4/ipv6</code>如果是灰色的不能更改，请按下面的步骤设置，以chrome为例</p>
<p>在不能点击的ipv4设置上右键，点击<strong>检查</strong>，查看时候有<code>disable</code>属性，如果有的话，对准属性右键，点击<code>edit attribute</code>删除disable，不需要关闭，直接点击ipv4就应该能设置了<strong>需要注意的是，如果用普通账号登陆，比如上面的root，你是无法设置开启ipv6的，即使删去disable，点击应用后仍然是ipv4</strong></p>
<h3 id="路由器开启ipv6">路由器开启ipv6</h3>
<p>光猫设置完成了，现在你应该是没网的状态，别慌，登陆路由器后台，以小米路由器为例，点击<strong>常用设置-上网设置</strong>，开启ipv6,上网方式选择<strong>native</strong>，然后在上网设置里选择<strong>PPoE</strong>拨号上网，输入你的宽带帐号密码</p>
<p>这时候可能有小伙伴问，如果忘了怎么办呢？没关系，这里有两种解决办法</p>
<ol>
<li>以移动为例，关注微信公众号中国移动10086,直接找人工客户，把你办宽带用的电话给他，叫他帮你查</li>
<li>也可以用手机登陆小米路由器后台，点击右下角宽带账号信息即可查看</li>
</ol>
<p>输入正确的帐号密码，这下应该能成功连上网了，等一会，你会发现后台出现了ipv6的地址，访问ipv6测试如果成绩是10/10那么说明你就成功了(如果不行的话重启路由器和光猫试试)</p>
<h2 id="关闭防火墙">关闭防火墙</h2>
<p>得到公网ipv6之后，可能会有小伙伴发现在局域网内可以通过ipv6访问，但使用流量就不行，很大原因是你路由器有ipv6防火墙，拒绝外网访问，我们需要关闭才能从流量访问，</p>
<p>因为低端的小米路由器默认是没有关闭防火墙的开关的，所以我们需要ssh连接路由器进行手动配置</p>
<p>温馨提示：此教程可能不适用于较新的路由器，作者用的是红米AC2100</p>
<ol>
<li>首先登陆你路由器的后台，然后查看地址栏，找到<code>stok=xxxxxxxx</code>把<code>=</code>到<code>/</code>中间的复制下来</li>
<li>浏览器输入以下内容 &lt; stok &gt;换成你上面复制的内容，如果输出{&ldquo;code&rdquo;:0}那就是成功</li>
</ol>
<pre tabindex="0"><code class="language-url" data-lang="url">http://192.168.31.1/cgi-bin/luci/;stok=&lt;STOK&gt;/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20&#39;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg&#39;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B
</code></pre><ol start="3">
<li>浏览器进入，同样，&lt; STOK &gt;换成自己stok</li>
</ol>
<pre tabindex="0"><code class="language-url" data-lang="url">http://192.168.31.1/cgi-bin/luci/;stok=&lt;STOK&gt;/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20echo%20-e%20&#39;admin%5Cnadmin&#39;%20%7C%20passwd%20root%3B
</code></pre><ol start="4">
<li>
<p>完成后，使用<code>ssh root@192.168.31.1</code>连接路由器，密码为<code>admin</code> 看到大大的<code>ARE U ok</code>就代表成功了</p>
</li>
<li>
<p>因为openssh7.0以后的版本不再支持ssh-dss(DSA)算法，所以可能会报错，尝试使用以下命令连接</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ssh -oHostKeyAlgorithms<span style="color:#f92672">=</span>+ssh-rsa root@192.168.31.1
</span></span></code></pre></div><ol start="6">
<li>连上以后就好办了，使用<code>vi /etc/config/firewall</code>修改配置文件,修改config defaults改为</li>
</ol>
<pre tabindex="0"><code>config defaults
        option syn_flood &#39;0&#39;
        option input &#39;ACCEPT&#39;
        option output &#39;ACCEPT&#39;
        option forward &#39;ACCEPT&#39;
        option drop_invalid &#39;0&#39;
        option disable_ipv6 &#39;0&#39;
</code></pre><ol start="7">
<li>最后重启防火墙</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>/etc/init.d/firewall restart
</span></span></code></pre></div><h2 id="拓展">拓展</h2>
<p>因为运营商分配的大都是动态ipv6，顾名思义，就是ip过一段时间就会变，<del>你也不想玩着玩着突然服务器没了吧</del></p>
<h3 id="域名购买">域名购买</h3>
<p>要解决上述问题，只需要有一个域名进行ddns解析即可</p>
<p><!-- raw HTML omitted -->我们可以到<a href="https://cn.aliyun.com/">阿里云</a>购买域名（这里需要注意的是，请尽量不要购买<code>.xyz</code>的域名，因为续费真的很贵</p>
<ol>
<li>支付宝登陆阿里云</li>
<li>搜索域名，输入你喜欢的域名，选择后缀，这里有钱的直接上.com，没钱的随便选个便宜的，但是一定要看续费，除非你只用一年</li>
<li>点击右上角购物车购买，买前需要创建一个信息模板和需要实名认证，未成年也能注册</li>
<li>买完后点击右上角AccessKey，创建一个key，一定不要分享给别人，最好把csv下载下来</li>
<li>在域名控制台-域名解析中，点击添加记录，记录类型设置为AAAA当然你有公网ipv4也可以多添加一个A类型的</li>
</ol>
<h3 id="ddns-go">DDNS-GO</h3>
<blockquote>
<p>简单好用的DDNS。自动更新域名解析到公网IP(支持阿里云、腾讯云、Dnspod、Cloudflare、Callback、华为云、百度云、Porkbun、GoDaddy、Google Domain)</p>
</blockquote>
<p>到了这一步，你应该得到了一个属于你的域名，恭喜你，这时候可以设置<code>ddns动态解析了</code>了</p>
<ol>
<li>我用的是ddns-go，在github上面就能找到</li>
<li>下载适合自己架构和系统的压缩包，解压到你喜欢的位置，使用sudo ./ddns-go -s install安装ddns-go</li>
<li>在浏览器输入<code>http://127.0.0.1:9876/</code>登陆后台（如果像我一样，使用ssh远程控制开发板，输入开发板的ip:9876/也可以进入后台）</li>
<li>DNS服务商选择自己注册域名的服务商</li>
<li>AccessKeyID和secret是上面创建的，有的服务商没有id着一个选项</li>
<li>获取ip的方式接口或网卡都行</li>
<li>Domains填入自己的域名和二级域名</li>
<li>点击save保存即可完成配置</li>
</ol>
<p>之后尝试用域名+网站端口访问网站，ssh也可以使用username@域名访问，流量访问也要试下</p>
<p>Enjoy</p>
<h2 id="后记">后记</h2>
<p>不知道是设置问题还是光猫太老了，ipv6过一段时间就会实效，需要手动重启光猫和机顶盒</p>
<h2 id="参考部分引用">参考|部分引用</h2>
<p><a href="https://blog.csdn.net/skyxc233/article/details/107284478i">关闭小米路由器防火墙 放行端口</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/260531160">小米、红米 AC2100 一键开启 SSH，可自定义安装各种插件</a></p>
<p><a href="https://zhidao.baidu.com/question/201179930957973045/answer/3652646687.html">华为光猫超级密码多少</a></p>
<p><a href="https://github.com/jeessy2/ddns-go">ddns-go</a></p>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Linux下的各种shell</title>
      <link>https://blog.sorgdream.com/posts/shell/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/shell/</guid>
      <description><![CDATA[<p>安装完linux要干什么？ 当然是美化一下终端啦</p>
<h2 id="fish">FIsh</h2>
<blockquote>
<p>fish is a smart and user-friendly command line shell for Linux, macOS, and the rest of the family.</p>
</blockquote>
<p>我接触到的第一个shell，自带语法高亮和自动补全这两项神器，如果你不嫌弃默认的主题的话，fish可以说是开箱即用</p>
<h3 id="安装">安装</h3>
<p>ubuntu环境下，使用<strong>apt</strong>命令进行安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install fish
</span></span></code></pre></div><p>安装完成后直接输入<code>fish</code>即可进入，默认会有一段欢迎语，如果不喜欢，可以用<code>fish -c &quot;set -U fish_greeting&quot;</code>来关闭</p>
<p>如果想要设置为默认的shell，则需使用<code>chsh -s $(which fish)</code>进行设置</p>
<h3 id="主题">主题</h3>
<p>安装完成后当然要再装一个主题<del>除非你喜欢默认</del></p>
<p>这里我们使用<a href="https://github.com/oh-my-fish/oh-my-fish/tree/master/docs/zh-CN">oh-my-fish</a>来安装主题</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -L github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish
</span></span><span style="display:flex;"><span>omf help
</span></span></code></pre></div><p>完成后输入omf，在fish下，如果命令是绿色的，那就是安装成功了，否则检查是否安装成功</p>
<p>输入omf theme即可查看能够安装的主题，以fox主题为例，下列是omf的使用方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>omf theme  <span style="color:#75715e">#列出主题</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf install fox <span style="color:#75715e">#安装fox主题</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf theme fox  <span style="color:#75715e">#更换fox主题</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf doctor  <span style="color:#75715e">#自检</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf destroy  <span style="color:#75715e">#卸载</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omf update <span style="color:#75715e">#更新</span>
</span></span></code></pre></div><p>如需安装更多主题请看<a href="https://xiao_beita.gitee.io/009_fish_omf/">小贝塔</a>，里面把所有的主题样式都展示出来</p>
<h3 id="别名">别名</h3>
<p>fish自带了<code>la</code>也就是<code>ls -A</code>的别名，能更方便我们查看</p>
<h2 id="zsh">Zsh</h2>
<blockquote>
<p>Zsh is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added.</p>
</blockquote>
<p>zsh对于bash的兼容性要好很多，相对的，想要配置zsh对比fish也要难</p>
<h3 id="安装-1">安装</h3>
<p>同样，使用<strong>apt</strong>命令安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install zsh
</span></span></code></pre></div><p>不同的是，zsh安装下一次启动终端时会弹出配置界面，使用和数字键选择即可完成配置</p>
<h3 id="主题-1">主题</h3>
<p>因为omz会拖慢zsh的速度，所以我们不选用omz来配置</p>
<p>这里以p10k主题为例;需要注意的是，因为p10k使用一部分的emoji图标，所以要想完美的显示最好安装nerd字体</p>
<blockquote>
<p>不想安装或已经安装完成的小伙伴可以跳过这一步
依据github上的文档，下载这四个字体文件，并分别双击安装，然后在终端的首选项里选择nerd字体即可</p>
</blockquote>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a></p>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a></p>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf">MesloLGS NF 斜体.ttf</a></p>
<p><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></p>
<p>安装完字体就可以正式开始安装p10k主题</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> https://gitee.com/romkatv/powerlevel10k.git ~/powerlevel10k
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;source ~/powerlevel10k/powerlevel10k.zsh-theme&#39;</span> &gt;&gt;~/.zshrc
</span></span></code></pre></div><p>使用以上命令即可完成安装
使用<code>exec zsh</code>重新启动zsh，完成后即可看到p10k的配置界面，按照提示，完成配置即可</p>
<h3 id="插件">插件</h3>
<p>因为zsh默认没有语法高亮和自动补全，所以需要两个插件来实现</p>
<h4 id="语法高亮">语法高亮</h4>
<p>使用<a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>这个插件来实现高亮</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source </span><span style="color:#e6db74">${</span>(q-)PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&#34;</span> &gt;&gt; <span style="color:#e6db74">${</span>ZDOTDIR<span style="color:#66d9ef">:-</span>$HOME<span style="color:#e6db74">}</span>/.zshrc
</span></span></code></pre></div><p>使用以上两条命令安装插件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
</span></span></code></pre></div><p>开启插件</p>
<h4 id="自动补全">自动补全</h4>
<p>使用[zsh-autosuggestions](git clone <a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> ~/.zsh/zsh-autosuggestions
)这一个插件实现</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
</span></span></code></pre></div><p>可能有细心的小伙伴发现，对语法高亮，自动补全貌似少了一条命令，因为自动补全没有将插件<code>echo</code>到<code>.zshrc</code>配置文件中，会导致重启终端后不启动插件，需要手动执行source命令开启，而语法高亮因为<code>echo</code>到<code>.zshrc</code>中，所以会跟着zsh一同启动</p>
<p>我们可以手动添加一条命令到<code>.zshrc</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source </span><span style="color:#e6db74">${</span>(q-)PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh&#34;</span> &gt;&gt; <span style="color:#e6db74">${</span>ZDOTDIR<span style="color:#66d9ef">:-</span>$HOME<span style="color:#e6db74">}</span>/.zshrc
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#                  ~/ 插件文件夹 / 插件.zsh               &gt;&gt;&gt;写入到.zshrc                    </span>
</span></span></code></pre></div><p>修改完成后执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
</span></span></code></pre></div><p>多重启几次终端，查看是否开启自动补全，如果重启没有自动补全，则需要检查上面的<code>echo</code>命令的路径是否是你插件的位置</p>
<h3 id="别名-1">别名</h3>
<p>zsh默认是没有带任何别名的，我们要去<code>.zshrc</code>中自行配置，zsh的配置文件在<code>/home/username/.zshrc</code></p>
<pre tabindex="0"><code>alias la=&#39;ls -A&#39;
alias ll=&#39;ls -alF&#39;
alias l=&#39;ls -CF&#39;
</code></pre><p>即可设置别名，也可以仿照上面的格式自定义</p>
<h2 id="bash">Bash</h2>
<blockquote>
<p>This is an sh-compatible shell that incorporates useful features from the Korn shell (ksh) and the C shell (csh)</p>
</blockquote>
<p>这是debian和众多发行版默认的shell，<del>也是作者正在用的shell</del> 用回zsh了，p10k真香</p>
<p>因为zsh和fish对bash的不兼容，使我在打包AnyKernel3的时候需要手动添加一行命令到.zshrc，以我的性格肯定不能忍，于是我就想有没有一种既对bash兼容性好，又方便易用的解决方案</p>
<h3 id="语法">语法</h3>
<p>因为脚本大多用的解释器都是bash,所以学习了下bash的语法</p>
<ul>
<li>脚本解释器</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span></code></pre></div><ul>
<li>变量</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>a<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> 
</span></span><span style="display:flex;"><span>b<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> 
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span><span style="color:#66d9ef">$((</span>$a<span style="color:#f92672">+</span>$b<span style="color:#66d9ef">))</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo $c
</span></span></code></pre></div><p>输出结果为3</p>
<ul>
<li>环境变量
使用<strong>export</strong>命令</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ABC<span style="color:#f92672">=</span>/usr/local/abc <span style="color:#75715e">#重启终端后失效</span>
</span></span></code></pre></div><ul>
<li>逻辑运算
<code>&amp;&amp;</code>与运算，需要同时为True</li>
</ul>
<p><code>||</code>或运算，其中一个为True</p>
<ul>
<li>if语句</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> 条件 <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        command
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fi</span> <span style="color:#75715e">#以fi结尾</span>
</span></span></code></pre></div><ul>
<li>for语句</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> arg in <span style="color:#f92672">[</span>list<span style="color:#f92672">]</span>;<span style="color:#66d9ef">do</span> 
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>不要忘了do前的;</p>
<ul>
<li>while语句</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#f92672">[</span> condition <span style="color:#f92672">]</span>;<span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>until循环</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">until</span> condition;<span style="color:#66d9ef">do</span> <span style="color:#75715e"># 条件为false则进入循环</span>
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><ul>
<li>函数</li>
</ul>
<p>使用<code>function</code>定义一个函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> func_name<span style="color:#f92672">(){</span> 
</span></span><span style="display:flex;"><span>    command1
</span></span><span style="display:flex;"><span>    command2
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">[</span><span style="color:#66d9ef">return</span> value<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>可直接使用函数名调用函数，例如</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> helloworld<span style="color:#f92672">(){</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Hello World&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helloworld
</span></span></code></pre></div><p>将在屏幕输出<code>HelloWorld</code></p>
<ul>
<li>sed命令</li>
</ul>
<p>作用是找到并替换文本，如</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sed -i <span style="color:#e6db74">&#34;s/world/hugo/g&#34;</span> helloworld.sh <span style="color:#75715e">#将helloworld.sh中的world全部替换成hugo  </span>
</span></span></code></pre></div><h3 id="starship">Starship</h3>
<ol>
<li>这是一个以兼容性优先，使用Rust编写，高度自定义的命令的提示符</li>
<li>它可以用于各种shell，包括常见的Bash/zsh/fish等，所以基本不存在兼容性问题，又能得到美丽的终端</li>
<li><del>自带自动补全和语法高亮</del> 需要shell支持，开箱即用，安装简单，对小白极其友好</li>
</ol>
<h3 id="安装-2">安装</h3>
<p>starship的安装十分简单，只需要执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -sS https://starship.rs/install.sh | sh
</span></span></code></pre></div><p>即可完成安装，之后你需要在<code>.bashrc</code>里开启starship
<!-- raw HTML omitted -->在.bashrc的最后，添加以下内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>starship init bash<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>重启终端，即可看到starship的默认样式</p>
<h3 id="进阶">进阶</h3>
<p>如果不满意默认的主题，可以使用以下命令创建配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mkdir -p ~/.config <span style="color:#f92672">&amp;&amp;</span> touch ~/.config/starship.toml
</span></span></code></pre></div><p>修改配置请看 <a href="https://starship.rs/config/">https://starship.rs/config/</a> 预设里还能找到别人的主题配置</p>
<h3 id="ps1">PS1</h3>
<p>在用了一段时间的starship后，可能会有小伙伴发现，打开多文件的文件夹会比较卡顿，路径有时会折叠</p>
<p>于是我果断卸载，改用最简单粗暴的方式，直接修改<code>PS1</code>变量
<!-- raw HTML omitted -->PS1的含义太多了，这里就不全列出来</p>
<table>
<thead>
<tr>
<th>\u</th>
<th>用户名</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\w</td>
<td>绝对路径</td>
</tr>
<tr>
<td>\W</td>
<td>路径的最后一个文件夹</td>
</tr>
<tr>
<td>\t</td>
<td>24小时制时间</td>
</tr>
<tr>
<td>\T</td>
<td>12小时制</td>
</tr>
<tr>
<td>$</td>
<td>root用户为#,普通$</td>
</tr>
<tr>
<td>\h</td>
<td>主题名</td>
</tr>
<tr>
<td>\d</td>
<td>日期</td>
</tr>
</tbody>
</table>
<p>你也可以设置颜色</p>
<table>
<thead>
<tr>
<th>30m</th>
<th>黑色</th>
</tr>
</thead>
<tbody>
<tr>
<td>31m</td>
<td>红色</td>
</tr>
<tr>
<td>32m</td>
<td>绿色</td>
</tr>
<tr>
<td>33m</td>
<td>黄色</td>
</tr>
<tr>
<td>34m</td>
<td>蓝色</td>
</tr>
</tbody>
</table>
<p>更多变量和颜色请看</p>
<p><a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/html_node/Controlling-the-Prompt.html">官方文档</a></p>
<p><a href="https://blog.csdn.net/qq_33958966/article/details/106080204">CSDN</a></p>
<p>除此之外，还可以使用一些其他的符号和文字美化，例如 &gt; /~/abc/./+等都可以，也可以使用表情</p>
<p>我现在用的是CSDN里找的<a href="https://blog.csdn.net/u011145574/article/details/105160496">ParrotOS风格</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\033[0;31m\]\342\224\214\342\224\200$([[ $? != 0 ]] &amp;&amp; echo &#34;[\[\033[0;31m\]\342\234\227\[\033[0;37m\]]\342\224\200&#34;)[\[\033[0;39m\]\u\[\033[01;33m\]@\[\033[01;96m\]\h\[\033[0;31m\]]\342\224\200[\[\033[0;32m\]\w\[\033[0;31m\]]\n\[\033[0;31m\]\342\224\224\342\224\200\342\224\200\342\225\274 \[\033[0m\]\[\e[01;33m\]\$ \[\e[0m\]&#39;</span>
</span></span></code></pre></div><blockquote>
<p>ps1来自csdn@Jiuh-star，侵联删</p>
</blockquote>
<p>因为<code>$</code>和命令贴的太近，于是在 $和&quot;[\e[0m]]&ldquo;中间加了一个空格</p>
<h2 id="参考">参考</h2>
<p><a href="https://zhuanlan.zhihu.com/p/452686607">一文掌握shell脚本的基本语法</a></p>]]></description>
      
    </item>
    
    
    
    <item>
      <title>hexo建立个人博客并部署到GitHub</title>
      <link>https://blog.sorgdream.com/posts/hexo/</link>
      <pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/hexo/</guid>
      <description><![CDATA[<h2 id="介绍">介绍</h2>
<p>hexo是什么</p>
<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>fluid是什么</p>
<blockquote>
<p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题</p>
</blockquote>
<h2 id="开始">开始</h2>
<p>推荐搭配<a href="https://hexo.io/zh-cn/index.html">官方文档</a>一起看</p>
<p>本教程基于Linux环境，作者用的是Debian12，window环境请搜索别的教程</p>
<ol>
<li>使用以下命令安装<strong>git</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get install git-core
</span></span></code></pre></div><ol start="2">
<li>安装<strong>Node.js</strong>
下载并导入 Nodesource GPG 密钥</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>sudo apt-get install -y ca-certificates curl gnupg
</span></span><span style="display:flex;"><span>sudo mkdir -p /etc/apt/keyrings
</span></span><span style="display:flex;"><span>curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
</span></span></code></pre></div><p>创建 deb 存储库</p>
<blockquote>
<p>NODE_MAJOR可以根据需要的版本进行更改</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>NODE_MAJOR<span style="color:#f92672">=</span><span style="color:#ae81ff">21</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_</span>$NODE_MAJOR<span style="color:#e6db74">.x nodistro main&#34;</span> | sudo tee /etc/apt/sources.list.d/nodesource.list
</span></span></code></pre></div><p>更新并安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>sudo apt-get install nodejs -y
</span></span></code></pre></div><ol start="3">
<li>安装<strong>hexo</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>npm install -g hexo-cli
</span></span></code></pre></div><ol start="4">
<li>安装完成后选择一个目录新建所需文件，作者这里用<code>hexo</code>文件夹</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hexo init &lt;folder&gt;   <span style="color:#75715e">#新建所选目录</span>
</span></span><span style="display:flex;"><span>cd &lt;folder&gt;
</span></span><span style="display:flex;"><span>npm install
</span></span></code></pre></div><h3 id="主题">主题</h3>
<p>到这里基本的安装已经完成，作者安装fluid主题，当然，别的也可以</p>
<ol start="5">
<li>
<p>到<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">fluid</a>下载最新的<strong>source code.tar.gz</strong></p>
</li>
<li>
<p>使用<code>tar -zxvf xxxxx.tar.gz</code>解压</p>
</li>
<li>
<p>然后将解压完的文件重命名为<strong>fliud</strong></p>
</li>
<li>
<p>将它移动到第四步你设定的目录下的<strong>themes</strong>文件夹</p>
</li>
<li>
<p>修改hexo根目录下的<code>_config.yml</code>文件，设定主题</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">theme</span>: <span style="color:#ae81ff">fluid</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">language</span>: <span style="color:#ae81ff">zh-CN</span>
</span></span></code></pre></div><ol start="10">
<li>根据主题的教程，这时候我们需要创建一个关于页</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hexo new page about
</span></span></code></pre></div><ol start="11">
<li>创建后修改<code>/source/about/index.md</code>的内容，添加<code>layout</code>属性</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: 你的标题
</span></span><span style="display:flex;"><span>layout: about
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>#下面写正文
</span></span></code></pre></div><p>其他的请看<a href="https://hexo.fluid-dev.com/docs/start/">用户手册</a>，就不细说了</p>
<ol start="12">
<li>配置好主题后我们生成一个本地的预览网页</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hexo s
</span></span></code></pre></div><p>输入<code>http://localhost:4000</code>就能看到生成的预览，注意只能本机访问</p>
<ol start="13">
<li>默认的文章是hello world,你可以使用<code>hexo n &quot;标题&quot;</code>来新建博客，包括初始的hello world ，都在<code>source/_posts</code>目录，如果想删掉文章，直接用rm命令就行</li>
</ol>
<h3 id="目录介绍">目录介绍</h3>
<table>
<thead>
<tr>
<th>source/_posts</th>
<th>存放文章</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>生成的html</td>
</tr>
<tr>
<td>themes</td>
<td>存放主题</td>
</tr>
<tr>
<td>_config.yml</td>
<td>配置文件，主题文件夹里的是主题的配置文件</td>
</tr>
</tbody>
</table>
<h2 id="部署到github">部署到Github</h2>
<p>因为本地启动之能我们自己看，要想让别人也看到就要部署到GitHub或者绑定域名</p>
<p>其他托管网站也行，比如gitee，只是方法有点不同，这里用GitHub</p>
<ol>
<li>确保你安装了<strong>git</strong>执行以下命令配置git</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git config --global user.name <span style="color:#e6db74">&#34;你的Github用户名&#34;</span>  <span style="color:#75715e">#冒号不用删</span>
</span></span><span style="display:flex;"><span>git config --global user.email <span style="color:#e6db74">&#34;你的Github邮箱&#34;</span>
</span></span></code></pre></div><ol start="2">
<li>配置完后开始生成密钥</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ssh-keygen -t rsa -C <span style="color:#e6db74">&#34;你的Github邮箱&#34;</span>
</span></span></code></pre></div><p>默认三个全回车就行，完成后会生成<strong>id_rsa.pub</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cat ~/.ssh/id_rsa.pub  <span style="color:#75715e">#查看密钥</span>
</span></span></code></pre></div><ol start="3">
<li>复制<strong>ssh</strong>开头的输出，打开GitHub，找到<code>settings-SSH and GPG Keys</code> 选择<code>add new</code>名字随便取，在ssh里填入你刚刚复制的内容，点击添加</li>
<li>执行以下命令，会询问你是否连接，输入<strong>yes</strong>后如果有<code>Hi xxx! You’ve successfully authenticated…</code>就代表连接成功</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ssh -T git@github.com
</span></span></code></pre></div><ol start="5">
<li>再去创建一个名为<code>用户名.github.io</code>的仓库，选项默认就行</li>
<li>回到hexo，vim编辑<code>_config.yml</code>文件，修改<strong>deploy</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">git</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">git@github.com:你的用户名/你的用户名.github.io.git</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">branch</span>: <span style="color:#ae81ff">master</span>
</span></span></code></pre></div><ol start="7">
<li>修改完后用以下命令生成并部署到GitHub</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hexo clean <span style="color:#75715e">#清理缓存</span>
</span></span><span style="display:flex;"><span>hexo g  <span style="color:#75715e">#生成静态网页</span>
</span></span><span style="display:flex;"><span>hexo d  <span style="color:#75715e">#部署到GitHub</span>
</span></span></code></pre></div><ol start="8">
<li>完成后再浏览器里访问<code>用户名.github.io</code>如果没有404，那就成功了</li>
</ol>
<p>如果出现<code>extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial</code>，可以尝试安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive
</span></span></code></pre></div><h2 id="基础写作">基础写作</h2>
<p>开始写文章前需要设定几个参数，我这里列举几个比较常用的</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: #你的标题
</span></span><span style="display:flex;"><span>date: #写作日期
</span></span><span style="display:flex;"><span>tags: #标签
</span></span><span style="display:flex;"><span>categories: #分类
</span></span><span style="display:flex;"><span>updated: #更新日期
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><p>如果想添加多个tags，可以用<code>[tags1,tags2,tags3]</code>来设定</p>
<h2 id="迁移至新电脑">迁移至新电脑</h2>
<p>如果换电脑或重装系统，只需保留</p>
<pre tabindex="0"><code>_config.yml #配置文件
themes #主题文件夹
_config.&lt;themename&gt;.yml #如果有
package.json #插件列表
package-lock.json 
source #文章
scaffolds 
db.json
</code></pre><p>将文件移入hexo文件夹，使用<code>npm install</code>安装插件</p>
<h2 id="参考">参考</h2>
<p><a href="https://zhuanlan.zhihu.com/p/552639819">2022【保姆级教程】含泪搭建hexo博客</a></p>
<p><a href="https://hexo.io/zh-cn/">hexo文档</a></p>
<p><a href="https://blog.csdn.net/weixin_44318830/article/details/104884936">CSDN-大数据梦想家</a></p>]]></description>
      
    </item>
    
    
    
    <item>
      <title>google/bing收录</title>
      <link>https://blog.sorgdream.com/posts/google.bing/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/google.bing/</guid>
      <description><![CDATA[<p>博客目前已被bing和google收录，bing的点击率比google要多，我们的<del>网站真是蒸蒸日上</del></p>
<h2 id="bing">Bing</h2>
<ol>
<li>来到<a href="https://www.bing.com/webmasters">必应网站管理员工具</a> ，用你喜欢的方式登录</li>
<li>然后点击添加网站，验证的话作者选择的是下载xml文件，Google也可以用相同的方法</li>
<li>将下载的xml文件直接拖动到mobaxterm，就可以通过网络传输，也可以使用<code>scp</code>命令,不过scp适合两台Linux主机之间互传文件，所以我们还需要安装wsl来配置Linux环境，这里就不细说了，下面是scp命令传输文件的方式</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>scp xxxxxx.xml  xxxx@ip:/home/xxxx/     <span style="color:#75715e">#其中第一个xxxx要换成你需要传的文件名，第二个换成被传主机的用户名，ip就不用说了，：后面就是你要传到的路径</span>
</span></span></code></pre></div><ol start="4">
<li>将bing的xml文件放在<strong>hexo</strong>的<strong>source</strong>目录下</li>
<li>使用以下命令生成并部署到GitHub</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hexo clean   <span style="color:#75715e">#清理缓存</span>
</span></span><span style="display:flex;"><span>hexo g   <span style="color:#75715e">#生成</span>
</span></span><span style="display:flex;"><span>hexo d  <span style="color:#75715e">#部署</span>
</span></span></code></pre></div><p>完成后等一会就可以点击验证，确认没问题就可以进入管理界面</p>
<h2 id="网站地图">网站地图</h2>
<p>这里最好添加一个网站地图，能提高爬虫率和加快收录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>npm install hexo-generator-sitemap --save <span style="color:#75715e">#安装</span>
</span></span><span style="display:flex;"><span>hexo clean   
</span></span><span style="display:flex;"><span>hexo g
</span></span><span style="display:flex;"><span>hexo d
</span></span></code></pre></div><p>在添加到bing之前最好先测试下，在你的博客地址后添加<code>/sitemap.xml</code>并访问，比如
<a href="https://xxxxxx.github.io/sitemap.xml">https://xxxxxx.github.io/sitemap.xml</a></p>
<p><!-- raw HTML omitted -->如果不是404，有输出结果那就是成功了，接下来只需要将它添加到bing的网站地图即可</p>
<h2 id="google">Google</h2>
<p>Google和bing差不多，但比bing多一步，而且还要挂代理，稍微麻烦了些</p>
<ol>
<li>同样的，访问<a href="https://search.google.com/search-console">Google Search Console</a>使用你的谷歌账户登录</li>
<li>选择网址前缀，下载Google的<code>html</code>文件，跟bing一样，也是放在<code>soure</code>文件夹，不过是文件按不一样罢了，但是部署到GitHub之前需要加多一条命令，这里引用<a href="https://javahikers.github.io/2019/06/16/personal-blog-being-included-in-google/">javahiker</a>的解释</li>
</ol>
<blockquote>
<p>hexo会将source目录下的文件googlexxxx.html打包到public目录.这个过程中googlexxxx.html的内容被hexo修改了，如果直接部署到我们的网站，google那边会验证不通过。而打包的过程中是不会修改source下的googlexxxx.html文件的，所以可以通过命令行将未被修改的文件googlexxxx.html拷贝过去。这样就能通过google的验证了。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hexo clean
</span></span><span style="display:flex;"><span>hexo g
</span></span><span style="display:flex;"><span>cp source/googlexxxxxx.html public/  <span style="color:#75715e">#直接复制到public目录</span>
</span></span><span style="display:flex;"><span>hexo d
</span></span></code></pre></div><p>完成后等一会点击验证即可成功</p>
<h2 id="永久链接">永久链接</h2>
<p>如果我们修改文章的标题或是创建时间，引索过的网页就会404,需要重新爬网，解决办法就是创建永久链接</p>
<p>我们使用<code>hexo-abbrlink</code>这个插件来实现</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>npm install hexo-abbrlink --save <span style="color:#75715e">#安装插件</span>
</span></span></code></pre></div><p>安装完成后修改hexo根目录下的<code>_config.yml</code>配置文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># URL</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Set your site url here. For example, if you use GitHub Page, set url as &#39;https://username.github.io/project&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://xxxxx.github.io  </span> <span style="color:#75715e">#自己的网址</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">permalink</span>: :<span style="color:#ae81ff">year-:month-:day/:abbrlink.html </span> <span style="color:#75715e">#链接形式</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">abbrlink</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alg</span>: <span style="color:#ae81ff">crc32 </span> <span style="color:#75715e">#算法</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rep</span>: <span style="color:#ae81ff">hex  </span> <span style="color:#75715e">#进制</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">permalink_defaults</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">pretty_urls</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">trailing_index</span>: <span style="color:#66d9ef">true</span> <span style="color:#75715e"># Set to false to remove trailing &#39;index.html&#39; from permalinks</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">trailing_html</span>: <span style="color:#66d9ef">true</span> <span style="color:#75715e"># Set to false to remove trailing &#39;.html&#39; from permalinks</span>
</span></span></code></pre></div><p>链接形式：hexo默认的形式是<code>year/:month/:day/:title/</code>，我这里改为<code>year-:month-:day/:abbrlink.html</code></p>
<p>比如<code>https://inuyasha-660.github.io/2023-08-11/21353.html</code>也就是这篇文章的链接</p>]]></description>
      
    </item>
    
    
    
    <item>
      <title>香橙派zero3</title>
      <link>https://blog.sorgdream.com/posts/orangepi/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/orangepi/</guid>
      <description><![CDATA[<h2 id="基础配置">基础配置</h2>
<table>
<thead>
<tr>
<th>CPU</th>
<th>全志H618高性能四核Cortex-A53处理器 1.5GHz</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPU</td>
<td>Mali G31 MP2</td>
</tr>
<tr>
<td>RAM</td>
<td>1GB/1.5GB/2GB/4GB LPDDR4</td>
</tr>
<tr>
<td>储存</td>
<td>16MB SPI Flash</td>
</tr>
<tr>
<td>板载WiFi+蓝牙</td>
<td>WiFi5和蓝牙5.0</td>
</tr>
<tr>
<td>网络</td>
<td>10M/100M/1000M以太网接口</td>
</tr>
<tr>
<td>音频输入、输出</td>
<td>13Pin扩展端口支持2路输出1路输入</td>
</tr>
<tr>
<td>视频输出</td>
<td>Micro HDMI支持4K@60fps</td>
</tr>
<tr>
<td>USB</td>
<td>USB 2.0 x 3（需搭配扩展版）</td>
</tr>
<tr>
<td>SD卡接口</td>
<td>Micro SD</td>
</tr>
<tr>
<td>电源输入</td>
<td>5V3A，Type-c接口</td>
</tr>
<tr>
<td>拓展接口</td>
<td>26Pin GPIO接口 &amp;&amp; 13Pin GPIO接口</td>
</tr>
</tbody>
</table>
<p>因为原本买它是用来搭建mc服务器的，所以ram选择4g版</p>
<h2 id="安装系统">安装系统</h2>
<p>开发版出场带一个微型的linxu，因为板载储存只有16m，所以仅供测试使用，我们需要刷入一个新的系统</p>
<h3 id="格式化">格式化</h3>
<p>我用的是京东京造麒麟128g的sd卡，第一次直接用balena写入镜像，插入能识别到卡但还是默认的微型Linux，所以改sd card formatter格式化之后再用win32写入，工具再官网即可下载，系统镜像也可在此下载（万恶的百度网盘）</p>
<p>BTW，买完后最好还是看一遍用户手册，写的还是比较详细的，能帮助快速入门</p>
<h3 id="刷入">刷入</h3>
<p>直接将写入系统的的sd卡怼到卡槽，重启就完事了</p>
<h3 id="登陆">登陆</h3>
<p>因为没有屏幕，所以我们需要使用ssh来远程控制，先接上网线，注意，网线的另一头要接到路由器上
<!-- raw HTML omitted -->登陆路由器后台，找到orangepi3,查看设备ip，使用<code>ssh root@ip</code>登陆
<!-- raw HTML omitted -->如果在用windows的话可以使用mobaxterm进行图形化登陆</p>
<p>如果登不上后台，可以使用<code>ifconfig</code>获取网络信息</p>
<ol>
<li>使用<code>sudo pacman -S net-tools nmap</code>安装所需包</li>
<li>执行命令后找到<code>inet 192.168.xx.xxx</code>这一行</li>
<li>使用<code>nmap 192.168.xx.0/24</code>扫描局域网下的设备</li>
<li>找到类似<code>Nmap scan report for orangepizero3 (192.168.xx.xxx)</code>就是香橙派的IP,ssh连接即可</li>
</ol>
<h2 id="系统配置">系统配置</h2>
<p>和普通的linxu一样，我们首先进行换源，作者选择<a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">清华源</a>,系统debian，其他的例如ubuntu也可以在镜像站找到
<!-- raw HTML omitted -->因为debian普通用户默认不再sudo组的，所以我们直接以root用户登陆</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>apt install vim 
</span></span></code></pre></div><p>使用<code>vim /etc/apt/sources.lis</code>修改，将源改为清华大学源
<!-- raw HTML omitted --><code>:wq</code>保存并退出修改</p>
<p>软件自带了python、zsh我们这里安装一个<code>neofetch</code>来砍下系统是否为debian</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>apt install neofetch
</span></span></code></pre></div><p>让我们来n以下</p>
<pre tabindex="0"><code>neofetch
</code></pre><p>有圈圈似的图案就说明Debian已经成功刷入了，如果图案是企鹅的话就说明我们还在默认的微型Linux</p>
<h2 id="美化">美化</h2>
<p>因为自带了zsh，所以不需要额外安装，使用<code>zsh</code>即可切换
<!-- raw HTML omitted -->使用<code>chsh -s $(which zsh)</code>即可设置默认shell</p>
<h3 id="主题">主题</h3>
<p>选用p10k主题，教程来自<a href="https://github.com/romkatv/powerlevel10k#installation">官方</a>如果慢的话可以克隆gitee镜像</p>
<h3 id="插件">插件</h3>
<p>插件依然选用<a href="https://github.com/zsh-users/zsh-syntax-highlighting">语法高亮</a>和<a href="https://github.com/zsh-users/zsh-autosuggestions">自动补全</a></p>
<p>这里要补充下，因为自动补全少了将插件添加到.zshrc文件这一步，所以导致每次关闭终端再打开就需要重新加载插件，只需要执行这下面的命令就可以将自动补全添加到zsh配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source </span><span style="color:#e6db74">${</span>(q-)PWD<span style="color:#e6db74">}</span><span style="color:#e6db74">/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh&#34;</span> &gt;&gt; <span style="color:#e6db74">${</span>ZDOTDIR<span style="color:#66d9ef">:-</span>$HOME<span style="color:#e6db74">}</span>/.zshrc
</span></span></code></pre></div><p>如果报错了那请检查自动补全下载到哪个文件夹，然后把<code>.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</code>替换成自己插件目录里的<code>zsh-autosuggestions.zsh</code>文件的路径</p>
<p><code>${(q-)PWD}/</code>指向当前目录，请在<code>${(q-)PWD}/</code>的后面填写当前目录下插件的位置</p>
<h2 id="时区设置">时区设置</h2>
<p>因为开发板默认是UTC时间，也就是标准时间+0000，所以导致和东八区相差8小时
<!-- raw HTML omitted -->这里参考<a href="https://blog.csdn.net/yongroot/article/details/90676764?spm=1001.2014.3001.5506">CSDN</a>的文章，是我测试唯一有用的一篇</p>
<ol>
<li>使用<code>date -R</code>查看时间</li>
<li>虽然<code>tzselect</code>看上去很像一个设定时区的命令，但是它仅仅只是告诉你该怎么写TZ变量，比如北京时间就是<code>Asia/Shanghai</code>对于想更改时间的小伙伴没什么用</li>
<li>正确的做法是修改TZ变量，使用<code>export TZ= 'Asia/Shanghai'</code>命令设置时间
但是直接修改叉掉终端后又会变回原本的时间，我们需要修改<code>/etc/profile</code>文件来永久设定系统时间</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span> sudo vim /etc/profile
</span></span><span style="display:flex;"><span> export  TZ<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Asia/Shanghai&#39;</span> <span style="color:#75715e">#复制</span>
</span></span><span style="display:flex;"><span> :wq <span style="color:#75715e">#退出</span>
</span></span></code></pre></div><p>这样即使重新登录也还是北京时间</p>
<h2 id="docker">Docker</h2>
<blockquote>
<p>docker是一个用Go语言实现的开源项目，可以让我们方便的创建和使用容器</p>
</blockquote>
<p>在安装宝塔面板前，先安装docker
<!-- raw HTML omitted -->因为开发版自带安装脚本，所以具体步骤请以用户手册为准</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>enable_docker.sh
</span></span></code></pre></div><p>使用以上命令安装，完成后测试一下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker run hello-world
</span></span></code></pre></div><p>如果有输出<code>hello from docker</code>那就是成功了</p>
<h2 id="宝塔面板">宝塔面板</h2>
<p>安装完debian后，为了方便管理，选择安装宝塔面板
<!-- raw HTML omitted -->教程来自用户文档</p>
<ol>
<li>首先我们扩容tmp分区，使用命令查看<code>/tmp</code>分区大小，如果是2G，那就不需要扩容，如果小于2G，执行以下命令扩容</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>df -h | grep <span style="color:#e6db74">&#34;/tmp&#34;</span>  <span style="color:#75715e">#查看分区大小</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo sed -i <span style="color:#e6db74">&#39;s/nosuid/&amp;,size=2G/&#39;</span> /etc/fstab   <span style="color:#75715e">#扩容</span>
</span></span></code></pre></div><p>完成后<code>sudo reboot</code>重启下</p>
<ol start="2">
<li>使用<code>sudo install_bt_panel.sh</code>安装宝塔面板，需要的时间比较久，作者用了35分钟</li>
<li>安装完成后，会打印面板地址，如果你有公网ip，那么两个都可以，如果没有还是老老实实用内网地址</li>
<li>进去后会提示安装套件，不知道为什么作者需要从源码编译安装，太耗时间了所以没装完</li>
</ol>
<h2 id="minecraft开服">Minecraft开服</h2>
<p>这也是我买开发板的主要用途，首先查看能安装的Openjdk版本</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt search openjdk
</span></span></code></pre></div><p>我安装的版本是<code>openjdk-17-jdk</code>具体以你的输出为准</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install openjdk-17-jdk <span style="color:#75715e">#安装</span>
</span></span></code></pre></div><p>接下来安装MCSmanager面板
什么是MCSmanager呢？</p>
<blockquote>
<p>分布式，稳定可靠，开箱即用，高扩展性，支持 Minecraft 和其他少数游戏的控制面板</p>
</blockquote>
<p>参考官方文档，使用以下命令安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>wget -qO- https://gitee.com/mcsmanager/script/raw/master/setup_cn.sh | bash
</span></span></code></pre></div><p>基础命令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># 先启动面板守护进程。</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 这是用于进程控制，终端管理的服务进程。</span>
</span></span><span style="display:flex;"><span>systemctl start mcsm-daemon.service
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 再启动面板 Web 服务。</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 这是用来实现支持网页访问和用户管理的服务。</span>
</span></span><span style="display:flex;"><span>systemctl start mcsm-web.service 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 重启面板命令</span>
</span></span><span style="display:flex;"><span>systemctl restart mcsm-daemon.service
</span></span><span style="display:flex;"><span>systemctl restart mcsm-web.service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 停止面板命令</span>
</span></span><span style="display:flex;"><span>systemctl stop mcsm-web.service
</span></span><span style="display:flex;"><span>systemctl stop mcsm-daemon.service
</span></span></code></pre></div><p>启动面板后浏览器输入<code>&lt;IP&gt;:23333</code>进入面板，如果进不去的话去宝塔面板找到安装-添加端口规则，填入<code>23333</code>端口即可</p>
<p>mcs面板实例打不开也可以用此方法</p>
<h2 id="alist">AList</h2>
<p>买开发板还有一个目的就是为了搭建一个个人nas，这里以在docker内安装alist为例</p>
<ol>
<li>为了方便管理，我们先安装一个docker管理器，直接在宝塔的应用商城内搜索即可</li>
<li>使用命令安装Alist</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker run -d --restart<span style="color:#f92672">=</span>always -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> -e PGID<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> -e UMASK<span style="color:#f92672">=</span><span style="color:#ae81ff">022</span> --name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alist&#34;</span> xhofe/alist:latest
</span></span></code></pre></div><ol start="3">
<li>安装完成后使用<code>docker exec -it alist ./alist admin set NEW_PASSWORD</code>设定密码，<code>NEW_PASSWORD</code>改为你要设置的密码
浏览器输入<code>http://&lt;ip&gt;:5244</code>进入alist，账号默认为<code>admin</code></li>
</ol>
<h3 id="alist挂载阿里云">alist挂载阿里云</h3>
<ol>
<li>刷新令牌
<!-- raw HTML omitted -->前往</li>
</ol>
<pre tabindex="0"><code>https://alist.nn.ci/tool/aliyundrive/request.html
</code></pre><p>点击login in，登陆自己的账号即可生成令牌
2. Oauth令牌链接
<!-- raw HTML omitted -->由于原api <code>https://api.nn.ci</code>被sni阻断，导致国内无法连接，所以要添加新的api</p>
<pre tabindex="0"><code>https://api-cf.nn.ci/alist/ali_open/token   #二选一
https://api.xhofe.top/alist/ali_open/token
</code></pre><ol start="3">
<li>云盘类型
<!-- raw HTML omitted -->这里一定要选对，如果错了会导致加载不了，登录阿里云盘手机端4.9.0以上的版本就可以看到。如果不确定可以两个都试试</li>
</ol>
<h3 id="更改密码">更改密码</h3>
<p>如果像我一样忘了密码，可以用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker exec -it alist ./alist admin set NEW_PASSWORD
</span></span></code></pre></div><p>重新设置一个密码，<code>NEW_PASSWORD</code>为你的密码</p>
<h3 id="挂载本地">挂载本地</h3>
<ol>
<li>将要挂载的文件/文件夹移至alist容器内</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> docker cp /home/image-hosting 200adb99680d:/orangepi/web
</span></span></code></pre></div><p># 200adb99680d - 容器ID</p>
<p># /home/image-hosting - 以东的文件夹或目录</p>
<p># /orangepi/web - 目标目录</p>
<p>完成后在后台添加<code>/orangepi</code>即可挂载文件/文件夹</p>
<h2 id="结尾">结尾</h2>
<p>开发板还有许多好玩的东西，比如刷openwrt作软路由，刷android tv作机顶盒等，这里只是列举除了一部分</p>]]></description>
      
    </item>
    
    
    
    <item>
      <title>KernelSU内核编译</title>
      <link>https://blog.sorgdream.com/posts/kernelsu/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/kernelsu/</guid>
      <description><![CDATA[<h2 id="环境搭建">环境搭建</h2>
<p>搭建编译所需的环境</p>
<h3 id="系统安装">系统安装</h3>
<p>教程基于ubuntu，你可以选择实机安装或者使用wsl2,如何安装请看<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">使用 WSL 在 Windows 上安装 Linux</a></p>
<blockquote>
<p>注：wsl下的文件传输需将文件移动到挂载点<code>/mnt/c</code></p>
</blockquote>
<h3 id="编译环境">编译环境</h3>
<p>使用以下命令安装所需软件包</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install -y bc bison build-essential curl flex g++-multilib gcc-multilib <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    libssl-dev libxml2 libxml2-utils lzop pngcrush schedtool <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>                    squashfs-tools xsltproc zip zlib1g-dev unzip  
</span></span></code></pre></div><h3 id="系统代理">系统代理</h3>
<p>如果你的设备能够直连Github，并且速度还不错，那你可以忽视这一步
<!-- raw HTML omitted -->我们使用clash作为代理工具</p>
<h4 id="linux">Linux</h4>
<p>请看我的另一篇文章<a href="https://blog.inuya.ltd/posts/clash/">Clash-For-Linux</a></p>
<h4 id="windows">Windows</h4>
<ol>
<li>下载<a href="https://github.com/Z-Siqi/Clash-for-Windows_Chinese/releases">Clash-For-Windows</a>(已存档)</li>
<li>都有图形化操作界面了还要我教？</li>
<li>使用以下命令设置终端代理</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>export https_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 http_proxy<span style="color:#f92672">=</span>http://127.0.0.1:7890 all_proxy<span style="color:#f92672">=</span>socks5://127.0.0.1:7891
</span></span></code></pre></div><h2 id="源码下载">源码下载</h2>
<p>现在开始下载所需的内核源码和工具，我们最好创建一个工作目录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mkdir -p kernel  <span style="color:#f92672">&amp;&amp;</span> cd kernel <span style="color:#75715e">#创建并进入工作目录</span>
</span></span><span style="display:flex;"><span>mkdir -p toolchains  <span style="color:#75715e">#工具链目录</span>
</span></span><span style="display:flex;"><span>mkdir -p source  <span style="color:#75715e">#内核源码目录</span>
</span></span></code></pre></div><h3 id="内核源码">内核源码</h3>
<p>如果你是小米用户，你可以试着下官方的源码，不过官方的源码可能不能成功编译，而且年久失修，大部分新机都没有公布源码，所以还是建议使用类原生的源码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>官方源码仓库
</span></span><span style="display:flex;"><span>https://github.com/MiCode/Xiaomi_Kernel_OpenSource
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>如果要下载的话请使用 git 命令
</span></span><span style="display:flex;"><span>git clone --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> https://github.com/MiCode/Xiaomi_Kernel_OpenSource -b cannon-r-oss  
</span></span></code></pre></div><p><code>cannon-r-oss</code>是作者的手机代号，需将<code>cannon-r-oss</code>换成自己源码的分支</p>
<p>类原生的话就简单多了，点击仓库右上角的<strong>code</strong>,把HTTPS的链接复制下来</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone xxxxxxxxxxxx.git  <span style="color:#75715e"># xxxxxxxx.git换成自己的链接</span>
</span></span></code></pre></div><h3 id="添加kernelsu">添加KernelSU</h3>
<p>只需使用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -LSs <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh&#34;</span> | bash -
</span></span></code></pre></div><p>即可将KernelSU添加到内核源码树
<!-- raw HTML omitted -->然后需要编辑你的配置文件，通常在<code>arch/arm64/configs/</code>，较新的机型也可能在<code>arch/arm64/configs/vendor/</code></p>
<p>进入文件夹，找到类似<code>设备代号_defconfig</code>的文件，比如我的代号是<strong>cannon</strong>，配置文件就是<code>cannon_defconfig</code></p>
<p>使用<strong>vim</strong>编辑配置文件，用<code>ESC+/</code>进入查找，在/后面输入你要找的内容，例如<code>/KPROBES</code>
<!-- raw HTML omitted -->如果没有开启相关的配置，需要手动添加</p>
<pre tabindex="0"><code>CONFIG_KPROBES=y
CONFIG_HAVE_KPROBES=y
CONFIG_KPROBE_EVENTS=y
</code></pre><h3 id="工具链下载">工具链下载</h3>
<p>作者使用zys-clang12和gcc4.9进行编译
<!-- raw HTML omitted -->因为zyc-clang需要下载压缩包并解压，所以我们先使用<strong>git</strong>下载gcc</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git
</span></span></code></pre></div><p>浏览器访问</p>
<pre tabindex="0"><code>https://github.com/ZyCromerZ/Clang/releases/download/12.0.1-20230207-release/Clang-12.0.1-20230207.tar.gz
</code></pre><p>下载zyc-clang</p>
<p>下载完成后用<code>tar -zxvf xxxx.tar.gz</code>解压</p>
<p>如果觉得目录太常不方便的话，可以用<strong>mv</strong>命令重命名文件夹</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mv &lt;原名称&gt; &lt;你想改的名称&gt;   
</span></span></code></pre></div><h2 id="编译脚本">编译脚本</h2>
<p>一般我们会用一个编译脚本设置环境变量、配置文件等
<!-- raw HTML omitted -->我的脚本是<del>抄</del>参考别人教程</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim build.sh <span style="color:#75715e">#创建编译脚本 </span>
</span></span></code></pre></div><p>写入以下内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>starttime<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>date +<span style="color:#e6db74">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>export ARCH<span style="color:#f92672">=</span>arm64
</span></span><span style="display:flex;"><span>export SUBARCH<span style="color:#f92672">=</span>arm64
</span></span><span style="display:flex;"><span>make O<span style="color:#f92672">=</span>out cannon_defconfig
</span></span><span style="display:flex;"><span>              make -j8 O<span style="color:#f92672">=</span>out <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    NM<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-nm <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    OBJCOPY<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-objcopy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    LD<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/ld.lld <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        CROSS_COMPILE<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/aarch64-linux-gnu- <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        CROSS_COMPILE_ARM32<span style="color:#f92672">=</span>~/kernel/toolchains/gcc-arm-4.9/bin/arm-linux-androideabi- <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        CC<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/clang <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        AR<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-ar <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        OBJDUMP<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-objdump <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        STRIP<span style="color:#f92672">=</span>~/kernel/toolchains/clang-12/bin/llvm-strip
</span></span><span style="display:flex;"><span>        2&gt;&amp;<span style="color:#ae81ff">1</span> | tee error.log
</span></span><span style="display:flex;"><span>endtime<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>date +<span style="color:#e6db74">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>start_seconds<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>date --date<span style="color:#f92672">=</span><span style="color:#e6db74">&#34; </span>$starttime<span style="color:#e6db74">&#34;</span> +%s<span style="color:#66d9ef">)</span>;
</span></span><span style="display:flex;"><span>end_seconds<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>date --date<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$endtime<span style="color:#e6db74">&#34;</span> +%s<span style="color:#66d9ef">)</span>;
</span></span><span style="display:flex;"><span>echo Start: $starttime.
</span></span><span style="display:flex;"><span>echo End: $endtime.
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Build Time: &#34;</span><span style="color:#66d9ef">$((</span>end_seconds-start_seconds<span style="color:#66d9ef">))</span><span style="color:#e6db74">&#34;s.&#34;</span>
</span></span></code></pre></div><p>需要注意的是，<code>cannon_defconfig</code>配置文件的路径已经在<code>arch/arm64/configs/</code></p>
<p>假设你的配置文件是<code>arch/arm64/configs/example_defconfig</code>那你只需要填写<code>example_defconfig</code>即可</p>
<p>但如果你的配置文件位于<code>arch/arm64/configs/vendor/example_defconfig</code>则需要填写<code>vendor/example_defconfig</code></p>
<h2 id="开始编译">开始编译</h2>
<p>用<code>chmod +x build.sh</code>添加执行权限，<code>./build.sh</code>执行编译脚本，产出在<code>out/arch/arm64/boot</code>目录</p>
<h2 id="打包内核">打包内核</h2>
<p>能来到这一步，你应该能成功编译出内核，恭喜你，接下来我们需要将它打包成boot或内核刷入</p>
<h3 id="anykernel3">AnyKernel3</h3>
<p>项目地址：https://github.com/osm0sis/AnyKernel3</p>
<p>用<strong>git</strong>下载AnyKernel3</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/osm0sis/AnyKernel3.git
</span></span></code></pre></div><p>你需要把产出的Image放到AnyKernel3的根目录，然后编辑<code>anykernel.sh</code>
<!-- raw HTML omitted -->需要改的是以下几点</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kernel.string<span style="color:#f92672">=</span>KernelSU-cannon-inuyasha <span style="color:#75715e">#内核名称</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.devicecheck<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#75715e">#设备检测，为0时关闭</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.modules<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.systemless<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.cleanup<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>.cleanuponabort<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>device.name1<span style="color:#f92672">=</span>cannon  <span style="color:#75715e">#设备代号，可以设置多个</span>
</span></span><span style="display:flex;"><span>device.name2<span style="color:#f92672">=</span>cannong
</span></span><span style="display:flex;"><span>device.name3<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>device.name4<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>supported.versions<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>supported.patchlevels<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>supported.vendorpatchlevels<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>block<span style="color:#f92672">=</span>auto;   
</span></span><span style="display:flex;"><span>is_slot_device<span style="color:#f92672">=</span>auto;  
</span></span><span style="display:flex;"><span>ramdisk_compression<span style="color:#f92672">=</span>auto; 
</span></span><span style="display:flex;"><span>patch_vbmeta_flag<span style="color:#f92672">=</span>auto; 
</span></span></code></pre></div><p>配置完后使用<code>zip -r9 UPDATE-AnyKernel3.zip * -x .git README.md *placeholder</code>即可打包内核</p>
<p>如果使用zsh，可能会报错<code>not matches found</code>，只需要在<code>.zshrc</code>中添加</p>
<pre tabindex="0"><code>setopt no_nomatch
</code></pre><p>然后再<code>source ~/.zshrc</code>即可解决</p>
<h3 id="magiskboot">MagiskBoot</h3>
<p>如果你不喜欢用anykernel3，你也可以提取原版的boot.img使用编译出来的image替换原厂kernel</p>
<ol>
<li>首先到<a href="https://github.com/topjohnwu/Magisk/releases">Magisk</a>下载magisk.apk,重命名为.zip并解压</li>
<li>把解压后的<code>Magisk-v26.1/lib/arm64-v8a/libmagiskboot.so</code>文件，用 adb push 到手机</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>adb push Magisk-v26.1/lib/arm64-v8a/libmagiskboot.so /data/local/tmp/magiskboot 
</span></span></code></pre></div><p><code>Magisk-v26.1</code>需要改成下载的版本号</p>
<ol start="3">
<li>按照上面的方法把提取的boot.img和编译出的Image都push到手机</li>
<li>用<code>adb shell</code>进入adb，然后进入手机<code>/data/local/tmp</code>/目录，赋予magiskboot可执行权限<code>chmod +x magiskboot</code></li>
<li>执行<code>./magiskboot unpack boot.img</code>解包boot.img得到kernel文件</li>
<li>用<strong>Image</strong>替换<strong>kernel</strong><code>mv -f Image kernel</code></li>
<li>最后执行<code>./magiskboot repack boot.img</code>命令重新打包boot.img，得到<strong>new-boot.img</strong>，备份原厂boot后在fastboot中刷入即</li>
</ol>
<h2 id="拓展">拓展</h2>
<p>如果kprobe不正常工作，就会出现无限重启，不开机，替换boot后仍显示不支持等错误，接下来我们将手动修改源码集成ksu</p>
<p>首先让我们验证是否为kprobe的问题，</p>
<ol>
<li>首先用vim打开<code>KernelSU/kernel/ksu.c</code></li>
<li>找到<code>ksu_enable_sucompat() 和 ksu_enable_ksud()</code>这两行，使用<code>//</code>注释掉</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// ksu_enable_sucompat();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ksu_enable_ksud()
</span></span></span></code></pre></div><p>就像这样</p>
<p>重新编译你的内核，看能否开机，如果能正常开机就是kprobe的问题，如果还是不能开机，检查你的源码是否适用你的系统</p>
<h3 id="修改内核源码">修改内核源码</h3>
<ol>
<li>使用这条命添加KSU</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -LSs <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh&#34;</span> | bash -
</span></span></code></pre></div><ol start="2">
<li>因为要改的比较多，推荐去看<a href="https://kernelsu.org/zh_CN/guide/how-to-integrate-for-non-gki.html">官方文档</a>，写的比较详细</li>
</ol>
<h3 id="bugreport">BugReport</h3>
<p>如果手动集成还是失败，你可以去Github提供一个<a href="https://github.com/tiann/KernelSU/issues/new/choose">BugReport</a>给作者，在管理其设置，发送日志即可发送错误日志</p>
<h2 id="参考部分引用">参考|部分引用</h2>
<p><a href="https://kernelsu.org/zh_CN/guide/how-to-integrate-for-non-gki.html">如何为非 GKI 内核集成 KernelSU </a></p>
<p><a href="https://blog.ticks.cc/posts/id/ef0vy/">红米K40内核KernelSU编译</a></p>
<p><a href="https://zixijian.github.io/2021/01/15/008.html"> 手机端编译安卓内核</a></p>]]></description>
      
    </item>
    
    
    
    <item>
      <title>手机终端termux</title>
      <link>https://blog.sorgdream.com/posts/termux/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.sorgdream.com/posts/termux/</guid>
      <description><![CDATA[<h2 id="介绍">介绍</h2>
<blockquote>
<p>Termux 是一款Android 终端模拟器和 Linux 环境应用程序，无需 root 或设置即可直接运行。自动安装最小的基本系统 - 使用 APT 包管理器可以使用其他包。</p>
</blockquote>
<h2 id="安装">安装</h2>
<p>你可以在<a href="https://github.com/termux/termux-app">Github</a>和<a href="https://f-droid.org/zh_Hans/packages/com.termux/">F-Droid</a>找到安装包</p>
<p><!-- raw HTML omitted -->但我并不推荐你安装github或play商店上的termux，因为一些拓展程序是分版本的，你在github上下的用不了f-droid商店上的拓展，而play商店上的拓展是要花钱的，所以我推荐都在F-Droid上下载</p>
<h2 id="基础配置">基础配置</h2>
<p>和普通的linux一样，第一步是换源，这里我推荐清华大学的termux源，速度还是不错的</p>
<p>使用<code>pkg install vim</code>安装vim
<!-- raw HTML omitted -->vim修改<code>$PREFIX/etc/apt/sources.list</code>，删除原来的源，复制<a href="https://mirrors.tuna.tsinghua.edu.cn/help/termux/">清华源</a>里的内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pkg update
</span></span><span style="display:flex;"><span>pkg upgrade
</span></span></code></pre></div><p>更新一下</p>
<p>这里推荐一个软件<strong>neofetch</strong>，能打印硬件和系统信息到终端</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pkg install neofetch  <span style="color:#75715e">#安装</span>
</span></span><span style="display:flex;"><span>neofetch
</span></span></code></pre></div><h3 id="快捷键修改">快捷键修改</h3>
<p>默认的两排快捷键可能满足不了我们，我们可以编译<code>~/.termux/termux.properties</code>来修改</p>
<pre tabindex="0"><code>extra-keys = [ \
 [&#39;ESC&#39;,&#39;-&#39;,&#39;/&#39;,&#39;HOME&#39;,&#39;UP&#39;,&#39;END&#39;,&#39;PGUP&#39;,&#39;ENTER&#39;], \
 [&#39;QUOTE&#39;,&#39;CTRL&#39;,&#39;ALT&#39;,&#39;LEFT&#39;,&#39;DOWN&#39;,&#39;RIGHT&#39;,&#39;PGDN&#39;,&#39;BKSP&#39;] \]
</code></pre><p>这时我自己的配置</p>
<p>具体可以参考这个表格修改</p>
<table>
<thead>
<tr>
<th>CTRL</th>
<th>组合键</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEL</td>
<td>删除</td>
</tr>
<tr>
<td>UP</td>
<td>上键</td>
</tr>
<tr>
<td>QUPTE</td>
<td>双引号</td>
</tr>
<tr>
<td>LEFT</td>
<td>左键</td>
</tr>
<tr>
<td>RIGHT</td>
<td>右键</td>
</tr>
<tr>
<td>DOWN</td>
<td>下健</td>
</tr>
<tr>
<td>ENTER</td>
<td>回车</td>
</tr>
<tr>
<td>ECS</td>
<td>退出</td>
</tr>
<tr>
<td>PGUP</td>
<td>上翻页</td>
</tr>
<tr>
<td>PGDN</td>
<td>下翻页</td>
</tr>
</tbody>
</table>
<p>每个按键只能出现一次，一些其他按键如<code>&quot;</code> <code>|</code>也能添加</p>
<h2 id="美化">美化</h2>
<p>我主要使用zsh来美化终端，首先安装zsh</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pkg install zsh
</span></span></code></pre></div><p>设置默认shell</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>chsh -s zsh
</span></span></code></pre></div><h3 id="插件">插件</h3>
<p>和普通linxu一样，我主要<a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>和<a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a>这两个插件</p>
<p>具体请看我的另一篇文章<a href="https://inuyasha-660.github.io/2023/08/19/linux%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/">Linux终端美化</a></p>
<h3 id="终端配色">终端配色</h3>
<p>因为作者是从Github上下载安装的termux，用不了F-Droid上的拓展，而play商店上的还要花钱，所以我使用<a href="https://github.com/adi1090x/termux-style">termux-style</a>作为替代</p>
<p>使用以下命令下载并安装termux-style</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/adi1090x/termux-style
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cd termux-style
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>./install
</span></span></code></pre></div><p>安装完后使用<code>termux-style</code>即可进入设置界面，里面可以选字体和背景颜色</p>
<h3 id="启动语修改">启动语修改</h3>
<p>如果我们觉得默认的启动语不好看，可以修改<code>$PREFIX/etc/motd</code>来自定义启动语</p>
<p>可以用<a href="http://patorjk.com/software/taag">字符画生成器</a>生成一个Termux</p>
<pre tabindex="0"><code>  _______                             
 |__   __|                            
    | | ___ _ __ _ __ ___  _   ___  __
    | |/ _ \ &#39;__| &#39;_ ` _ \| | | \ \/ /
    | |  __/ |  | | | | | | |_| |&gt;  &lt; 
    |_|\___|_|  |_| |_| |_|\__,_/_/\_\
                                      
</code></pre><h2 id="开发">开发</h2>
<p>termux支持的开发环境很多，选择自己需要的即可
<!-- raw HTML omitted -->Termux自带python，所以不用安装</p>
<h3 id="编辑器">编辑器</h3>
<p>一个好的编辑器能提供舒服的开发环境，作者用的是<strong>vim</strong>,使用<code>pkg install vim</code>即可安装</p>
<p>想要配置vim，首先新建配置文件<code>vim ~/.vimrc</code>，作者只开启了语法高亮和行号显示</p>
<pre tabindex="0"><code>set nu               
syntax on             
</code></pre><h2 id="远程连接">远程连接</h2>
<p>我主要拿termux作为终端远程连接开发版和电脑</p>
<h3 id="准备">准备</h3>
<ol>
<li>linux主机，域名和公网ipv6</li>
<li>linux主机，公网ipv4</li>
</ol>
<p>先说第一种，我们需要购买一个域名，开启ipv6,使用dns和ddns动态解析域名到本级ipv6地址，即可使用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ssh root@&lt;域名&gt;
</span></span></code></pre></div><p>远程连接linux主机</p>
<p>第二种就简单多了，如果你有一个公网ipv4,你可以直接使用<code>ssh root@&lt;ip&gt;</code>进行连接</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a></p>]]></description>
      
    </item>
    
    
    
    
    
    
  </channel>
</rss>
